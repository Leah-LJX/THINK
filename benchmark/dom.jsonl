{"description": "Checks if a node represents a paragraph element", "package": "org.w3c.dom", "method_declaration": "private boolean isParagraph(Node node)"}
{"description": "Removes previously registered mutation listeners from the document", "package": "org.w3c.dom", "method_declaration": "protected void removeDomMutationListeners(Document doc)"}
{"description": "Return the <code>XMLBuilder</code> representing the nth ancestor element of this node, or the root node if n exceeds the documents depth", "package": "org.w3c.dom", "method_declaration": "public XMLBuilder up(int steps)"}
{"description": "Utility routine to write a string node to the DOM", "package": "org.w3c.dom", "method_declaration": "protected Element writeStringNodeToDom(Document doc, Element parent, String nodeName, String nodeValue)"}
{"description": "Adds a definition and mark it as render. For inclusive c14n", "package": "org.w3c.dom", "method_declaration": "public Node addMappingAndRender(String prefix, String uri, Attr n)"}
{"description": "In some old version of Logisim, buggy Logisim versions, labels where incorrectly stored also in toolbar and lib components. If this is the case, clean them up.", "package": "org.w3c.dom", "method_declaration": "private static void fixInvalidToolbarLib(Element root)"}
{"description": "Invoke the Parser on fname and return the root TreeNode", "package": "org.w3c.dom", "method_declaration": "public Document getRoot(String filename)"}
{"description": "Recursively removes all comment nodes from the subtree", "package": "org.w3c.dom", "method_declaration": "static public void removeComments(Node node)"}
{"description": "Read elements to the search form", "package": "org.w3c.dom", "method_declaration": "public void getSearchForm(Document doc)"}
{"description": "Get the value of a tag in a node", "package": "org.w3c.dom", "method_declaration": "public static String getTagValue( Node n, String tag )"}
{"description": "Write a string of text to a document stream", "package": "org.w3c.dom", "method_declaration": "public void document_write(Node node, String text)"}
{"description": "Checks if a any cloud Provider with that name appears on the project file", "package": "org.w3c.dom", "method_declaration": "public static boolean existsCloudProvider(String cloudName)"}
{"description": "reads a XML Element Attribute ans cast it to a Time Object", "package": "org.w3c.dom", "method_declaration": "public Time toTime(Config config, Element el, String attributeName)"}
{"description": "Return a duplicate copy of this Element. Note that its children will not be copied unless the 'deep' flag is true, but Attributes are always replicated", "package": "org.w3c.dom", "method_declaration": "public Node cloneNode(boolean deep)"}
{"description": "DOM: Implements <code>SVGLengthList#insertItemBefore(SVGLength,int)</code>", "package": "org.w3c.dom", "method_declaration": "public SVGLength insertItemBefore(SVGLength newItem, int index) throws DOMException, SVGException"}
{"description": "Creates an element node with a URI in the table and type information", "package": "org.w3c.dom", "method_declaration": "public int createDeferredElement(String elementURI, String elementName, Object type)"}
{"description": "Transform the HTML text to follow a standard format. Element attributes are reordered in alphabetical order. Spacing and line breaks are standardized too", "package": "org.w3c.dom", "method_declaration": "private static String convertToStandardHtml(String rawHtml, boolean isPart)"}
{"description": "Look for child node of given name", "package": "org.w3c.dom", "method_declaration": "public static final Element getChildElement(final Node parent, final String name)"}
{"description": "reads a XML Element Attribute ans cast it to a Date", "package": "org.w3c.dom", "method_declaration": "public Date toDate(Element el,String attributeName, Date defaultValue)"}
{"description": "Introduced in DOM Level 2. Removes an attribute specified by local name and namespace URI", "package": "org.w3c.dom", "method_declaration": "public Node removeNamedItemNS(String namespaceURI, String name) throws DOMException"}
{"description": "Returns the qualified class name of the TargetControlPanel subclass for the specified layerinfo element. The class name should be specified in the \"controlpanelclass\" attribute", "package": "org.w3c.dom", "method_declaration": "public String getLayerControlPanelClass(Node layerinfo)"}
{"description": "Converts on the specified filter primitive element, the specified attribute that represents a float and with the specified default value", "package": "org.w3c.dom", "method_declaration": "protected static float convertNumber(Element filterElement, String attrName, float defaultValue, BridgeContext ctx)"}
{"description": "Method of refactoring to fix prefix of nodes", "package": "org.w3c.dom", "method_declaration": "public void refactor(Node node, Document document)"}
{"description": "Load the map with the stylesheets elements in the document. The masters are wrapped for instances of mxStyleSheet", "package": "org.w3c.dom", "method_declaration": "public void initialise(Document doc)"}
{"description": "Returns the first child element retrieved by tag name from the parent node and null otherwise", "package": "org.w3c.dom", "method_declaration": "public static Element getFirstChildElementByTagName(Node parentNode, String elementName)"}
{"description": "Generate empty outbound elem", "package": "org.w3c.dom", "method_declaration": "private Element generateEmptyOutboundElem(XmlProcessor hqmfXmlProcessor)"}
{"description": "To implement <code>org.w3c.dom.svg.SVGTextContentElement#getRotationOfChar(int charnum)</code>", "package": "org.w3c.dom", "method_declaration": "public static float getRotationOfChar(Element elt, final int charnum)"}
{"description": "Retrieve the text content of an element. Recursively retrieves all the text nodes, expanding whitespace where necessary. Ignores any elements except <code><text:s></code>, <code><text:line-break></code> and <code><text:tab></code>", "package": "org.w3c.dom", "method_declaration": "public String getText(Node element)"}
{"description": "Get all the attributes in a certain node (on the root level)", "package": "org.w3c.dom", "method_declaration": "public static String[] getNodeAttributes(Node node)"}
{"description": "Whether or not the given node is accepted by this tree walker", "package": "org.w3c.dom", "method_declaration": "protected short acceptNode(Node n)"}
{"description": "Check that an element is empty, i.e., it contains no non-whitespace text or elements as children", "package": "org.w3c.dom", "method_declaration": "public static boolean isEmptyElement(Element el)"}
{"description": "Finds and returns the last child node with the given name and attribute name, value pair", "package": "org.w3c.dom", "method_declaration": "public static Element getLastChildElement(Node parent, String elemName, String attrName, String attrValue)"}
{"description": "Copies a node from one Document to another, including attributes but no children. Required as importNode does not handle namespaces well for element nodes", "package": "org.w3c.dom", "method_declaration": "public static Node copyNodeToDoc(Document doc, Node x)"}
{"description": "Method to read dynamic UI component details from xml and populate UI accordingly", "package": "org.w3c.dom", "method_declaration": "private void readDynamicUIComponents(Node node)"}
{"description": "Determines whether a node has valid child elements. Filters out ones that are not a real ELEMENT_NODE", "package": "org.w3c.dom", "method_declaration": "private static boolean hasChildNodesThatAreElements(Node node)"}
{"description": "Helper method for recusively getting the element that has namespace URI and localname", "package": "org.w3c.dom", "method_declaration": "protected NodeList getElementsNS(org.w3c.dom.Element parentElement, String namespace, String localName)"}
{"description": "Creates a DOMException. On J2SE 1.4 and above the cause for the exception will be set", "package": "org.w3c.dom", "method_declaration": "public static DOMException createDOMException(short code, Throwable cause)"}
{"description": "Appends the UsernameToken element to the elements already in the Security header. The method can be called any time after <code>prepare()</code>. This allows to insert the UsernameToken element at any position in the Security header", "package": "org.w3c.dom", "method_declaration": "public void appendToHeader(WSSecHeader secHeader)"}
{"description": "Creates a property-element belonging to the documents object-element if such exists", "package": "org.w3c.dom", "method_declaration": "public void addProperty(String name, String value) throws XMLException"}
{"description": "Finds the node in the given document with the given name and attribute", "package": "org.w3c.dom", "method_declaration": "private static Node findNodeWithAttribute(Document doc, String nodeName, String name, String value)"}
{"description": "Check if an EntityReference node has Text Only child nodes", "package": "org.w3c.dom", "method_declaration": "private boolean hasTextOnlyChildren(Node node)"}
{"description": "Dispatches a BindingEvent the registered listeners", "package": "org.w3c.dom", "method_declaration": "protected void dispatchBindingChangedEvent(Element bindableElement, Element shadowTree)"}
