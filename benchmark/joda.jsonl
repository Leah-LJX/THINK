{"description": "Gets the default zone provider. Tries the system property org.joda.time.DateTimeZone.Provider. Then tries a ZoneInfoProvider using the data in org/joda/time/tz/data. Then uses UTCProvider", "package": "org.joda.time", "method_declaration": "private static Provider getDefaultProvider()"}
{"description": "Add to the Month component of the specified time instant wrapping around within that component if necessary", "package": "org.joda.time", "method_declaration": "public long addWrapField(long instant, int months)"}
{"description": "Gets the values of a partial from an instant", "package": "org.joda.time", "method_declaration": "public int[] get(ReadablePartial partial, long instant)"}
{"description": "Returns the millisecond of the second from the given epoch millis and timezone id. The value ranges from 0 to 999", "package": "org.joda.time", "method_declaration": "@ScalarFunction public static int millisecond(long millis, String timezoneId)"}
{"description": "Gets a formatted cassandra timestamp string for storage", "package": "org.joda.time", "method_declaration": "public static String getCassDate(DateTime d)"}
{"description": "Instructs the printer to emit a numeric minuteOfDay field", "package": "org.joda.time", "method_declaration": "public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits)"}
{"description": "Gets the chronology from the specified interval object handling null. If the interval object is null, or the interval's chronology is null, ISOChronology#getInstance() will be returned. Otherwise, the chronology from the object is returned", "package": "org.joda.time", "method_declaration": "public static final Chronology getIntervalChronology(ReadableInterval interval)"}
{"description": "Instructs the printer to emit a numeric yearOfEra field", "package": "org.joda.time", "method_declaration": "public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits)"}
{"description": "According to the JavaDocs, there are two methods that should always return null. * getRangeDurationField() * getLeapDurationField() Ensure that these are in fact null", "package": "org.joda.time", "method_declaration": "public void testMethodsThatShouldAlwaysReturnNull()"}
{"description": "Provides fully formatted date time. See HREF", "package": "org.joda.time", "method_declaration": "public static String getFormattedDateTime(String dateTimeString)"}
{"description": "Get period type from string", "package": "org.joda.time", "method_declaration": "public static PeriodType getPeriodType(String p)"}
{"description": "Get this object as a MutableDateTime using the same chronology but a different zone", "package": "org.joda.time", "method_declaration": "public MutableDateTime toMutableDateTime(DateTimeZone zone)"}
{"description": "Creates a new Period instance that matches all the instants between N weeks before the instantiation and the instantiation", "package": "org.joda.time", "method_declaration": "public static Period createSinceWeeksPeriod(int numberOfWeeks)"}
{"description": "Gets the chronology from the specified instant object handling null. If the instant object is null, or the instant's chronology is null, ISOChronology#getInstance() will be returned. Otherwise, the chronology from the object is returned", "package": "org.joda.time", "method_declaration": "public static final Chronology getInstantChronology(ReadableInstant instant)"}
{"description": "Calculate the number of days between start and end dates based on the default timezone. If the end date is before the start date, the returned value is negative", "package": "org.joda.time", "method_declaration": "public static int calculateDays(long startMs, long endMs)"}
{"description": "Converts seconds to mins", "package": "org.joda.time", "method_declaration": "public static int SECONDS_TO_MINUTES(int seconds)"}
{"description": "Verifies that a JSON Web Token was issued in the past", "package": "org.joda.time", "method_declaration": "public boolean issuedAtIsValid(JsonToken jsonToken, Instant now)"}
{"description": "Checks if the given string is a non-null string contained in DateTimeZone's list of time zone IDs", "package": "org.joda.time", "method_declaration": "public String getInvalidityInfoForCourseTimeZone(String timeZoneValue)"}
{"description": "Adds the duration to the instant, specifying the number of times to add", "package": "org.joda.time", "method_declaration": "public long add(long instant, long duration, int scalar)"}
{"description": "Creates a Months representing the number of whole months in the specified interval. This method correctly handles any daylight savings time changes that may occur during the interval", "package": "org.joda.time", "method_declaration": "public static Months monthsIn(ReadableInterval interval)"}
{"description": "Parse a date using a format", "package": "org.joda.time", "method_declaration": "public static long parseDate(final String pattern, final String timeZoneId, final String value)"}
{"description": "Verifies that a JSON Web Token is not expired", "package": "org.joda.time", "method_declaration": "public boolean expirationIsValid(JsonToken jsonToken, Instant now)"}
{"description": "Returns the minimal window that includes both this window and the given window", "package": "org.joda.time", "method_declaration": "public IntervalWindow span(IntervalWindow other)"}
{"description": "Creates a Minutes representing the number of whole minutes in the specified interval", "package": "org.joda.time", "method_declaration": "public static Minutes minutesIn(ReadableInterval interval)"}
{"description": "Creates a Period representing the number of whole months between N months before the instantiation and the instantiation", "package": "org.joda.time", "method_declaration": "public static Period createSinceMonthsPeriod(int numberOfMonths)"}
{"description": "Returns true if the provided interval has endpoints that can be compared against other DateTimes using their string representations. See also DateTimes#canCompareAsString(DateTime)", "package": "org.joda.time", "method_declaration": "public static boolean canCompareEndpointsAsStrings(final Interval interval)"}
{"description": "Does this date contain the specified time interval", "package": "org.joda.time", "method_declaration": "public boolean contains(final LocalDate date)"}
{"description": "Method to count days from one date to another", "package": "org.joda.time", "method_declaration": "public double numOfDays(String start, String end)"}
{"description": "Converts seconds to weeks", "package": "org.joda.time", "method_declaration": "public static int SECONDS_TO_WEEKS(int seconds)"}
{"description": "Calculates the number of complete cycles between the given billing start date and the given 'today's' date", "package": "org.joda.time", "method_declaration": "public static Integer calculateCycleNumber(BillingPeriod period, DateMidnight billingStart, DateMidnight today)"}
