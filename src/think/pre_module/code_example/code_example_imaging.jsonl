{"api_description": "static void applyFloydSteinbergDithering(BufferedImage image, Palette palette): class Dithering\tChanges the given image to only use colors from the given palette, applying Floyd-Steinberg dithering in the process.", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.palette.Dithering;\nimport org.apache.commons.imaging.palette.Palette;\nimport org.apache.commons.imaging.palette.SimplePalette;\n\npublic class DitheringExample {\n    public static void main(String[] args) throws ImageWriteException {\n        BufferedImage originalImage = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);\n        Palette palette = new SimplePalette(null); \n\n        Dithering.applyFloydSteinbergDithering(originalImage, palette);\n    }\n}"}
{"api_description": "ColorModel deriveColorModel(BufferedImage bi, ColorSpace cs): class ColorTools", "api_example": "import java.awt.color.ColorSpace;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);\n        ColorTools tools = new ColorTools(); \n        ColorModel derivedModel = tools.deriveColorModel(image, colorSpace);\n    }\n}"}
{"api_description": "BufferedImage convertBetweenICCProfiles(BufferedImage bi, ICC_Profile from, ICC_Profile to): class ColorTools\t", "api_example": "import java.awt.image.BufferedImage;\nimport java.awt.color.ICC_Profile;\n\npublic class ColorTools {\n    public BufferedImage convertBetweenICCProfiles(BufferedImage bi, ICC_Profile from, ICC_Profile to) {\n        // API usage example\n        BufferedImage inputImage = bi;\n        ICC_Profile sourceProfile = from;\n        ICC_Profile targetProfile = to;\n\n        // Call the method to convert the image between the ICC profiles\n        BufferedImage outputImage = convertBetweenICCProfiles(inputImage, sourceProfile, targetProfile);\n\n        // Return the resulting image\n        return outputImage;\n    }\n}"}
{"api_description": "abstract BufferedImage toRawImage(WritableRaster raster): class PDColorSpace\tReturns the image in this colorspace or null.",",api_example": "import java.awt.image.BufferedImage;\nimport java.awt.image.WritableRaster;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;\nimport org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace;\n\npublic class ExampleUsage {\n    public static void main(String[] args) throws IOException {\n        WritableRaster raster = null; // initialize with appropriate raster\n        PDColorSpace colorSpace = new PDJPXColorSpace(null); // create an instance of PDColorSpace\n        BufferedImage image = colorSpace.toRawImage(raster); // call the toRawImage method\n\n        // use the resulting image as needed\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(byte[] src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.ByteArrayOutputStream;\nimport java.io.OutputStream;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ExifMetadataUpdater {\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream fis = new FileInputStream(\"input.jpg\");\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n\n            byte[] buffer = new byte[1024]; \n            int bytesRead = 0;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                bos.write(buffer, 0, bytesRead); \n            byte[] src = bos.toByteArray(); \n            fis.close();\n            \n            TiffOutputSet outputSet = new TiffOutputSet();\n            OutputStream os = new ByteArrayOutputStream();\n            new ExifRewriter().updateExifMetadataLossy(src, os, outputSet);\n\n            }\n        }catch (IOException | ImageReadException | ImageWriteException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossless(File src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        File sourceFile = new File(\"input.jpg\");\n        File outputFile = new File(\"output.jpg\");\n        \n        try {\n            TiffOutputSet outputSet = new TiffOutputSet();\n            OutputStream os = new FileOutputStream(outputFile);\n            \n            ExifRewriter rewriter = new ExifRewriter();\n            rewriter.updateExifMetadataLossless(sourceFile, os, outputSet);\n\n            os.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(byte[] src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport java.io.*;\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        byte[] sourceImageBytes = null;\n        OutputStream outputStream = null;\n        TiffOutputSet tiffOutputSet = null;\n\n        ExifRewriter exifRewriter = new ExifRewriter();\n        try {\n\t\t\texifRewriter.updateExifMetadataLossy(sourceImageBytes, outputStream, tiffOutputSet);\n\t\t} catch (ImageReadException | ImageWriteException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(File src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        File inputFile = new File(\"input.jpg\");\n        File outputFile = new File(\"output.jpg\");\n\n        try {\n            TiffOutputSet outputSet = new TiffOutputSet();\n            // Modify the outputSet as needed\n            OutputStream os = new FileOutputStream(outputFile);\n            ExifRewriter exifRewriter = new ExifRewriter();\n            try {\n\t\t\t\texifRewriter.updateExifMetadataLossy(inputFile, os, outputSet);\n\t\t\t} catch (ImageReadException | ImageWriteException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n            os.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(InputStream src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.TiffImageMetadata;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\npublic class ExifRewriterUsageExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        InputStream inputStream = new FileInputStream(\"\");// initialize input stream with the jpeg image\n        OutputStream outputStream = new FileOutputStream(\"\");// initialize output stream to write the result\n        \n        try {\n\n\t\t\tTiffImageMetadata metadata = new TiffImageMetadata(null);\n            TiffOutputSet outputSet = metadata.getOutputSet();\n            \n            // Modify the metadata\n            if (outputSet != null) {\n                // for example: outputSet.getOrCreateExifIFD0Directory().setDate(ExifIFD0Directory.TAG_DATETIME, new Date());\n                // modify other metadata values as needed\n            }\n            \n            ExifRewriter rewriter = new ExifRewriter();\n            rewriter.updateExifMetadataLossy(inputStream, outputStream, outputSet);\n            \n            inputStream.close();\n            outputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "static ImageFormat Imaging.guessFormat (File file): class Imaging\tAttempts to determine the image format of a file based on its \"magic numbers,\" the first bytes of the data.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageFormat;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageChecker {\n    public static void main(String[] args) {\n        File imgFile = new File(\"image.jpg\");\n        ImageFormat format;\n\t\ttry {\n\t\t\tformat = Imaging.guessFormat(imgFile);\n\t        System.out.println(\"The image format is: \" + format);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "ImageDataReader getDataReader(TiffDirectory directory, PhotometricInterpreter photometricInterpreter, int bitsPerPixel, int[] bitsPerSample, int predictor, int samplesPerPixel, int width, int height, int compression, TiffPlanarConfiguration planarConfiguration, ByteOrder byteorder): class TiffImageData.Strips", "api_example": "import java.io.IOException;\nimport java.nio.ByteOrder;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.tiff.TiffDirectory;\nimport org.apache.commons.imaging.formats.tiff.TiffField;\nimport org.apache.commons.imaging.formats.tiff.TiffImageData;\nimport org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;\nimport org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreter;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;\n\npublic class ImageDataExample {\n    public void usageExample() throws ImageReadException, IOException {\n        long offset = 0;\n\t\tint type = 0;\n\t\tlong nextDirectoryOffset = 0;\n\t\tByteOrder byteOrder = null;\n\t\tList<TiffField> entries = null;\n\t\tTiffDirectory directory = new TiffDirectory(type, entries, offset, nextDirectoryOffset, byteOrder); // instantiate TiffDirectory or pass as parameter\n        PhotometricInterpreter photometricInterpreter = new PhotometricInterpreterBiLevel(0, null, 0, 0, 0, false);\n        int bitsPerPixel = 8; \n        int[] bitsPerSample = {8, 8}; \n        int predictor = 1; \n        int samplesPerPixel = 3; \n        int width = 100; \n        int height = 100; \n        int compression = 1; \n        // TiffPlanarConfiguration 枚举类型\n        TiffPlanarConfiguration planarConfiguration = TiffPlanarConfiguration.CHUNKY;\n        ByteOrder byteorder = ByteOrder.BIG_ENDIAN; \n        TiffImageData.Strips ts = new TiffImageData.Strips(null, compression);\n        \n        ImageDataReader imageDataReader = ts.getDataReader(directory, photometricInterpreter, bitsPerPixel, bitsPerSample, predictor, samplesPerPixel, width, height, compression, planarConfiguration, byteorder);\n    }\n}\n"}
{"api_description": "FormatCompliance getFormatCompliance(File file): class ImageParser\tDetermines the format compliance of the specified file based on rules provided by a specific implementation.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.FormatCompliance;\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\n\npublic class ImageParserExample {\n\t\n    public static void main(String[] args) {\n        File imageFile = new File(\"example.jpg\");\n        \n        ImageParser<?> parser = new JpegImageParser();\n        FormatCompliance compliance;\n\t\ttry {\n\t\t\tcompliance = parser.getFormatCompliance(imageFile);\n\t        System.out.println(\"Format Compliance: \" + compliance);\n\t\t} catch (ImageReadException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (byte[] bytes): class Imaging\tGets all images specified by the byte array (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageProcessor {\n    public static void main(String[] args) {\n        byte[] imageBytes = { /* actual image bytes */ };\n        \n        List<BufferedImage> images;\n\t\ttry {\n\t\t\timages = Imaging.getAllBufferedImages(imageBytes);\n\t        for (BufferedImage image : images) {\n\t            // Process each image as needed\n\t        }\n\t\t} catch (ImageReadException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "Dimension getImageSize(ByteSource byteSource, IcnsImagingParameters params): class IcnsImageParser\tGet the size of the image described by the specified ByteSource.", "api_example": "import java.awt.Dimension;\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.bytesource.ByteSource;\nimport org.apache.commons.imaging.common.bytesource.ByteSourceFile;\nimport org.apache.commons.imaging.formats.icns.IcnsImageParser;\nimport org.apache.commons.imaging.formats.icns.IcnsImagingParameters;\n\npublic class ImageProcessor {\n    public static void main(String[] args) throws ImageReadException, IOException {\n    \tFile file = new File(\"file-path\");\n        ByteSource byteSource = new ByteSourceFile(file);\n        IcnsImagingParameters params = new IcnsImagingParameters();\n        IcnsImageParser parser = new IcnsImageParser();\n\n        Dimension imageSize = parser.getImageSize(byteSource, params);\n        System.out.println(\"Image size: \" + imageSize);\n    }\n}"}
{"api_description": "BufferedImage getImage(): class PDImage\tReturns the content of this image as an AWT buffered image with an (A)RGB color space.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImage;\n\npublic class ImageProcessor {\n    private PDImage pdImage;\n\n    public ImageProcessor(PDImage pdImage) {\n        this.pdImage = pdImage;\n    }\n    \n    public BufferedImage convertToBufferedImage() throws IOException {\n        return pdImage.getImage();\n    }\n}"}
{"api_description": "Dimension getImageSize(ByteSource byteSource, JpegImagingParameters params): class JpegImageParser\tGet the size of the image described by the specified ByteSource.", "api_example": "import java.awt.Dimension;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\n\npublic class ImageSizeGetter {\n    public Dimension getImageSize(byte[] byteSource, JpegImagingParameters params) {\n        ImageParser<JpegImagingParameters> imageParser = new JpegImageParser();\n        try {\n\t\t\treturn imageParser.getImageSize(byteSource, params);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n    }\n}"}
{"api_description": "List<byte[]> collectRawImageData(ByteSource byteSource, TiffImagingParameters params): class TiffImageParser", "api_example": "import java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.bytesource.ByteSource;\nimport org.apache.commons.imaging.common.bytesource.ByteSourceFile;\nimport org.apache.commons.imaging.formats.tiff.TiffImageParser;\nimport org.apache.commons.imaging.formats.tiff.TiffImagingParameters;\n\npublic class TiffImageParserExample {\n\n    public static void main(String[] args) throws ImageReadException, IOException {\n        ByteSource byteSource = new ByteSourceFile(new File(\"path\")); // initialize with actual byte source\n        TiffImagingParameters params = new TiffImagingParameters(); // initialize with actual TiffImagingParameters\n        TiffImageParser parser = new TiffImageParser();\n        \n        List<byte[]> rawImages = parser.collectRawImageData(byteSource, params);        \n        // Use rawImages for further processing\n    }\n}"}
{"api_description": "TiffOutputDirectory getRootDirectory(): class TiffOutputSet", "api_example": "import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\npublic class TiffOutputExample {\n    public static void main(String[] args) {\n        TiffOutputSet tiffOutputSet = new TiffOutputSet();\n        \n        TiffOutputDirectory rootDirectory = tiffOutputSet.getRootDirectory();\n        \n        // API usage example\n        System.out.println(\"Root directory: \" + rootDirectory.toString());\n    }\n}"}
{"api_description": "static int convertYCbCrtoRGB(int Y, int Cb, int Cr): class PhotometricInterpreterYCbCr\tThis method converts a YUV (aka YCbCr) colorspace to a RGB colorspace.", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;\n\npublic class YCbCrExample {\n    public static void main(String[] args) {\n        int Y = 150;\n        int Cb = 50;\n        int Cr = 100;\n\n        int rgbValue = PhotometricInterpreterYCbCr.convertYCbCrtoRGB(Y, Cb, Cr);\n        System.out.println(\"RGB value: \" + rgbValue);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (InputStream is, String fileName): class Imaging\tGets all images specified by the InputStream (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class APIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        InputStream inputStream = new FileInputStream(new File(\"file-path\")); // initialize input stream\n        String fileName = \"example.jpg\";\n        List<BufferedImage> allImages = Imaging.getAllBufferedImages(inputStream, fileName);\n        // rest of the code\n    }\n}"}
{"api_description": "static String Imaging.dumpImageFile (File file): class Imaging\tWrite the ImageInfo and format-specific information for the image content of the specified file to a string.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File imageFile = new File(\"example.jpg\");\n        String imageInfo = Imaging.dumpImageFile(imageFile);\n        System.out.println(imageInfo);\n    }\n}"}
{"api_description": "byte[] getICCProfileBytes(File file): class ImageParser\tGet an array of bytes describing the International Color Consortium (ICC) specification for the color space of the image contained in the input file.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File inputFile = new File(\"image.jpg\");\n        ImageParser<JpegImagingParameters> imageParser = new JpegImageParser();\n        byte[] iccProfileBytes = imageParser.getICCProfileBytes(inputFile);\n        // Further processing of iccProfileBytes\n    }\n}"}
{"api_description": "Palette process(BufferedImage image, int maxColors, MedianCut medianCut): class MedianCutQuantizer", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.palette.LongestAxisMedianCut;\nimport org.apache.commons.imaging.palette.MedianCut;\nimport org.apache.commons.imaging.palette.MedianCutQuantizer;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageWriteException {\n        BufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB); // initialize with actual image\n        int maxColors = 256;\n        MedianCut medianCut = new LongestAxisMedianCut();\n\n        MedianCutQuantizer palette = new MedianCutQuantizer(false);\n        palette.process(image, maxColors, medianCut);\n    }\n}"}
{"api_description": "BufferedImage convertTosRGB(BufferedImage bi): class ColorTools", "api_example": "import java.awt.image.BufferedImage;\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n    \tBufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB);\n\n        ColorTools colorTools = new ColorTools();\n        BufferedImage sRGBImage = colorTools.convertTosRGB(image);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (File file): class Imaging\tGets all images specified by the file (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File file = new File(\"path_to_file\");\n        List<BufferedImage> images = Imaging.getAllBufferedImages(file);\n    }\n}"}
{"api_description": "void interpretPixel(ImageBuilder imageBuilder, int[] samples, int x, int y): class PhotometricInterpreterYCbCr", "api_example": "import org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.ImageBuilder;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        ImageBuilder imageBuilder = new ImageBuilder(0, 0, false);\n        int[] samples = {255, 128, 64};\n        int x = 10;\n        int y = 5;\n        \n        PhotometricInterpreterYCbCr interpreter = new PhotometricInterpreterYCbCr(y, samples, y, y, y);\n        interpreter.interpretPixel(imageBuilder, samples, x, y);\n    }\n}"}
{"api_description": "BufferedImage convertTosRGB(BufferedImage bi): class ColorTools", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n\tpublic static void main(String[] args) {\n        BufferedImage inputImage = new BufferedImage(0, 0, BufferedImage.TYPE_3BYTE_BGR);\n        ColorTools colorTools = new ColorTools();\n        BufferedImage sRGBImage = colorTools.convertTosRGB(inputImage);\n    }\n}"}
{"api_description": "ColorModel deriveColorModel(BufferedImage bi, ColorSpace cs): class ColorTools", "api_example": "import java.awt.color.ColorSpace;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n        ColorTools tools = new ColorTools();\n        ColorModel colorModel = tools.deriveColorModel(image, colorSpace);\n    }\n}"}
{"api_description": "static BufferedImage Imaging.getBufferedImage (InputStream is, String fileName): class Imaging\tReads the first image from an InputStream.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        InputStream inputStream;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(new File(\"file-path\"));\n\t        String fileName = \"example.jpg\";\n\t        BufferedImage image = Imaging.getBufferedImage(inputStream, fileName);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "float getMeanFound(): class PhotometricInterpreterFloat\tGet the mean of the values found while processing", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        PhotometricInterpreterFloat interpreter = new PhotometricInterpreterFloat(0, 0);\n        float mean = interpreter.getMeanFound();\n        System.out.println(\"Mean found: \" + mean);\n    }\n}"}
{"api_description": "float getMinFound(): class PhotometricInterpreterFloat\tGets the minimum value found while rendering the image", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        PhotometricInterpreterFloat interpreter = new PhotometricInterpreterFloat(0, 0);\n        float min = interpreter.getMinFound();\n        System.out.println(\"Min found: \" + min);\n    }\n}"}
{"api_description": "List<BufferedImage> getAllBufferedImages(byte[] bytes): class ImageParser\tGets all images specified by the byte array (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        ImageParser<JpegImagingParameters> parser = new JpegImageParser();\n        byte[] imageBytes = { /* byte array data */ };\n        try {\n\t\t\tList<BufferedImage> images = parser.getAllBufferedImages(imageBytes);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "int getDelay(): class GifImageMetadataItem", "api_example": "import org.apache.commons.imaging.formats.gif.GifImageMetadataItem;\n\npublic class ImageAPIExample {\n    public void processGifMetadata(GifImageMetadataItem metadataItem) {\n        int delay = metadataItem.getDelay();\n        System.out.println(\"Delay: \" + delay);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (File file): class Imaging\tGets all images specified by the file (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        File file = new File(\"path_to_file\");\n        try {\n\t\t\tList<BufferedImage> images = Imaging.getAllBufferedImages(file);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static FormatCompliance Imaging.getFormatCompliance (File file): class Imaging\tAttempts to determine the image format of the specified data and evaluates its format compliance.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.FormatCompliance;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        File imageFile = new File(\"example.jpg\");\n        FormatCompliance compliance;\n\t\ttry {\n\t\t\tcompliance = Imaging.getFormatCompliance(imageFile);\n\t        System.out.println(\"Image format compliance: \" + compliance);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static void Imaging.writeImage (BufferedImage src, OutputStream os, ImageFormats format): class Imaging\tWrites the content of a BufferedImage to an OutputStream using the specified image format.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.ImageFormats;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n\n    public static void main(String[] args) {\n        try {\n        \tBufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB);\n            OutputStream outputStream = new FileOutputStream(new File(\"path\"));\n            ImageFormats format = ImageFormats.PNG;\n\t\t\tImaging.writeImage(image, outputStream, format);\n\t\t} catch (ImageWriteException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void dump(BufferedImage src): class ImageDump", "api_example": "import java.awt.image.BufferedImage;\n\npublic class ImageDump {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ImageDump imageDump = new ImageDump();\n        imageDump.dump(image);\n    }\n\n    public void dump(BufferedImage src) {\n        // implementation\n    }\n}"}
{"api_description": "PDColor getInteriorColor(): class PDAnnotationPolygon\tThis will retrieve the interior color.", "api_example": "import org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDPageContentStream;\nimport org.apache.pdfbox.pdmodel.common.PDRectangle;\nimport org.apache.pdfbox.pdmodel.graphics.color.PDColor;\nimport org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationPolygon;\n\npublic class PDAnnotationExample {\n    public static void main(String[] args) {\n        PDPage page = new PDPage(PDRectangle.A4);\n        PDAnnotationPolygon annotation = new PDAnnotationPolygon();\n\n        // Set up annotation properties\n        // ...\n\n        PDColor interiorColor = annotation.getInteriorColor();\n        System.out.println(\"Interior Color: \" + interiorColor.toString());\n    }\n}"}
{"api_description": "ImageMetadata getMetadata(File file, T params): class ImageParser\tGet image metadata from the specified file.", "api_example": "import java.io.File;\n\npublic class ImageParser {\n    public static void main(String[] args) {\n        File file = new File(\"image.jpg\");\n        // Create params object or set it to null\n        Object params = null;\n\n        ImageMetadata metadata = getMetadata(file, params);\n    }\n\n    public static ImageMetadata getMetadata(File file, Object params) {\n        // Implementation to get image metadata\n        return new ImageMetadata();\n    }\n}\n\nclass ImageMetadata {\n    // Your ImageMetadata class implementation\n}"}
{"api_description": "ImageMetadata getMetadata(File file): class ImageParser\tGet image metadata from the specified file.", "api_example": "import java.io.File;\n\npublic class ImageParser {\n    public static void main(String[] args) {\n        File file = new File(\"image.jpg\");\n        ImageMetadata metadata = getMetadata(file);\n        System.out.println(metadata);\n    }\n\n    private static ImageMetadata getMetadata(File file) {\n        // implementation to get image metadata\n        return new ImageMetadata();\n    }\n\n    static class ImageMetadata {\n        // properties and methods for image metadata\n    }\n}"}
{"api_description": "BufferedImage getEXIFThumbnail(): class JpegImageMetadata\tGet the thumbnail image if available.", "api_example": "import javax.imageio.ImageIO;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class Example {\n    public static void main(String[] args) {\n        File file = new File(\"example.jpg\");\n        try {\n            BufferedImage thumbnail = null;\n            JpegImageMetadata metadata = (JpegImageMetadata) Imaging.getMetadata(file);\n            if (metadata != null) {\n                thumbnail = metadata.getEXIFThumbnail();\n            }\n            if (thumbnail != null) {\n                // Process the thumbnail image\n            }\n        } catch (ImageReadException | IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void setCustomMetadataValue(String fieldName, String fieldValue): class PDDocumentInformation\tSet the custom metadata value.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocumentInformation;\n\npublic class CustomMetadataExample {\n    public static void main(String[] args) {\n        PDDocumentInformation documentInformation = new PDDocumentInformation();\n        String fieldName = \"customField\";\n        String fieldValue = \"customValue\";\n\n        documentInformation.setCustomMetadataValue(fieldName, fieldValue);\n    }\n}"}
{"api_description": "void setKeywords(String keywords): class PDDocumentInformation\tThis will set the keywords of the document.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocumentInformation;\n\npublic class Document {\n    public static void main(String[] args) {\n        PDDocumentInformation documentInformation = new PDDocumentInformation();\n        String keywords = \"apple, banana, orange\";\n        documentInformation.setKeywords(keywords);\n    }\n}"}
{"api_description": "TIFF Technical Note 3 also provides example code for cases where each pixel  (or raster cell): class ImageDataReader\tin the image is associated with more than one floating-point  samples. Data in this format might be used for real-valued vector data,  complex-valued pairs, or other numerical applications). At this time, we have encountered only a limited selection of the possible  configurations for multi-variable data. The code below only supports those  configurations for which we had actual images that could be used to verify  our implementation. The implementation supports the following formats:   32-bit floating-point data Uncompressed, Deflate, or LZW compression Optional horizontal predictors used with compression PlanarConfiguration interleaved (CHUNKY) or non-interleaved (PLANAR)", "api_example": "import javax.imageio.ImageIO;\nimport javax.imageio.stream.ImageInputStream;\n\npublic class ImageDataReader {\n    private ImageInputStream input;\n    private int width;\n    private int height;\n\n    public ImageDataReader(ImageInputStream input, int width, int height) {\n        this.input = input;\n        this.width = width;\n        this.height = height;\n    }\n\n    public void readImageData() {\n        // Perform image data reading here\n    }\n\n    public static void main(String[] args) {\n        // Example API usage\n        ImageInputStream inputStream = null; // initialize with actual stream\n        int imageWidth = 100; // actual image width\n        int imageHeight = 100; // actual image height\n\n        ImageDataReader reader = new ImageDataReader(inputStream, imageWidth, imageHeight);\n        reader.readImageData();\n    }\n}"}
{"api_description": "byte[] getICCProfileBytes(byte[] bytes): class ImageParser\tGet an array of bytes describing the International Color Consortium (ICC) specification for the color space of the image contained in the input byte array.", "api_example": "import java.util.Arrays;\n\npublic class ImageParser {\n\n    public byte[] getICCProfileBytes(byte[] bytes) {\n        // Implementation here\n        return null;\n    }\n\n    public static void main(String[] args) {\n        ImageParser parser = new ImageParser();\n        byte[] inputBytes = { /* initialize input bytes */ };\n        byte[] iccProfile = parser.getICCProfileBytes(inputBytes);\n        System.out.println(Arrays.toString(iccProfile));\n    }\n}"}
{"api_description": "int getHeight(): class PDImageXObject\tReturns height of this image, or -1 if one has not been set.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n\npublic class ImageProcessor {\n    private PDImageXObject image;\n\n    public ImageProcessor(PDImageXObject image) {\n        this.image = image;\n    }\n\n    public int getImageHeight() {\n        return image.getHeight();\n    }\n}"}
{"api_description": "float[] getRectDifferences(): class PDAnnotationFreeText\tThis will get the margin between the annotations \"outer\" rectangle defined by /Rect and the border.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationFreeText;\n\npublic class AnnotationExample {\n    public static void main(String[] args) {\n        PDAnnotationFreeText annotation = new PDAnnotationFreeText();\n        float[] rectDifferences = annotation.getRectDifferences();\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(PDDocument document, File file): class CCITTFactory\tCreates a new CCITT Fax compressed image XObject from the first image of a TIFF file.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.File;\nimport org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        File file = new File(\"example.tiff\");\n        try {\n            PDImageXObject image = CCITTFactory.createFromFile(document, file);\n            // Further operations on the image object\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossless(InputStream src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\n\nimport java.io.*;\n\npublic class ExifMetadataUpdater {\n    public static void main(String[] args) {\n        try {\n            File inputFile = new File(\"input.jpg\");\n            File outputFile = new File(\"output.jpg\");\n\n            InputStream inputStream = new FileInputStream(inputFile);\n            OutputStream outputStream = new FileOutputStream(outputFile);\n\n            TiffOutputSet outputSet = new TiffOutputSet();\n\n            ExifRewriter rewriter = new ExifRewriter();\n            rewriter.updateExifMetadataLossless(inputStream, outputStream, outputSet);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(String imagePath, PDDocument doc): class PDImageXObject\tCreate a PDImageXObject from an image file, see createFromFileByExtension(File, PDDocument) for more details.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.IOException;\n\npublic class ImageProcessor {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        String imagePath = \"example.jpg\";\n        \n        try {\n            PDImageXObject imageXObject = PDImageXObject.createFromFile(imagePath, document);\n            // Use the imageXObject for further processing\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        \n        // Close the document\n        try {\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void save(OutputStream output): class PDDocument\tThis will save the document to an output stream.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.OutputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class SaveDocumentExample {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        try {\n            // Add content to the document\n\n            // Save the document to an output stream\n            OutputStream output = new FileOutputStream(\"output.pdf\");\n            document.save(output);\n            output.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                document.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"}
{"api_description": "List<BufferedImage> getAllBufferedImages(File file): class ImageParser\tGets all images specified by indicated file (some formats may include multiple images within a single data source).", "api_example": "import java.io.File;\nimport java.awt.image.BufferedImage;\nimport java.util.List;\n\npublic class ImageParser {\n    public static void main(String[] args) {\n        File file = new File(\"images.jpg\");\n        List<BufferedImage> images = getAllBufferedImages(file);\n        for (BufferedImage image : images) {\n            // Process each image\n        }\n    }\n\n    public static List<BufferedImage> getAllBufferedImages(File file) {\n        // Implementation to retrieve all images from the file\n        return null;\n    }\n}"}
