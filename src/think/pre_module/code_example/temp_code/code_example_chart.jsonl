{"api_description": "void setToolTipText(String text): class TextTitle\tSets the tool tip text to the specified text and sends a TitleChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.title.TextTitle;\n\npublic class TextTitleExample {\n    public static void main(String[] args) {\n        TextTitle title = new TextTitle();\n        String tooltipText = \"This is a tooltip\";\n        \n        title.setToolTipText(tooltipText);\n    }\n}"}
{"api_description": "void setText(String text): class TextAnnotation\tSets the text for the annotation and sends an AnnotationChangeEvent to all registered listeners.", "api_example": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class AnnotationExample {\n    public static void main(String[] args) {\n        TextAnnotation annotation = new TextAnnotation();\n        String text = \"This is a sample annotation\";\n        annotation.setText(text);\n    }\n\n    static class TextAnnotation {\n        void setText(String text) {\n            // Implementation\n        }\n    }\n}"}
{"api_description": "void valueUnbound(javax.servlet.http.HttpSessionBindingEvent event): class ChartDeleter\tWhen this object is unbound from the session (including upon session expiry) the files that have been added to the ArrayList are iterated and deleted.", "api_example": "import javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpSessionBindingListener;\nimport java.util.ArrayList;\nimport java.io.File;\n\npublic class ChartDeleter implements HttpSessionBindingListener {\n    private ArrayList<File> files = new ArrayList<>();\n\n    public void valueUnbound(HttpSessionBindingEvent event) {\n        if (files != null) {\n            for (File file : files) {\n                file.delete();\n            }\n        }\n    }\n}"}
{"api_description": "void setTickUnit(NumberTickUnit unit, boolean notify, boolean turnOffAutoSelect): class LogAxis\tSets the tick unit for the axis and, if requested, sends an AxisChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.axis.LogAxis;\nimport org.jfree.chart.axis.NumberTickUnit;\n\npublic class AxisExample {\n    public static void main(String[] args) {\n        LogAxis logAxis = new LogAxis(\"Axis Label\");\n        NumberTickUnit tickUnit = new NumberTickUnit(0.5);\n        boolean notify = true;\n        boolean turnOffAutoSelect = false;\n        \n        logAxis.setTickUnit(tickUnit, notify, turnOffAutoSelect);\n    }\n}"}
{"api_description": "protected void setAutoTickUnitSelectionCheckBox(JCheckBox autoTickUnitSelectionCheckBox): class DefaultLogAxisEditor\tSet the checkbox that enables/disables auto-tickunit-selection.", "api_example": "import javax.swing.JCheckBox;\n\npublic class DefaultLogAxisEditor {\n    private JCheckBox autoTickUnitSelectionCheckBox;\n\n    protected void setAutoTickUnitSelectionCheckBox(JCheckBox autoTickUnitSelectionCheckBox) {\n        this.autoTickUnitSelectionCheckBox = autoTickUnitSelectionCheckBox;\n    }\n}"}
{"api_description": "void setTickUnit(DateTickUnit unit, boolean notify, boolean turnOffAutoSelection): class DateAxis\tSets the tick unit attribute and, if requested, sends an AxisChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.axis.DateTickUnit;\n\npublic class DateAxisExample {\n    public static void main(String[] args) {\n        DateAxis dateAxis = new DateAxis();\n        DateTickUnit unit = new DateTickUnit(DateTickUnit.DAY, 1);\n        boolean notify = true;\n        boolean turnOffAutoSelection = false;\n\n        dateAxis.setTickUnit(unit, notify, turnOffAutoSelection);\n    }\n}"}
{"api_description": "void setTickUnit(NumberTickUnit unit): class LogAxis\tSets the tick unit for the axis and sends an AxisChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.axis.LogAxis;\nimport org.jfree.chart.axis.NumberTickUnit;\n\npublic class LogAxisExample {\n    public static void main(String[] args) {\n        LogAxis logAxis = new LogAxis();\n        NumberTickUnit unit = new NumberTickUnit(0.1);\n        \n        logAxis.setTickUnit(unit);\n    }\n}"}
{"api_description": "void autoAdjustRange(): class LogarithmicAxis\tRescales the axis to ensure that all data is visible.", "api_example": "import org.jfree.chart.axis.LogarithmicAxis;\n\npublic class LogarithmicAxisExample {\n    public static void main(String[] args) {\n        LogarithmicAxis axis = new LogarithmicAxis(\"Value\");\n        //... other axis configuration\n        axis.autoAdjustRange();\n    }\n}"}
{"api_description": "void setDisplayRange(int range, double low, double high): class ThermometerPlot\tSets the displayed bounds for a sub range.", "api_example": "import org.jfree.chart.plot.ThermometerPlot;\n\npublic class ThermometerPlotExample {\n    public static void main(String[] args) {\n        ThermometerPlot plot = new ThermometerPlot();\n        int range = 100;\n        double low = 0.0;\n        double high = 80.0;\n        plot.setDisplayRange(range, low, high);\n    }\n}"}
{"api_description": "static boolean equal(Object o1, Object o2): class ObjectUtils\tDeprecated. Use Objects.equals() from the JDK.", "api_example": "import java.util.Objects;\n\npublic class Main {\n    public static void main(String[] args) {\n        Object object1 = new Object();\n        Object object2 = new Object();\n        \n        boolean result = Objects.equals(object1, object2);\n        System.out.println(\"Objects are equal: \" + result);\n    }\n}"}
{"api_description": "static int hashCode(Object object): class ObjectUtils\tReturns a hash code for an object, or zero if the object is null.", "api_example": "import org.apache.commons.lang3.ObjectUtils;\n\npublic class Main {\n    public static void main(String[] args) {\n        Object obj = new Object();\n        int hashCode = ObjectUtils.hashCode(obj);\n        System.out.println(\"Hash Code: \" + hashCode);\n    }\n}"}
{"api_description": "boolean equals(Object obj): class PlotOrientation\tReturns true if this object is equal to the specified object, and false otherwise.", "api_example": "import org.jfree.chart.plot.PlotOrientation;\n\npublic class Example {\n    public static void main(String[] args) {\n        PlotOrientation orientation1 = PlotOrientation.HORIZONTAL;\n        PlotOrientation orientation2 = PlotOrientation.VERTICAL;\n        \n        boolean isEqual = orientation1.equals(orientation2);\n        System.out.println(\"Are the orientations equal? \" + isEqual);\n    }\n}"}
{"api_description": "int hashCode(): class PlotOrientation\tReturns a hash code for this instance.", "api_example": "import org.jfree.chart.plot.PlotOrientation;\n\npublic class PlotExample {\n    public static void main(String[] args) {\n        PlotOrientation plotOrientation = PlotOrientation.HORIZONTAL;\n        \n        int hash = plotOrientation.hashCode();\n        System.out.println(\"Hash code for the plot orientation: \" + hash);\n    }\n}"}
{"api_description": "void setDatasetRenderingOrder(DatasetRenderingOrder order): class CategoryPlot\tSets the rendering order and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.DatasetRenderingOrder;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryPlot plot = new CategoryPlot();\n        DatasetRenderingOrder order = DatasetRenderingOrder.FORWARD;\n        \n        plot.setDatasetRenderingOrder(order);\n    }\n}"}
{"api_description": "void setSeriesRenderingOrder(SeriesRenderingOrder order): class XYPlot\tSets the series order and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.plot.SeriesRenderingOrder;\n\npublic class XYPlotExample {\n    public static void main(String[] args) {\n        XYPlot plot = new XYPlot();\n        \n        SeriesRenderingOrder order = SeriesRenderingOrder.REVERSE;\n        \n        plot.setSeriesRenderingOrder(order);\n    }\n}"}
{"api_description": "void removeSeries(TimeSeries series): class TimeSeriesCollection\tRemoves the specified series from the collection and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\n\npublic class TimeSeriesCollectionExample {\n    public static void main(String[] args) {\n        TimeSeries series1 = new TimeSeries(\"Series 1\");\n        TimeSeries series2 = new TimeSeries(\"Series 2\");\n\n        // Add data to the series...\n\n        TimeSeriesCollection collection = new TimeSeriesCollection();\n        collection.addSeries(series1);\n        collection.addSeries(series2);\n\n        // ...\n\n        collection.removeSeries(series2);\n    }\n}"}
{"api_description": "void removeSeries(XIntervalSeries series): class XIntervalSeriesCollection\tRemoves a series from the collection and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.xy.XIntervalSeries;\nimport org.jfree.data.xy.XIntervalSeriesCollection;\n\npublic class Example {\n    public static void main(String[] args) {\n        XIntervalSeriesCollection collection = new XIntervalSeriesCollection();\n        XIntervalSeries series = new XIntervalSeries(\"dataSeries\");\n        collection.addSeries(series);\n        //... other operations\n\n        collection.removeSeries(series);\n    }\n}"}
{"api_description": "void removeSeries(XYIntervalSeries series): class XYIntervalSeriesCollection\tRemoves a series from the collection and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.xy.XYIntervalSeries;\nimport org.jfree.data.xy.XYIntervalSeriesCollection;\nimport org.jfree.data.general.DatasetChangeEvent;\n\npublic class Example {\n    public static void main(String[] args) {\n        XYIntervalSeriesCollection collection = new XYIntervalSeriesCollection();\n        \n        XYIntervalSeries series1 = new XYIntervalSeries(\"Series 1\");\n        // Add data to series1\n        \n        collection.addSeries(series1);\n        \n        // Remove series1 from the collection\n        collection.removeSeries(series1);\n    }\n}"}
{"api_description": "void removeSeries(XYSeries series): class XYSeriesCollection\tRemoves a series from the collection and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.xy.XYSeries;\nimport org.jfree.data.xy.XYSeriesCollection;\n\npublic class Example {\n    public static void main(String[] args) {\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(1, 1);\n        series1.add(2, 2);\n        series1.add(3, 3);\n\n        XYSeries series2 = new XYSeries(\"Series 2\");\n        series2.add(1, 2);\n        series2.add(2, 3);\n        series2.add(3, 4);\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series1);\n        dataset.addSeries(series2);\n\n        dataset.removeSeries(series1);\n    }\n}"}
{"api_description": "protected void notifyListeners(OverlayChangeEvent event): class AbstractOverlay\tSends a ChartChangeEvent to all registered listeners.", "api_example": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class OverlayExample {\n    private List<OverlayChangeListener> listeners = new ArrayList<>();\n    private AbstractOverlay overlay;\n\n    public void addListener(OverlayChangeListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeListener(OverlayChangeListener listener) {\n        listeners.remove(listener);\n    }\n\n    protected void notifyListeners(OverlayChangeEvent event) {\n        for (OverlayChangeListener listener : listeners) {\n            listener.overlayChanged(event);\n        }\n    }\n}\n\ninterface OverlayChangeListener {\n    void overlayChanged(OverlayChangeEvent event);\n}\n\nclass OverlayChangeEvent {\n    //define event properties\n}\n\nclass AbstractOverlay {\n    //define overlay properties and behavior\n}"}
{"api_description": "[Method Summary] void plotChanged(PlotChangeEvent event): class PlotChangeListener\tReceives notification of a plot change event.", "api_example": "import org.jfree.chart.event.PlotChangeEvent;\nimport org.jfree.chart.event.PlotChangeListener;\n\npublic class Example implements PlotChangeListener {\n\n    public void plotChanged(PlotChangeEvent event) {\n        // Add your implementation here\n    }\n}"}
{"api_description": "void notifyListeners(PlotChangeEvent event): class Plot\tNotifies all registered listeners that the plot has been modified.", "api_example": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Plot {\n    private List<PlotChangeListener> listeners;\n\n    public Plot() {\n        this.listeners = new ArrayList<>();\n    }\n\n    public void addListener(PlotChangeListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeListener(PlotChangeListener listener) {\n        listeners.remove(listener);\n    }\n\n    public void notifyListeners(PlotChangeEvent event) {\n        for (PlotChangeListener listener : listeners) {\n            listener.plotChanged(event);\n        }\n    }\n}\n\ninterface PlotChangeListener {\n    void plotChanged(PlotChangeEvent event);\n}\n\nclass PlotChangeEvent {\n    // event details\n}\n\nclass Example {\n    public static void main(String[] args) {\n        Plot plot = new Plot();\n        PlotChangeListener listener1 = new ExamplePlotListener();\n        PlotChangeListener listener2 = new AnotherExamplePlotListener();\n\n        plot.addListener(listener1);\n        plot.addListener(listener2);\n\n        // Modify the plot\n        PlotChangeEvent event = new PlotChangeEvent();\n        plot.notifyListeners(event);\n    }\n}\n\nclass ExamplePlotListener implements PlotChangeListener {\n    @Override\n    public void plotChanged(PlotChangeEvent event) {\n        // Implementation of listener action when plot changes\n    }\n}\n\nclass AnotherExamplePlotListener implements PlotChangeListener {\n    @Override\n    public void plotChanged(PlotChangeEvent event) {\n        // Implementation of listener action when plot changes\n    }\n}"}
{"api_description": "void setItemMargin(double margin): class LineAndShapeRenderer\tSets the item margin, which is the gap between items within a category (expressed as a percentage of the overall category width), and sends a RendererChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.renderer.category.LineAndShapeRenderer;\n\npublic class ChartExample {\n    public static void main(String[] args) {\n        LineAndShapeRenderer renderer = new LineAndShapeRenderer();\n        double margin = 0.1;\n        renderer.setItemMargin(margin);\n    }\n}"}
{"api_description": "void setLabelLinkMargin(double margin): class PiePlot\tSets the link margin and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.PiePlot;\n\npublic class PieChartExample {\n    public static void main(String[] args) {\n        double margin = 0.1;\n        PiePlot plot = new PiePlot();\n        plot.setLabelLinkMargin(margin);\n    }\n}"}
{"api_description": "void setLowerMargin(double margin): class CategoryAxis\tSets the lower margin for the axis and sends an AxisChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.axis.CategoryAxis;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryAxis categoryAxis = new CategoryAxis();\n        double margin = 0.5;\n        categoryAxis.setLowerMargin(margin);\n    }\n}"}
{"api_description": "void setItemMargin(double margin): class BoxAndWhiskerRenderer\tSets the item margin and sends a RendererChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;\n\npublic class Example {\n    public static void main(String[] args) {\n        BoxAndWhiskerRenderer renderer = new BoxAndWhiskerRenderer();\n        double margin = 0.1;\n        renderer.setItemMargin(margin);\n    }\n}"}
{"api_description": "void setCategoryMargin(double margin): class CategoryAxis\tSets the category margin and sends an AxisChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.axis.CategoryAxis;\n\npublic class CategoryAxisExample {\n\n    public static void main(String[] args) {\n        CategoryAxis axis = new CategoryAxis();\n        double margin = 0.2;\n        axis.setCategoryMargin(margin);\n    }\n}"}
{"api_description": "void setTickLabelFormat(NumberFormat format): class MeterPlot\tSets the format for the tick labels and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.MeterPlot;\nimport java.text.NumberFormat;\n\npublic class MeterPlotExample {\n\n    public static void main(String[] args) {\n        MeterPlot meterPlot = new MeterPlot();\n        \n        NumberFormat format = NumberFormat.getInstance();\n        format.setMaximumFractionDigits(2);\n        meterPlot.setTickLabelFormat(format);\n    }\n}"}
{"api_description": "void setType(HistogramType type): class HistogramDataset\tSets the histogram type and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.statistics.HistogramDataset;\nimport org.jfree.data.statistics.HistogramType;\n\npublic class Example {\n    public static void main(String[] args) {\n        HistogramDataset dataset = new HistogramDataset();\n        HistogramType type = HistogramType.FREQUENCY;\n        \n        dataset.setType(type);\n    }\n}"}
{"api_description": "void removeCornerTextItem(String text): class PolarPlot\tRemove the given text from the list of corner text items and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.PolarPlot;\n\npublic class PolarPlotExample {\n    public static void main(String[] args) {\n        PolarPlot plot = new PolarPlot();\n        String textToRemove = \"SampleText\";\n        \n        plot.removeCornerTextItem(textToRemove);\n    }\n}"}
{"api_description": "void addCornerTextItem(String text): class PolarPlot\tAdd text to be displayed in the lower right hand corner and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.PolarPlot;\n\npublic class PolarPlotExample {\n    public static void main(String[] args) {\n        PolarPlot plot = new PolarPlot();\n        String text = \"Sample Text\";\n        plot.addCornerTextItem(text);\n    }\n}"}
{"api_description": "void clearCornerTextItems(): class PolarPlot\tClear the list of corner text items and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.PolarPlot;\n\npublic class PolarPlotExample {\n    public static void main(String[] args) {\n        PolarPlot plot = new PolarPlot();\n        \n        // ... other code to set up the plot\n        \n        // Clear the list of corner text items\n        plot.clearCornerTextItems();\n    }\n}"}
{"api_description": "void setCenterText(String text): class RingPlot\tSets the text to display in the center of the plot and sends a change event to all registered listeners.", "api_example": "import org.jfree.chart.plot.RingPlot;\n\npublic class Example {\n    public static void main(String[] args) {\n        RingPlot ringPlot = new RingPlot();\n        \n        String text = \"Sample Text\";\n        ringPlot.setCenterText(text);\n    }\n}"}
{"api_description": "static CategoryLabelPositions replaceLeftPosition(CategoryLabelPositions base, CategoryLabelPosition left): class CategoryLabelPositions\tReturns a new instance based on an existing instance but with the left position changed.", "api_example": "import org.jfree.chart.axis.CategoryLabelPositions;\nimport org.jfree.chart.axis.CategoryLabelPosition;\n\npublic class CategoryLabelPositionsExample {\n\n    public static void main(String[] args) {\n        CategoryLabelPosition leftPosition = new CategoryLabelPosition();\n        CategoryLabelPositions base = new CategoryLabelPositions();\n        \n        CategoryLabelPositions updatedPositions = CategoryLabelPositions.replaceLeftPosition(base, leftPosition);\n    }\n}"}
{"api_description": "static CategoryLabelPositions replaceBottomPosition(CategoryLabelPositions base, CategoryLabelPosition bottom): class CategoryLabelPositions\tReturns a new instance based on an existing instance but with the bottom position changed.", "api_example": "import org.jfree.chart.axis.CategoryLabelPositions;\nimport org.jfree.chart.axis.CategoryLabelPosition;\n\npublic class Main {\n    public static void main(String[] args) {\n        CategoryLabelPositions base = new CategoryLabelPositions();\n        CategoryLabelPosition bottom = new CategoryLabelPosition();\n        \n        CategoryLabelPositions replaced = CategoryLabelPositions.replaceBottomPosition(base, bottom);\n    }\n}"}
{"api_description": "boolean getTickLabelsVisible(): class StandardDialScale\tReturns true if the tick labels should be displayed, and false otherwise.", "api_example": "import org.jfree.chart.plot.dial.StandardDialScale;\n\npublic class Example {\n    public static void main(String[] args) {\n        StandardDialScale dialScale = new StandardDialScale();\n        boolean tickLabelsVisible = dialScale.getTickLabelsVisible();\n        System.out.println(\"Tick labels visible: \" + tickLabelsVisible);\n    }\n}"}
{"api_description": "void setSimpleLabels(boolean simple): class PiePlot\tSets the flag that controls whether simple or extended labels are displayed on the plot, and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.PiePlot;\n\npublic class PieChartExample {\n    public static void main(String[] args) {\n        PiePlot plot = new PiePlot();\n        boolean simpleLabels = true;\n        plot.setSimpleLabels(simpleLabels);\n    }\n}"}
{"api_description": "void setTickLabelsVisible(boolean visible): class MeterPlot\tSets the flag that controls whether or not the tick labels are visible and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.chart.plot.MeterPlot;\n\npublic class MeterPlotExample {\n    public static void main(String[] args) {\n        MeterPlot plot = new MeterPlot();\n        boolean visible = true;\n        \n        plot.setTickLabelsVisible(visible);\n    }\n}"}
{"api_description": "boolean getShapesVisible(): class XYDifferenceRenderer\tReturns a flag that controls whether or not shapes are drawn for each data value.", "api_example": "import org.jfree.chart.renderer.xy.XYDifferenceRenderer;\n\npublic class Example {\n    public static void main(String[] args) {\n        XYDifferenceRenderer renderer = new XYDifferenceRenderer();\n\n        boolean shapesVisible = renderer.getShapesVisible();\n        System.out.println(\"Shapes visible: \" + shapesVisible);\n    }\n}"}
{"api_description": "Range getDataRange(ValueAxis axis): class CombinedDomainCategoryPlot\tReturns a range representing the extent of the data values in this plot (obtained from the subplots) that will be rendered against the specified axis.", "api_example": "import org.jfree.chart.plot.CombinedDomainCategoryPlot;\nimport org.jfree.chart.axis.ValueAxis;\nimport org.jfree.data.Range;\n\npublic class Example {\n    public static void main(String[] args) {\n        CombinedDomainCategoryPlot plot = new CombinedDomainCategoryPlot();\n        ValueAxis axis = null; // initialize as needed\n        Range dataRange = plot.getDataRange(axis);\n        System.out.println(\"Data Range: \" + dataRange);\n    }\n}"}
{"api_description": "Date getMaximumDate(): class DateAxis\tReturns the latest date visible on the axis.", "api_example": "import org.jfree.chart.axis.DateAxis;\nimport java.util.Date;\n\npublic class DateAxisExample {\n    public static void main(String[] args) {\n        DateAxis dateAxis = new DateAxis();\n        Date maximumDate = dateAxis.getMaximumDate();\n        System.out.println(\"Latest date visible on the axis: \" + maximumDate);\n    }\n}"}
{"api_description": "Date getMinimumDate(): class DateAxis\tReturns the earliest date visible on the axis.", "api_example": "import org.jfree.chart.axis.DateAxis;\nimport java.util.Date;\n\npublic class DateAxisExample {\n    public static void main(String[] args) {\n        DateAxis dateAxis = new DateAxis();\n        Date minimumDate = dateAxis.getMinimumDate();\n\n        System.out.println(\"Earliest date visible on the axis: \" + minimumDate);\n    }\n}"}
{"api_description": "ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, TextAnchor textAnchor): class ItemLabelPosition\tCreates a new position record (with zero rotation).", "api_example": "import org.jfree.ui.TextAnchor;\nimport org.jfree.chart.plot.PiePlot;\nimport org.jfree.chart.labels.ItemLabelPosition;\nimport org.jfree.chart.labels.ItemLabelAnchor;\n\npublic class ItemLabelPositionExample {\n\n    public static void main(String[] args) {\n        ItemLabelAnchor itemLabelAnchor = ItemLabelAnchor.CENTER;\n        TextAnchor textAnchor = TextAnchor.CENTER;\n\n        ItemLabelPosition itemLabelPosition = new ItemLabelPosition(itemLabelAnchor, textAnchor);\n\n        // Other code using itemLabelPosition\n    }\n}"}
{"api_description": "static CategoryLabelPositions replaceTopPosition(CategoryLabelPositions base, CategoryLabelPosition top): class CategoryLabelPositions\tReturns a new instance based on an existing instance but with the top position changed.", "api_example": "import org.jfree.chart.axis.CategoryLabelPositions;\nimport org.jfree.chart.axis.CategoryLabelPosition;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryLabelPosition topPosition = new CategoryLabelPosition();\n        CategoryLabelPositions base = new CategoryLabelPositions();\n        \n        CategoryLabelPositions updatedPositions = CategoryLabelPositions.replaceTopPosition(base, topPosition);\n    }\n}"}
{"api_description": "Number getValue(int row, int column): class SlidingCategoryDataset\tReturns a value from the table.", "api_example": "import org.jfree.data.category.SlidingCategoryDataset;\n\npublic class Example {\n    public static void main(String[] args) {\n        SlidingCategoryDataset dataset = createDataset();\n        int row = 0;\n        int column = 1;\n        Number value = dataset.getValue(row, column);\n        System.out.println(\"Value at row \" + row + \" and column \" + column + \" is \" + value);\n    }\n\n    private static SlidingCategoryDataset createDataset() {\n        // Create and return a SlidingCategoryDataset\n        return new SlidingCategoryDataset(null, 0, 0);\n    }\n}"}
{"api_description": "static JFreeChart createTimeSeriesChart(String title, String timeAxisLabel, String valueAxisLabel, XYDataset dataset): class ChartFactory\tCreates and returns a time series chart.", "api_example": "import org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.data.time.TimeSeriesCollection;\n\npublic class ChartExample {\n    public static void main(String[] args) {\n        String title = \"Time Series Chart\";\n        String timeAxisLabel = \"Time\";\n        String valueAxisLabel = \"Value\";\n        TimeSeriesCollection dataset = null; // Initialize with actual dataset\n\n        JFreeChart chart = ChartFactory.createTimeSeriesChart(title, timeAxisLabel, valueAxisLabel, dataset);\n    }\n}"}
{"api_description": "static JFreeChart createLineChart(String title, String categoryAxisLabel, String valueAxisLabel, CategoryDataset dataset): class ChartFactory\tCreates a line chart with default settings.", "api_example": "import org.jfree.chart.ChartFactory;\nimport org.jfree.chart.JFreeChart;\nimport org.jfree.data.category.CategoryDataset;\n\npublic class Example {\n    public static void main(String[] args) {\n        String title = \"Sales Report\";\n        String categoryAxisLabel = \"Month\";\n        String valueAxisLabel = \"Sales\";\n        CategoryDataset dataset = null; // Initialize with actual CategoryDataset\n\n        JFreeChart lineChart = ChartFactory.createLineChart(title, categoryAxisLabel, valueAxisLabel, dataset);\n    }\n}"}
{"api_description": "TimeSeriesCollection(TimeSeries series): class TimeSeriesCollection\tConstructs a dataset containing a single series (more can be added), tied to the default timezone.", "api_example": "import org.jfree.data.time.TimeSeries;\nimport org.jfree.data.time.TimeSeriesCollection;\n\npublic class Example {\n    public static void main(String[] args) {\n        TimeSeries series = new TimeSeries(\"Example Series\");\n        TimeSeriesCollection dataset = new TimeSeriesCollection(series);\n        // Additional series can be added to the dataset if needed\n    }\n}"}
{"api_description": "Number getMeanValue(Comparable rowKey, Comparable columnKey): class DefaultStatisticalCategoryDataset\tReturns the mean value for an item.", "api_example": "import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;\nimport java.lang.Comparable;\n\npublic class Example {\n    public static void main(String[] args) {\n        DefaultStatisticalCategoryDataset dataset = new DefaultStatisticalCategoryDataset();\n        Comparable rowKey = \"Row 1\";\n        Comparable columnKey = \"Column 1\";\n        \n        Number meanValue = dataset.getMeanValue(rowKey, columnKey);\n        System.out.println(\"Mean Value: \" + meanValue);\n    }\n}"}
{"api_description": "CategoryLabelPositions(CategoryLabelPosition top, CategoryLabelPosition bottom, CategoryLabelPosition left, CategoryLabelPosition right): class CategoryLabelPositions\tCreates a new position specification.", "api_example": "import org.jfree.chart.axis.CategoryLabelPositions;\nimport org.jfree.chart.axis.CategoryLabelPosition;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryLabelPosition top = new CategoryLabelPosition();\n        CategoryLabelPosition bottom = new CategoryLabelPosition();\n        CategoryLabelPosition left = new CategoryLabelPosition();\n        CategoryLabelPosition right = new CategoryLabelPosition();\n\n        CategoryLabelPositions labelPositions = new CategoryLabelPositions(top, bottom, left, right);\n    }\n}"}
{"api_description": "void actionPerformed(ActionEvent event): class DefaultLogAxisEditor\tHandles actions from within the property panel.", "api_example": "import java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class DefaultLogAxisEditor implements ActionListener {\n\n    public void actionPerformed(ActionEvent event) {\n        // Handle the action from the property panel\n    }\n}"}
{"api_description": "void setURLText(String text): class TextTitle\tSets the URL text to the specified text and sends a TitleChangeEvent to all registered listeners.", "api_example": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class TextTitle {\n    private List<TitleChangeListener> listeners = new ArrayList<>();\n    private String urlText;\n\n    public void setURLText(String text) {\n        this.urlText = text;\n        sendTitleChangeEvent();\n    }\n\n    private void sendTitleChangeEvent() {\n        for (TitleChangeListener listener : listeners) {\n            listener.onTitleChange(this.urlText);\n        }\n    }\n\n    public void addTitleChangeListener(TitleChangeListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeTitleChangeListener(TitleChangeListener listener) {\n        listeners.remove(listener);\n    }\n\n    public interface TitleChangeListener {\n        void onTitleChange(String newTitle);\n    }\n}"}
{"api_description": "boolean equals(Object o): class RectangleEdge\tReturns true if this object is equal to the specified object, and false otherwise.", "api_example": "import org.apache.commons.math3.util.Precision;\n\npublic class RectangleEdge {\n    private double length;\n    private double width;\n\n    public RectangleEdge(double length, double width) {\n        this.length = length;\n        this.width = width;\n    }\n\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (o == null || getClass() != o.getClass()) {\n            return false;\n        }\n        RectangleEdge that = (RectangleEdge) o;\n        return Precision.equals(length, that.length) &&\n                Precision.equals(width, that.width);\n    }\n}"}
{"api_description": "void setDataset(CategoryDataset dataset): class MultiplePiePlot\tSets the dataset used by the plot and sends a PlotChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.category.CategoryDataset;\nimport org.jfree.chart.plot.MultiplePiePlot;\n\npublic class MultiplePiePlotExample {\n    public static void main(String[] args) {\n        CategoryDataset dataset = createDataset(); // create or obtain the dataset\n        MultiplePiePlot plot = new MultiplePiePlot();\n        \n        plot.setDataset(dataset);\n    }\n    \n    private static CategoryDataset createDataset() {\n        // code to create the dataset\n        return null;\n    }\n}"}
{"api_description": "void removeSeries(YIntervalSeries series): class YIntervalSeriesCollection\tRemoves a series from the collection and sends a DatasetChangeEvent to all registered listeners.", "api_example": "import org.jfree.data.xy.YIntervalSeries;\nimport org.jfree.data.xy.YIntervalSeriesCollection;\n\npublic class Example {\n    public static void main(String[] args) {\n        YIntervalSeriesCollection collection = new YIntervalSeriesCollection();\n        \n        YIntervalSeries series1 = new YIntervalSeries(\"Series 1\");\n        series1.add(1.0, 2.0, 0.5, 1.5);\n        \n        collection.addSeries(series1);\n        \n        // Remove series1 from the collection\n        collection.removeSeries(series1);\n    }\n}"}
{"api_description": "void plotChanged(PlotChangeEvent event): class CombinedDomainXYPlot\tReceives a PlotChangeEvent and responds by notifying all listeners.", "api_example": "import org.jfree.chart.plot.CombinedDomainXYPlot;\nimport org.jfree.chart.event.PlotChangeEvent;\n\npublic class Example {\n    public static void main(String[] args) {\n        CombinedDomainXYPlot plot = new CombinedDomainXYPlot();\n        PlotChangeEvent event = new PlotChangeEvent(plot);\n        plot.plotChanged(event);\n    }\n}"}
{"api_description": "void setLabelType(int type): class CompassPlot\tSets the label type (either NO_LABELS or VALUE_LABELS.", "api_example": "import org.jfree.chart.plot.CompassPlot;\n\npublic class Example {\n    public static void main(String[] args) {\n        CompassPlot plot = new CompassPlot();\n        int labelType = 1;\n        plot.setLabelType(labelType);\n    }\n}"}
{"api_description": "void setLabel(String label): class Marker\tSets the label (if null no label is displayed) and sends a MarkerChangeEvent to all registered listeners.", "api_example": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Marker {\n    private String label;\n\n    public void setLabel(String label) {\n        this.label = label;\n        // Send MarkerChangeEvent to all registered listeners\n    }\n\n    public static void main(String[] args) {\n        Marker marker = new Marker();\n        marker.setLabel(\"Example Label\");\n    }\n}"}
{"api_description": "PieURLGenerator getURLGenerator(): class PiePlot\tReturns the URL generator.", "api_example": "import org.jfree.chart.plot.PiePlot;\nimport org.jfree.chart.urls.PieURLGenerator;\n\npublic class Example {\n    public static void main(String[] args) {\n        PiePlot plot = new PiePlot();\n        PieURLGenerator urlGenerator = plot.getURLGenerator();\n        // API usage example: to be filled with the specific usage of the URL generator\n    }\n}"}
{"api_description": "void setSeriesToolTipGenerator(int series, XYToolTipGenerator generator): class DefaultPolarItemRenderer\tSets the tooltip generator for the specified series.", "api_example": "import org.jfree.chart.labels.XYToolTipGenerator;\nimport org.jfree.chart.renderer.DefaultPolarItemRenderer;\n\npublic class PolarItemRendererExample {\n    public static void main(String[] args) {\n        DefaultPolarItemRenderer renderer = new DefaultPolarItemRenderer();\n        \n        int series = 0;\n        XYToolTipGenerator generator = null; // Replace null with your implementation\n        \n        renderer.setSeriesToolTipGenerator(series, generator);\n    }\n}"}
{"api_description": "CategoryToPieDataset(CategoryDataset source, TableOrder extract, int index): class CategoryToPieDataset\tAn adaptor class that converts any CategoryDataset into a PieDataset, by taking the values from a single row or column.", "api_example": "import org.jfree.data.category.CategoryDataset;\nimport org.jfree.data.general.DefaultPieDataset;\nimport org.jfree.data.category.CategoryToPieDataset;\nimport org.jfree.data.general.PieDataset;\nimport org.jfree.util.TableOrder;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryDataset categoryDataset = getCategoryDataset(); // Assuming getCategoryDataset() returns a valid CategoryDataset\n        TableOrder tableOrder = TableOrder.BY_ROW; // or BY_COLUMN\n        int index = 0; // The index of the row or column to extract\n\n        CategoryToPieDataset adapter = new CategoryToPieDataset(categoryDataset, tableOrder, index);\n        PieDataset pieDataset = adapter;\n\n        // Now you can use pieDataset as a PieDataset\n    }\n\n    private static CategoryDataset getCategoryDataset() {\n        // Your implementation to retrieve a CategoryDataset\n        return null; // Placeholder, should return a valid CategoryDataset\n    }\n}"}
{"api_description": "static double calculatePieDatasetTotal(PieDataset dataset): class DatasetUtils\tCalculates the total of all the values in a PieDataset.", "api_example": "import org.jfree.data.general.PieDataset;\nimport org.jfree.data.general.DatasetUtils;\n\npublic class Example {\n    public static void main(String[] args) {\n        PieDataset dataset = createDataset();\n        double total = DatasetUtils.calculatePieDatasetTotal(dataset);\n        System.out.println(\"Total: \" + total);\n    }\n\n    private static PieDataset createDataset() {\n        // Create and return a PieDataset\n        return null;\n    }\n}"}
{"api_description": "double getMaximumBarWidth(): class BarRenderer\tReturns the maximum bar width, as a percentage of the available drawing space.", "api_example": "import org.jfree.chart.renderer.category.BarRenderer;\n\npublic class BarChartExample {\n    public static void main(String[] args) {\n        BarRenderer renderer = new BarRenderer();\n        double maximumBarWidth = renderer.getMaximumBarWidth();\n        System.out.println(\"Maximum bar width: \" + maximumBarWidth);\n    }\n}"}
{"api_description": "abstract void configure(): class Axis\tConfigures the axis to work with the current plot.", "api_example": "import org.jfree.chart.axis.Axis;\n\npublic class ChartPlot {\n    private Axis axis;\n\n    public void setAxis(Axis axis) {\n        this.axis = axis;\n    }\n\n    public void configureAxis() {\n        if (axis != null) {\n            axis.configure();\n        }\n    }\n}"}
{"api_description": "void configureRangeAxes(): class CategoryPlot\tConfigures the range axes.", "api_example": "import org.jfree.chart.plot.CategoryPlot;\n\npublic class ChartExample {\n    public void generateChart() {\n        CategoryPlot plot = new CategoryPlot();\n        // Configure the range axes\n        plot.configureRangeAxes();\n      \n        // Other plot configuration and chart generation code...\n    }\n}"}
{"api_description": "JFreeChart(String title, Font titleFont, Plot plot, boolean createLegend): class JFreeChart\tCreates a new chart with the given title and plot.", "api_example": "import org.jfree.chart.JFreeChart;\nimport org.jfree.chart.title.TextTitle;\nimport org.jfree.chart.plot.Plot;\nimport java.awt.Font;\n\npublic class ChartExample {\n    public static void main(String[] args) {\n        String title = \"Sales Report\";\n        Font titleFont = new Font(\"Arial\", Font.BOLD, 18);\n        Plot plot = null; // Your plot implementation here\n        boolean createLegend = true;\n\n        JFreeChart chart = new JFreeChart(title, titleFont, plot, createLegend);\n    }\n}"}
{"api_description": "void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source): class CategoryPlot\tMultiplies the range on the range axis/axes by the specified factor.", "api_example": "import org.jfree.chart.plot.CategoryPlot;\nimport org.jfree.chart.plot.PlotRenderingInfo;\nimport java.awt.geom.Point2D;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryPlot plot = new CategoryPlot();\n        PlotRenderingInfo state = new PlotRenderingInfo(null);\n        Point2D source = new Point2D.Double(10.0, 20.0);\n        double factor = 1.5;\n\n        plot.zoomRangeAxes(factor, state, source);\n    }\n}"}
{"api_description": "void setChart(JFreeChart chart): class ChartPanel\tSets the chart that is displayed in the panel.", "api_example": "import org.jfree.chart.ChartPanel;\nimport org.jfree.chart.JFreeChart;\n\npublic class ChartExample {\n    public static void main(String[] args) {\n        JFreeChart chart = new JFreeChart(\"Title\", JFreeChart.DEFAULT_TITLE_FONT, null, true);\n        ChartPanel chartPanel = new ChartPanel(chart);\n        \n        // Set the chart to be displayed in the panel\n        chartPanel.setChart(chart);\n    }\n}"}
{"api_description": "Timeline getTimeline(): class DateAxis\tReturns the underlying timeline used by this axis.", "api_example": "import org.jfree.chart.axis.DateAxis;\nimport org.jfree.chart.axis.Timeline;\n\npublic class TimelineExample {\n    public static void main(String[] args) {\n        DateAxis dateAxis = new DateAxis(\"Time\");\n        Timeline timeline = dateAxis.getTimeline();\n        System.out.println(\"Underlying timeline: \" + timeline);\n    }\n}"}
{"api_description": "static boolean equal(Polygon p1, Polygon p2): class ShapeUtils\tTests two polygons for equality.", "api_example": "import java.awt.Polygon;\n\npublic class ShapeUtils {\n\n    public static void main(String[] args) {\n        Polygon p1 = new Polygon(new int[]{0, 1, 2}, new int[]{0, 1, 0}, 3);\n        Polygon p2 = new Polygon(new int[]{0, 1, 2}, new int[]{0, 1, 0}, 3);\n\n        boolean polygonsAreEqual = equal(p1, p2);\n        System.out.println(\"The polygons are equal: \" + polygonsAreEqual);\n    }\n\n    static boolean equal(Polygon p1, Polygon p2) {\n        // Implementation to test if two polygons are equal\n        // ... \n        return p1.equals(p2);\n    }\n}"}
{"api_description": "static double calculateColumnTotal(Values2D data, int column, int[] validRows): class DataUtils\tReturns the total of the values in one column of the supplied data table by taking only the row numbers in the array into account.", "api_example": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.RealVector;\nimport org.apache.commons.math3.stat.correlation.PearsonsCorrelation;\nimport org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\nimport org.apache.commons.math3.stat.descriptive.SummaryStatistics;\n\npublic class DataUtils {\n    public static void main(String[] args) {\n        double[][] data = {\n            {1.0, 2.0, 3.0},\n            {4.0, 5.0, 6.0},\n            {7.0, 8.0, 9.0}\n        };\n        \n        RealMatrix matrix = new Array2DRowRealMatrix(data);\n        \n        int[] validRows = {0, 1, 2};\n        \n        double total = calculateColumnTotal(matrix, 1, validRows);\n        System.out.println(\"Total for column 1: \" + total);\n    }\n\n    public static double calculateColumnTotal(RealMatrix data, int column, int[] validRows) {\n        double total = 0.0;\n        for (int row : validRows) {\n            total += data.getEntry(row, column);\n        }\n        return total;\n    }\n}"}
{"api_description": "static CategoryLabelPositions replaceRightPosition(CategoryLabelPositions base, CategoryLabelPosition right): class CategoryLabelPositions\tReturns a new instance based on an existing instance but with the right position changed.", "api_example": "import org.jfree.chart.axis.CategoryLabelPositions;\nimport org.jfree.chart.axis.CategoryLabelPosition;\n\npublic class Example {\n    public static void main(String[] args) {\n        CategoryLabelPositions base = getCategoryLabelPositions(); // Initialize with actual values\n        CategoryLabelPosition rightPosition = getRightPosition(); // Initialize with actual values\n        CategoryLabelPositions updatedPositions = CategoryLabelPositions.replaceRightPosition(base, rightPosition);\n    }\n\n    private static CategoryLabelPositions getCategoryLabelPositions() {\n        // Implement logic to get CategoryLabelPositions\n        return null; // Replace with actual value\n    }\n\n    private static CategoryLabelPosition getRightPosition() {\n        // Implement logic to get CategoryLabelPosition\n        return null; // Replace with actual value\n    }\n}"}
{"api_description": "void actionPerformed(ActionEvent event): class DefaultPolarPlotEditor\tHandles actions from within the property panel.", "api_example": "import java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class DefaultPolarPlotEditor implements ActionListener {\n\n    public DefaultPolarPlotEditor() {\n        // constructor\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent event) {\n        // handle action from property panel\n        // implement functionality here\n    }\n}"}
{"api_description": "protected JPanel createPlotPanel(Plot plot): class DefaultPolarPlotEditor\tCreates and returns a panel for editing the settings of the specified plot.", "api_example": "import javax.swing.JPanel;\nimport org.jfree.chart.plot.Plot;\n\npublic class DefaultPolarPlotEditor {\n    protected JPanel createPlotPanel(Plot plot) {\n        // implementation code here\n        return new JPanel(); // replace with actual implementation\n    }\n}"}
{"api_description": "AxisLocation getDomainAxisLocation(): class XYPlot\tReturns the location of the primary domain axis.", "api_example": "import org.jfree.chart.plot.XYPlot;\nimport org.jfree.chart.axis.AxisLocation;\n\npublic class ExampleUsage {\n    public static void main(String[] args) {\n        XYPlot plot = new XYPlot();\n        \n        // Get the location of the primary domain axis\n        AxisLocation domainAxisLocation = plot.getDomainAxisLocation();\n        \n        // Further code to use domainAxisLocation\n        // ...\n    }\n}"}
