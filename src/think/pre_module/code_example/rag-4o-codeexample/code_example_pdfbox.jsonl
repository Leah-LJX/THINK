{"api_description": "static PDDocument Loader.loadPDF(File file): class Loader\tParses a PDF.", "api_example": "import org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"example.pdf\");\n        PDDocument document = Loader.loadPDF(file);\n        // Use the document for further processing\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(org.apache.pdfbox.io.RandomAccessRead randomAccessRead, String password): class Loader\tParses a PDF.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.io.RandomAccessRead;\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        RandomAccessRead randomAccessRead = null; // initialize with actual RandomAccessRead object\n        String password = \"myPassword\"; // initialize with actual password\n        PDDocument loadedDocument = Loader.loadPDF(randomAccessRead, password);\n        \n        // Rest of the code to work with the loaded PDF document\n    }\n}"}
{"api_description": "void addSource(File source): class PDFMergerUtility\tAdd a source file to the list of files to merge.", ",api_example": "import org.apache.pdfbox.multipdf.PDFMergerUtility;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class PDFMergerExample {\n    public static void main(String[] args) throws FileNotFoundException {\n        PDFMergerUtility pdfMerger = new PDFMergerUtility();\n        File sourceFile = new File(\"source.pdf\");\n        \n        pdfMerger.addSource(sourceFile);\n        \n        // Merge more files if needed\n        File anotherSourceFile = new File(\"another_source.pdf\");\n        pdfMerger.addSource(anotherSourceFile);\n        \n        // Perform the merge operation\n        // pdfMerger.mergeDocuments(outputFile);\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(File file, String password, org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction): class Loader\tParses a PDF.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.Loader;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PdfLoaderExample {\n    public static void main(String[] args) {\n        File file = new File(\"example.pdf\");\n        String password = \"123456\";\n\n        try {\n            PDDocument document = Loader.loadPDF(file, password, null);\n            // Other operations with the loaded document\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document): class PDFPrintable\tCreates a new PDFPrintable.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\n\npublic class PDFPrinterExample {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        // Add pages to the document\n        \n        PDFPrintable pdfPrintable = new PDFPrintable(document);\n\n        // Rest of the code to print the PDF using pdfPrintable\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument(); // initialize with actual PDDocument object\n        Scaling scaling = Scaling.SHRINK_TO_FIT; // initialize with appropriate Scaling value\n\n        PDFPrintable pdfPrintable = new PDFPrintable(document, scaling);\n        // rest of the code here\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(String imagePath, PDDocument doc): class PDImageXObject\tCreate a PDImageXObject from an image file, see createFromFileByExtension(File, PDDocument) for more details.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        try {\n            String imagePath = \"image.jpg\";\n            PDImageXObject image = PDImageXObject.createFromFile(imagePath, document);\n            // Do something with the image object\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi, boolean center): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class PDFPrinterExample {\n\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument(); // Replace with actual document\n            Scaling scaling = Scaling.SHRINK_TO_FIT; // Replace with actual scaling\n            boolean showPageBorder = false; // Replace with actual value\n            float dpi = 300; // Replace with actual DPI\n            boolean center = true; // Replace with actual value\n\n            PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi, center);\n            // Rest of the code to perform printing\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class PDFPrintingExample {\n\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument(); // initialize the PDDocument\n            Scaling scaling = Scaling.SHRINK_TO_FIT; // initialize the Scaling\n            boolean showPageBorder = true; // initialize the boolean for showing page borders\n            float dpi = 300; // initialize the dpi\n\n            PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi);\n            \n            // Other code to perform printing or other operations\n        } catch (Exception e) {\n            \n        }\n    }\n}"}
{"api_description": "void saveIncremental(OutputStream output): class PDDocument\tSave the PDF as an incremental update.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.OutputStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        OutputStream output = getOutputStream(); // Get the output stream from somewhere\n        \n        try {\n            document.saveIncremental(output);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static OutputStream getOutputStream() {\n        // Implementation to get the output stream\n        return null;\n    }\n}"}
{"api_description": "// load the recipient's certificate  InputStream inStream = new FileInputStream(certificate_path): class PublicKeyProtectionPolicy\t;  CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");  X509Certificate certificate = (X509Certificate)cf.generateCertificate(inStream);  inStream.close();", "api_example": "import java.io.*;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\npublic class CertificateLoader {\n\n    public void loadCertificate(String certificatePath) throws CertificateException, IOException {\n        // load the recipient's certificate\n        InputStream inStream = new FileInputStream(certificatePath);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        X509Certificate certificate = (X509Certificate) cf.generateCertificate(inStream);\n        inStream.close();\n    }\n}"}
{"api_description": "void save(String fileName): class FDFDocument\tThis will save this document to the filesystem.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\n\npublic class DocumentHandler {\n    public static void main(String[] args) throws IOException {\n        FDFDocument document = new FDFDocument();\n        String fileName = \"example.pdf\";\n        document.save(fileName);\n        document.close();\n    }\n}"}
{"api_description": "static FDFDocument Loader.loadFDF(String filename): class Loader\tThis will load a document from a file.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\nimport org.apache.pdfbox.Loader;\n\npublic class DocumentLoader {\n    public static void main(String[] args) throws IOException {\n        String filename = \"example.fdf\";\n        FDFDocument document = Loader.loadFDF(filename);\n        document.close();\n    }\n}"}
{"api_description": "ExternalSigningSupport saveIncrementalForExternalSigning(OutputStream output): class PDDocument\tSave PDF incrementally without closing for external signature creation scenario.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.interactive.digitalsignature.ExternalSigningSupport;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class ExternalSigningExample {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        \n        // Add content to the document\n        \n        try {\n            OutputStream outputStream = new FileOutputStream(\"output.pdf\");\n            ExternalSigningSupport externalSigningSupport = document.saveIncrementalForExternalSigning(outputStream);\n            // Perform external signature creation using externalSigningSupport if needed\n            outputStream.close();\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "COSDocument getDocument(): class FDFDocument\tThis will get the low level document.", "api_example": "import org.apache.pdfbox.cos.COSDocument;\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\n\npublic class FDFDocumentExample {\n    public static void main(String[] args) {\n    \ttry {\n\t        FDFDocument fdfDocument = new FDFDocument();\n\t        COSDocument cosDocument = fdfDocument.getDocument();\n\t\t\tfdfDocument.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void drawImage(PDImageXObject image, Matrix matrix): class PDFormContentStream\tDraw an image at the origin with the given transformation matrix.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDFormContentStream;\nimport org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class ImageDrawer {\n    public static void main(String[] args) throws IOException {\n    \tPDDocument document = new PDDocument();\n        PDImageXObject image = new PDImageXObject(document); // initialize with a PDImageXObject from somewhere\n        Matrix matrix = new Matrix(0, 0, 0, 0, 0, 0); // initialize with a Matrix from somewhere\n        PDFormContentStream contentStream = new PDFormContentStream(new PDFormXObject(document)); // initialize with a PDFormContentStream from somewhere\n\n        contentStream.drawImage(image, matrix);\n        contentStream.close();\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(PDDocument document, File file): class CCITTFactory\tCreates a new CCITT Fax compressed image XObject from the first image of a TIFF file.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.File;\n\npublic class ImageExample {\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument();\n            File file = new File(\"path_to_tiff_file.tif\");\n            PDImageXObject image = CCITTFactory.createFromFile(document, file);\n            // Further operations with the image object\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "static PDImageXObject JPEGFactory.createFromImage(PDDocument document, BufferedImage image, float quality): class JPEGFactory\tCreates a new JPEG PDImageXObject from a BufferedImage and a given quality.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\npublic class ImageExample {\n    public static void main(String[] args) throws IOException {\n        PDDocument document = new PDDocument();\n        BufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_ARGB);\n        float quality = 0.8f;\n\n        PDImageXObject jpegImage = JPEGFactory.createFromImage(document, image, quality);\n        // Further processing or saving the resulting image\n    }\n}"}
{"api_description": "boolean canExtractForAccessibility(): class AccessPermission\tThis will tell if the user can extract text and images from the PDF document for accessibility purposes.", "api_example": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;\n\npublic class PdfAccessibilityExtractor {\n    public static void main(String[] args) {\n        AccessPermission permission = new AccessPermission();\n        boolean canExtract = permission.canExtractForAccessibility();\n        System.out.println(\"User can extract for accessibility: \" + canExtract);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(byte[] ownerPassword, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class PDFHandler {\n    public static void main(String[] args) throws IOException {\n        byte[] ownerPassword = \"owner123\".getBytes();\n        byte[] user = \"user123\".getBytes();\n        byte[] owner = \"owner\".getBytes();\n        byte[] id = \"1234567890\".getBytes();\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(ownerPassword, user, owner, 7, id, encRevision, keyLengthInBytes, encryptMetadata);\n        System.out.println(\"Is owner password valid? \" + isOwner);\n    }\n}"}
{"api_description": "PDFileSpecification getFile(): class PDActionLaunch\tThis will get the application to be launched or the document to be opened or printed.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification;\nimport org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch;\n\npublic class PDFileSpecificationExample {\n    public static void main(String[] args) throws IOException {\n        PDActionLaunch actionLaunch = new PDActionLaunch();\n        PDFileSpecification file = actionLaunch.getFile();\n\n        if (file != null) {\n            // File is not null, perform operations\n        } else {\n            // File is null, handle accordingly\n        }\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(org.apache.pdfbox.io.RandomAccessRead randomAccessRead): class Loader\tParses a PDF.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.io.RandomAccessRead;\nimport org.apache.pdfbox.io.RandomAccessReadBufferedFile;\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        // Assuming randomAccessRead is already initialized with the PDF file\n    \tFile file = new File(\"your-file-path\");\n        RandomAccessRead randomAccessRead = new RandomAccessReadBufferedFile(file);\n        // Load the PDF using the Loader class\n        PDDocument document = Loader.loadPDF(randomAccessRead);\n        document.close();\n        \n    }\n}"}
{"api_description": "PDMetadata getDestinationMetadata(): class PDFMergerUtility\tSet the destination metadata that is to be set in mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction).", "api_example": "import org.apache.pdfbox.multipdf.PDFMergerUtility;\nimport org.apache.pdfbox.pdmodel.common.PDMetadata;\n\npublic class PDFMerger {\n    public static void main(String[] args) {\n        PDFMergerUtility merger = new PDFMergerUtility();\n        PDMetadata destinationMetadata = merger.getDestinationMetadata();\n        // Set the destination metadata\n        // Example: \n        // merger.setDestinationMetadata(metadata);\n    }\n}"}
{"api_description": "void mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction): class PDFMergerUtility\tMerge the list of source documents, saving the result in the destination file.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.io.RandomAccessStreamCache;\nimport org.apache.pdfbox.multipdf.PDFMergerUtility;\n\npublic class PDFMergerExample {\n    public static void main(String[] args) throws IOException {\n        PDFMergerUtility pdfMerger = new PDFMergerUtility();\n        RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction = null; // initialize with appropriate value\n        pdfMerger.mergeDocuments(streamCacheCreateFunction);\n    }\n}"}
{"api_description": "AccessPermission getCurrentAccessPermission(): class PDDocument\tReturns the access permissions granted when the document was decrypted.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.encryption.AccessPermission;\n\npublic class PDFParser {\n    public static void main(String[] args) throws IOException {\n        File pdfFile = new File(\"myPdf.pdf\");\n        \n        PDDocument doc = Loader.loadPDF(pdfFile);\n        \n        if (doc != null) {\n            AccessPermission accessPerm = doc.getCurrentAccessPermission();\n            boolean canExtract = accessPerm.canExtractForAccessibility();\n            System.out.println(\"Can extract for accessibility: \" + canExtract);\n        } else {\n            System.out.println(\"Failed to parse the PDF.\");\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi, boolean center, PDFRenderer renderer): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\npublic class PDFPrinterExample {\n\t// API usage example\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument(); \n        Scaling scaling = Scaling.SCALE_TO_FIT;\n        boolean showPageBorder = true;\n        float dpi = 300;\n        boolean center = true;\n        PDFRenderer renderer = new PDFRenderer(document); \n        PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi, center, renderer);\n    }\n}"}
{"api_description": "StandardProtectionPolicy(String ownerPassword, String userPassword, AccessPermission permissions): class StandardProtectionPolicy\tCreates an new instance of the standard protection policy in order to protect a PDF document with passwords.", "api_example": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;\nimport org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;\n\npublic class PdfProtectionExample {\n    public static void main(String[] args) {\n        String ownerPassword = \"owner123\";\n        String userPassword = \"user123\";\n        AccessPermission permissions = new AccessPermission();\n        \n        StandardProtectionPolicy protectionPolicy = new StandardProtectionPolicy(ownerPassword, userPassword, permissions);\n    }\n}"}
{"api_description": "public class PDFTextStripper extends PDFStreamEngine This class will take a pdf document and strip out all of the text and ignore the formatting and such. Please note; it  is up to clients of this class to verify that a specific user has the correct permissions to extract text from the  PDF document. The basic flow of this process is that we get a document and use a series of processXXX(): class PDFTextStripper\tfunctions that work on  smaller and smaller chunks of the page. Eventually, we fully process each page and then print it.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.text.PDFTextStripper;\n\npublic class PDFTextExtractor {\n    public static void main(String[] args) {\n        String pathToPDF = \"path/to/pdf/document.pdf\";\n        \n        try {\n            PDDocument document = Loader.loadPDF(new File(pathToPDF));\n            PDFTextStripper pdfTextStripper = new PDFTextStripper();\n            String text = pdfTextStripper.getText(document);\n            \n            System.out.println(text);\n            \n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void saveIncremental(OutputStream output): class PDDocument\tSave the PDF as an incremental update.", "api_example": "import java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PdfUtil {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        // Add content to the document\n\n        try {\n            OutputStream output = null;// initialize the output stream\n            document.saveIncremental(output);\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } \n    }\n}"}
{"api_description": "void writePDF(OutputStream output): class COSInteger\tThis will output this string as a PDF object.", "api_example": "import java.io.IOException;\nimport java.io.OutputStream;\nimport org.apache.pdfbox.cos.COSInteger;\n\npublic class PDFWriter {\n\n    public static void main(String[] args) throws IOException {\n        OutputStream output = null; // initialize with actual output stream\n\n        COSInteger cosInteger = COSInteger.ONE;\n        cosInteger.writePDF(output);\n    }\n}"}
{"api_description": "void setTransition(PDTransition transition, float duration): class PDPage\tConvenient method to set a transition and the display duration", "api_example": "import org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition;\n\npublic class PDPageExample {\n    public static void main(String[] args) {\n        PDPage page = new PDPage();\n        PDTransition transition = new PDTransition();\n        float duration = 1.5f;\n        \n        page.setTransition(transition, duration);\n    }\n}"}
{"api_description": "void setTransition(PDTransition transition): class PDPage", "api_example": "import org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition;\n\npublic class PDPageUsageExample {\n    public static void main(String[] args) {\n        PDPage page = new PDPage();\n        PDTransition transition = new PDTransition();\n\n        // Set the transition for the page\n        page.setTransition(transition);\n    }\n}"}
{"api_description": "int getPageNumber(): class PDTargetDirectory\tIf the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory;\n\npublic class PDTargetDirectoryExample {\n    public static void main(String[] args) {\n        PDTargetDirectory targetDirectory = new PDTargetDirectory();\n        int pageNumber = targetDirectory.getPageNumber();\n        System.out.println(\"Page number containing the file attachment: \" + pageNumber);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(String password, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class SecurityExample {\n    public static void main(String[] args) throws IOException {\n        String password = \"examplePassword\";\n        byte[] user = { 0x00, 0x01, 0x02 };\n        byte[] owner = { 0x03, 0x04, 0x05 };\n        int permissions = 7;\n        byte[] id = { 0x06, 0x07, 0x08 };\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(password, user, owner, permissions, id, encRevision, keyLengthInBytes, encryptMetadata);\n        \n        System.out.println(\"Is owner password: \" + isOwner);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(byte[] ownerPassword, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class PDFHandler {\n    public static void main(String[] args) throws IOException {\n        byte[] ownerPassword = \"owner123\".getBytes();\n        byte[] user = \"user123\".getBytes();\n        byte[] owner = \"owner\".getBytes();\n        byte[] id = \"1234567890\".getBytes();\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(ownerPassword, user, owner, 7, id, encRevision, keyLengthInBytes, encryptMetadata);\n        System.out.println(\"Is owner password valid? \" + isOwner);\n    }\n}"}
{"api_description": "TextPosition(int pageRotation, float pageWidth, float pageHeight, Matrix textMatrix, float endX, float endY, float maxHeight, float individualWidth, float spaceWidth, String unicode, int[] charCodes, PDFont font, float fontSize, int fontSizeInPt): class TextPosition\tConstructor.", "api_example": "import org.apache.pdfbox.pdmodel.font.PDFont;\nimport org.apache.pdfbox.text.TextPosition;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class TextPositionExample {\n    public static void main(String[] args) {\n        int pageRotation = 0;\n        float pageWidth = 600;\n        float pageHeight = 800;\n        Matrix textMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n        float endX = 200;\n        float endY = 400;\n        float maxHeight = 20;\n        float individualWidth = 8;\n        float spaceWidth = 4;\n        String unicode = \"example\";\n        int[] charCodes = {101, 120, 97, 109, 112, 108, 101}; // ASCII codes for \"example\"\n        PDFont font = null; // initialize with appropriate font\n        float fontSize = 12;\n        int fontSizeInPt = 12;\n\n        TextPosition textPosition = new TextPosition(pageRotation, pageWidth, pageHeight, textMatrix, endX, endY, maxHeight, individualWidth, spaceWidth, unicode, charCodes, font, fontSize, fontSizeInPt);\n    }\n}"}
{"api_description": "TextPosition(int pageRotation, float pageWidth, float pageHeight, Matrix textMatrix, float endX, float endY, float maxHeight, float individualWidth, float spaceWidth, String unicode, int[] charCodes, PDFont font, float fontSize, int fontSizeInPt): class TextPosition\tConstructor.", "api_example": "import org.apache.pdfbox.pdmodel.font.PDFont;\nimport org.apache.pdfbox.text.TextPosition;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class TextPositionExample {\n    public static void main(String[] args) {\n        int pageRotation = 0;\n        float pageWidth = 600;\n        float pageHeight = 800;\n        Matrix textMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n        float endX = 200;\n        float endY = 400;\n        float maxHeight = 20;\n        float individualWidth = 8;\n        float spaceWidth = 4;\n        String unicode = \"example\";\n        int[] charCodes = {101, 120, 97, 109, 112, 108, 101}; // ASCII codes for \"example\"\n        PDFont font = null; // initialize with appropriate font\n        float fontSize = 12;\n        int fontSizeInPt = 12;\n\n        TextPosition textPosition = new TextPosition(pageRotation, pageWidth, pageHeight, textMatrix, endX, endY, maxHeight, individualWidth, spaceWidth, unicode, charCodes, font, fontSize, fontSizeInPt);\n    }\n}"}
{"api_description": "void drawImage(PDImageXObject image, Matrix matrix): class PDPatternContentStream\tDraw an image at the origin with the given transformation matrix.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPatternContentStream;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class ImageAPIExample {\n\tpublic static void main(String[] args) {\n\t\tPDDocument document = new PDDocument();\n        PDPatternContentStream patternContentStream;\n\t\ttry {\n\t\t\tPDImageXObject image = new PDImageXObject(document);\n\t        Matrix matrix = new Matrix(0, 0, 0, 0, 0, 0);\n\t\t\tpatternContentStream = new PDPatternContentStream(new PDTilingPattern());\n\t\t\tpatternContentStream.drawImage(image, matrix);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void processPage(PDPage page): class PDFTextStripper\tThis will process the contents of a page.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.text.PDFTextStripper;\n\npublic class ImageAPIExample {\n    public void processPage(PDPage page) {\n        PDFTextStripper textStripper = new PDFTextStripper();\n        try {\n\t\t\ttextStripper.processPage(page);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void setTextDecorationColor(PDGamma textDecorationColor): class PDLayoutAttributeObject\tSets the colour to be used for drawing text decorations (TextDecorationColor).", "api_example": "import org.apache.pdfbox.pdmodel.graphics.color.PDGamma;\n\npublic class TextDecorator {\n    private PDGamma color;\n\n    public TextDecorator(PDGamma color) {\n        this.color = color;\n    }\n\n    public void setTextDecorationColor(PDGamma textDecorationColor) {\n        this.color = textDecorationColor;\n    }\n}"}
{"api_description": "void setZoom(float zoom): class PDPageXYZDestination\tSet the zoom value for the page, values 0 or -1 imply that the current zoom will be used.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.documentnavigation.destination.PDPageXYZDestination;\n\npublic class ZoomExample {\n    public static void main(String[] args) {\n        PDPageXYZDestination destination = new PDPageXYZDestination();\n        float zoom = 1.5f;\n        \n        destination.setZoom(zoom);\n    }\n}"}
{"api_description": "void setRenderingIntent(String ri): class PDExtendedGraphicsState\tThis will set the rendering intent for the graphics state.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\n\npublic class GraphicsStateExample {\n    public static void main(String[] args) {\n        PDExtendedGraphicsState graphicsState = new PDExtendedGraphicsState();\n        String renderingIntent = \"Perceptual\";\n        graphicsState.setRenderingIntent(renderingIntent);\n    }\n}"}
{"api_description": "COSBase getTransfer(): class PDExtendedGraphicsState\tThis will get the transfer function of the /TR dictionary.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\nimport org.apache.pdfbox.cos.COSBase;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDExtendedGraphicsState graphicsState = new PDExtendedGraphicsState();\n        \n        COSBase transferFunction = graphicsState.getTransfer();\n    }\n}"}
{"api_description": "void setNonStrokingColor(PDColor color): class PDPageContentStream\tSets the non-stroking color and, if necessary, the non-stroking color space.", "api_example": "import org.apache.pdfbox.pdmodel.PDPageContentStream;\nimport org.apache.pdfbox.pdmodel.graphics.color.PDColor;\n\npublic class PDPageContentStreamExample {\n\n    public static void main(String[] args) {\n        try {\n            // Initialize variables\n            PDPageContentStream contentStream = null;\n            PDColor color = null;\n\n            // Create a PDPageContentStream instance\n\n            // Set non-stroking color\n            contentStream.setNonStrokingColor(color);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDEmbeddedFile getEmbeddedFileDos(): class PDComplexFileSpecification\tGet the embedded dos file.", "api_example": "import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n\npublic class EmbeddedFileExample {\n\n    public static void main(String[] args) {\n        PDComplexFileSpecification fileSpecification = new PDComplexFileSpecification();\n        \n        PDEmbeddedFile embeddedFile = fileSpecification.getEmbeddedFileDos();\n        if(embeddedFile != null){\n            // do something with the embedded file\n        } else {\n            // handle the case where there is no embedded file\n        }\n    }\n}"}
{"api_description": "PDEmbeddedFile getEmbeddedFileMac(): class PDComplexFileSpecification\tGet the embedded Mac file.", "api_example": "import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\n\npublic class EmbeddedFileExample {\n    public static void main(String[] args) {\n        PDComplexFileSpecification fileSpecification = new PDComplexFileSpecification();\n        // set up fileSpecification\n\n        PDEmbeddedFile embeddedFileMac = fileSpecification.getEmbeddedFileMac();\n        // make use of embeddedFileMac\n    }\n}"}
{"api_description": "PDEmbeddedFile getEmbeddedFileUnicode(): class PDComplexFileSpecification\tGet the embedded unicode file.", "api_example": "import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDComplexFileSpecification fileSpec = new PDComplexFileSpecification();\n        PDEmbeddedFile embeddedFile = fileSpec.getEmbeddedFileUnicode();\n        // API usage example\n    }\n}"}
{"api_description": "Calendar getModDate(): class PDEmbeddedFile\tGet the mod date of the embedded file.", "api_example": "import java.util.Calendar;\n\npublic class PDEmbeddedFile {\n    // other class variables and methods\n\n    public Calendar getModDate() {\n        // implementation of getModDate() method\n        // return the mod date of the embedded file\n        return null;\n    }\n\n    public static void main(String[] args) {\n        PDEmbeddedFile embeddedFile = new PDEmbeddedFile();\n        Calendar modDate = embeddedFile.getModDate();\n        // use modDate as needed\n    }\n}"}
{"api_description": "PDEmbeddedFile getEmbeddedFileUnix(): class PDComplexFileSpecification\tGet the embedded Unix file.", "api_example": "import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDComplexFileSpecification fileSpecification = new PDComplexFileSpecification();\n        PDEmbeddedFile embeddedFileUnix = fileSpecification.getEmbeddedFileUnix();\n        // Further code to use the embedded Unix file\n    }\n}"}
{"api_description": "String getFileDescription(): class PDComplexFileSpecification\tThis will get the description.", "api_example": "import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize the file specification\n        PDComplexFileSpecification fileSpecification = new PDComplexFileSpecification();\n\n        // Get the file description\n        String fileDescription = fileSpecification.getFileDescription();\n\n        // Print the file description\n        System.out.println(\"File Description: \" + fileDescription);\n    }\n}"}
{"api_description": "COSArray getCOSArray(COSName key): class COSDictionary\tThis is a convenience method that will get the dictionary object that is expected to be a COSArray.", "api_example": "import org.apache.pdfbox.cos.COSDictionary;\nimport org.apache.pdfbox.cos.COSArray;\nimport org.apache.pdfbox.cos.COSName;\n\npublic class Main {\n    public static void main(String[] args) {\n        COSDictionary dictionary = new COSDictionary();\n        COSArray array = dictionary.getCOSArray(COSName.getPDFName(\"key\"));\n    }\n}"}
{"api_description": "PDAction getAction(): class PDOutlineItem\tGet the action of this node.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDAction;\nimport org.apache.pdfbox.pdmodel.interactive.documentnavigation.outline.PDOutlineItem;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDOutlineItem outlineItem = new PDOutlineItem();\n        PDAction action = outlineItem.getAction();\n    }\n}"}
{"api_description": "String getO(): class PDActionLaunch\tThis will get the string specifying the operation to perform: open to open a document print to print a document If the F entry designates an application instead of a document, this entry is ignored and the application is launched.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch;\n\npublic class PDActionLaunchExample {\n    public static void main(String[] args) {\n        PDActionLaunch action = new PDActionLaunch();\n        String operation = action.getO();\n        System.out.println(operation);\n    }\n}"}
{"api_description": "PDTextState clone(): class PDTextState", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDTextState;\n\npublic class TextStateExample {\n    public static void main(String[] args) {\n        PDTextState originalState = new PDTextState();\n        PDTextState clonedState = originalState.clone();\n    }\n}"}
{"api_description": "float getCharacterSpacing(): class PDTextState\tGet the value of the characterSpacing.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDTextState;\n\npublic class TextStateExample {\n    public static void main(String[] args) {\n        PDTextState textState = new PDTextState();\n        float characterSpacing = textState.getCharacterSpacing();\n        System.out.println(\"Character spacing: \" + characterSpacing);\n    }\n}"}
{"api_description": "float getFontSize(): class PDTextState\tGet the value of the fontSize.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDTextState;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDTextState textState = new PDTextState();\n        float fontSize = textState.getFontSize();\n        System.out.println(\"Font size: \" + fontSize);\n    }\n}"}
{"api_description": "void setTrailer(COSDictionary newTrailer): class COSDocument\t// MIT added, maybe this should not be supported as trailer is a persistence construct.", "api_example": "import org.apache.pdfbox.cos.COSDictionary;\nimport org.apache.pdfbox.cos.COSDocument;\n\npublic class COSDocumentExample {\n    public static void main(String[] args) {\n        COSDictionary newTrailer = new COSDictionary();\n        COSDocument cosDocument = new COSDocument();\n        cosDocument.setTrailer(newTrailer);\n    }\n}"}
{"api_description": "protected void showType3Glyph(Matrix textRenderingMatrix, PDType3Font font, int code, Vector displacement): class PDFStreamEngine\tCalled when a glyph is to be processed.", "api_example": "import org.apache.pdfbox.contentstream.PDFStreamEngine;\nimport org.apache.pdfbox.pdmodel.font.PDType3Font;\nimport org.apache.pdfbox.util.Matrix;\nimport org.apache.pdfbox.util.Vector;\n\npublic class ExamplePDFStreamEngine extends PDFStreamEngine {\n    protected void showType3Glyph(Matrix textRenderingMatrix, PDType3Font font, int code, Vector displacement) {\n        // implementation to process the glyph\n    }\n}"}
{"api_description": "void setExtendedGraphicsState(PDExtendedGraphicsState extendedGraphicsState): class PDShadingPattern\tThis will set the external graphics state for this pattern.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern;\nimport org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\n\npublic class ShadingPatternExample {\n\n    public static void main(String[] args) {\n        PDExtendedGraphicsState extendedGraphicsState = new PDExtendedGraphicsState();\n        PDShadingPattern shadingPattern = new PDShadingPattern();\n        \n        // Set the extended graphics state for the shading pattern\n        shadingPattern.setExtendedGraphicsState(extendedGraphicsState);\n    }\n}"}
{"api_description": "PDExtendedGraphicsState getExtendedGraphicsState(): class PDShadingPattern\tThis will get the external graphics state for this pattern.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.state.PDExtendedGraphicsState;\nimport org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern;\n\npublic class Example {\n    private PDShadingPattern shadingPattern;\n\n    public void setShadingPattern(PDShadingPattern shadingPattern) {\n        this.shadingPattern = shadingPattern;\n    }\n\n    public PDExtendedGraphicsState getExtendedGraphicsState() {\n        if (shadingPattern != null) {\n            return shadingPattern.getExtendedGraphicsState();\n        } else {\n            // handle case where shadingPattern is null\n            return null;\n        }\n    }\n}"}
{"api_description": "public class PDCryptFilterDictionary extends Object implements COSObjectable This class is a specialized view of the crypt filter dictionary of a PDF document. It contains a low level dictionary (COSDictionary): class PDCryptFilterDictionary\tand provides the methods to  manage its fields.", "api_example": "import org.apache.pdfbox.cos.COSDictionary;\nimport org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary;\n\npublic class PDCryptFilterDictionaryExample {\n\n    public static void main(String[] args) {\n        COSDictionary cosDictionary = new COSDictionary();\n        // initialize the COSDictionary with necessary fields\n\n        PDCryptFilterDictionary cryptFilterDictionary = new PDCryptFilterDictionary(cosDictionary);\n        // perform operations on the cryptFilterDictionary\n    }\n}"}
{"api_description": "void save(OutputStream output): class PDDocument\tThis will save the document to an output stream.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.OutputStream;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        \n        // Add content to the document\n        \n        try {\n            OutputStream output = new FileOutputStream(new File(\"document.pdf\"));\n            document.save(output);\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void setNoRotate(boolean noRotate): class PDAnnotation\tSet the noRotate flag.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;\n\npublic class AnnotationExample {\n\n    public void setNoRotateExample(PDAnnotation annotation, boolean noRotate) {\n        annotation.setNoRotate(noRotate);\n    }\n}"}
{"api_description": "AppearanceStyle(): class AppearanceStyle", "api_example": "import java.awt.Color;\nimport java.awt.Font;\n\npublic class AppearanceStyle {\n    private Color textColor;\n    private Color backgroundColor;\n    private Font font;\n    \n    public AppearanceStyle(Color textColor, Color backgroundColor, Font font) {\n        this.textColor = textColor;\n        this.backgroundColor = backgroundColor;\n        this.font = font;\n    }\n\n    public static void main(String[] args) {\n        Color textColor = Color.BLACK;\n        Color backgroundColor = Color.WHITE;\n        Font font = new Font(\"Arial\", Font.PLAIN, 12);\n        \n        AppearanceStyle style = new AppearanceStyle(textColor, backgroundColor, font);\n    }\n}"}
{"api_description": "protected COSArray parseCOSArray(): class BaseParser\tThis will parse a PDF array object.", "api_example": "import org.apache.pdfbox.cos.COSArray;\n\npublic class ArrayParser {\n    private final byte[] byteArray;\n    \n    public ArrayParser(byte[] byteArray) {\n        this.byteArray = byteArray;\n    }\n\n    protected COSArray parseCOSArray() {\n        // implementation for parsing the PDF array object\n        return null;\n    }\n}"}
{"api_description": "PDFont getFont(): class PDTextState\tGet the value of the font.", "api_example": "import org.apache.pdfbox.pdmodel.font.PDFont;\nimport org.apache.pdfbox.pdmodel.graphics.state.PDTextState;\n\npublic class FontExample {\n    public static void main(String[] args) {\n        PDTextState textState = new PDTextState();\n        PDFont font = textState.getFont();\n        System.out.println(\"Font: \" + font);\n    }\n}"}
{"api_description": "int getPatternType(): class PDShadingPattern\tThis will return the pattern type.", "api_example": "import org.apache.pdfbox.pdmodel.graphics.pattern.PDShadingPattern;\n\npublic class ShadingPatternExample {\n    public static void main(String[] args) {\n        PDShadingPattern pattern = new PDShadingPattern();\n        int patternType = pattern.getPatternType();\n        System.out.println(\"Pattern type: \" + patternType);\n    }\n}"}
{"api_description": "LZWFilter(): class LZWFilter", "api_example": "import java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.FilterInputStream;\nimport java.io.FilterOutputStream;\n\npublic class LZWFilter extends FilterOutputStream {\n    public LZWFilter(OutputStream out) {\n        super(out);\n    }\n\n    public void compress(InputStream in) {\n        // implementation here\n    }\n\n    public void decompress(InputStream in) {\n        // implementation here\n    }\n}"}
{"api_description": "COSDictionary getLinearizedDictionary(): class COSDocument\tGet the dictionary containing the linearization information if the pdf is linearized.", "api_example": "import org.apache.pdfbox.cos.COSDocument;\nimport org.apache.pdfbox.cos.COSDictionary;\n\npublic class PdfLinearizationInfo {\n    public static void main(String[] args) {\n        // Assume cosDocument is initialized with a valid COSDocument object\n        COSDocument cosDocument = new COSDocument();\n\n        // Get the linearization dictionary\n        COSDictionary linearizedDictionary = cosDocument.getLinearizedDictionary();\n    }\n}"}
{"api_description": "PDPageContentStream(PDDocument document, PDPage sourcePage): class PDPageContentStream\tCreate a new PDPage content stream.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.PDPageContentStream;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        try (PDDocument document = new PDDocument()) {\n            PDPage page = new PDPage();\n            document.addPage(page);\n            \n            try (PDPageContentStream contentStream = new PDPageContentStream(document, page)) {\n                // Add content to the page content stream\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void addSource(String source): class PDFMergerUtility\tAdd a source file to the list of files to merge.", "api_example": "import org.apache.pdfbox.multipdf.PDFMergerUtility;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PDFMergerExample {\n    public static void main(String[] args) {\n        PDFMergerUtility pdfMerger = new PDFMergerUtility();\n        String sourceFile = \"source.pdf\";\n        File file = new File(sourceFile);\n        \n        try {\n            pdfMerger.addSource(sourceFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "protected void writePageEnd(): class PDFTextStripper\tWrite something (if defined) at the end of a page.", "api_example": "import org.apache.pdfbox.text.PDFTextStripper;\n\npublic class PDFProcessor {\n    protected void writePageEnd() {\n        PDFTextStripper pdfTextStripper = new PDFTextStripper();\n        // Write something at the end of a page\n        // ...\n    }\n}"}
