{"api_description": "========== PdfBox Begin ==========", "api_example": ""}
{"api_description": "static PDDocument Loader.loadPDF(File file): class Loader\tParses a PDF.", "api_example": "import org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        File file = new File(\"example.pdf\");\n        PDDocument document = Loader.loadPDF(file);\n        // Use the document for further processing\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(org.apache.pdfbox.io.RandomAccessRead randomAccessRead, String password): class Loader\tParses a PDF.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.io.RandomAccessRead;\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        RandomAccessRead randomAccessRead = null; // initialize with actual RandomAccessRead object\n        String password = \"myPassword\"; // initialize with actual password\n        PDDocument loadedDocument = Loader.loadPDF(randomAccessRead, password);\n        \n        // Rest of the code to work with the loaded PDF document\n    }\n}"}
{"api_description": "void addSource(File source): class PDFMergerUtility\tAdd a source file to the list of files to merge.", ",api_example": "import org.apache.pdfbox.multipdf.PDFMergerUtility;\nimport java.io.File;\nimport java.io.FileNotFoundException;\n\npublic class PDFMergerExample {\n    public static void main(String[] args) throws FileNotFoundException {\n        PDFMergerUtility pdfMerger = new PDFMergerUtility();\n        File sourceFile = new File(\"source.pdf\");\n        \n        pdfMerger.addSource(sourceFile);\n        \n        // Merge more files if needed\n        File anotherSourceFile = new File(\"another_source.pdf\");\n        pdfMerger.addSource(anotherSourceFile);\n        \n        // Perform the merge operation\n        // pdfMerger.mergeDocuments(outputFile);\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(File file, String password, org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction): class Loader\tParses a PDF.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.Loader;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class PdfLoaderExample {\n    public static void main(String[] args) {\n        File file = new File(\"example.pdf\");\n        String password = \"123456\";\n\n        try {\n            PDDocument document = Loader.loadPDF(file, password, null);\n            // Other operations with the loaded document\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document): class PDFPrintable\tCreates a new PDFPrintable.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\n\npublic class PDFPrinterExample {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        // Add pages to the document\n        \n        PDFPrintable pdfPrintable = new PDFPrintable(document);\n\n        // Rest of the code to print the PDF using pdfPrintable\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class Example {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument(); // initialize with actual PDDocument object\n        Scaling scaling = Scaling.SHRINK_TO_FIT; // initialize with appropriate Scaling value\n\n        PDFPrintable pdfPrintable = new PDFPrintable(document, scaling);\n        // rest of the code here\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(String imagePath, PDDocument doc): class PDImageXObject\tCreate a PDImageXObject from an image file, see createFromFileByExtension(File, PDDocument) for more details.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        try {\n            String imagePath = \"image.jpg\";\n            PDImageXObject image = PDImageXObject.createFromFile(imagePath, document);\n            // Do something with the image object\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi, boolean center): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class PDFPrinterExample {\n\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument(); // Replace with actual document\n            Scaling scaling = Scaling.SHRINK_TO_FIT; // Replace with actual scaling\n            boolean showPageBorder = false; // Replace with actual value\n            float dpi = 300; // Replace with actual DPI\n            boolean center = true; // Replace with actual value\n\n            PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi, center);\n            // Rest of the code to perform printing\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\n\npublic class PDFPrintingExample {\n\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument(); // initialize the PDDocument\n            Scaling scaling = Scaling.SHRINK_TO_FIT; // initialize the Scaling\n            boolean showPageBorder = true; // initialize the boolean for showing page borders\n            float dpi = 300; // initialize the dpi\n\n            PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi);\n            \n            // Other code to perform printing or other operations\n        } catch (Exception e) {\n            \n        }\n    }\n}"}
{"api_description": "void saveIncremental(OutputStream output): class PDDocument\tSave the PDF as an incremental update.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.OutputStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        OutputStream output = getOutputStream(); // Get the output stream from somewhere\n        \n        try {\n            document.saveIncremental(output);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static OutputStream getOutputStream() {\n        // Implementation to get the output stream\n        return null;\n    }\n}"}
{"api_description": "// load the recipient's certificate  InputStream inStream = new FileInputStream(certificate_path): class PublicKeyProtectionPolicy\t;  CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");  X509Certificate certificate = (X509Certificate)cf.generateCertificate(inStream);  inStream.close();", "api_example": "import java.io.*;\nimport java.security.cert.CertificateException;\nimport java.security.cert.CertificateFactory;\nimport java.security.cert.X509Certificate;\n\npublic class CertificateLoader {\n\n    public void loadCertificate(String certificatePath) throws CertificateException, IOException {\n        // load the recipient's certificate\n        InputStream inStream = new FileInputStream(certificatePath);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        X509Certificate certificate = (X509Certificate) cf.generateCertificate(inStream);\n        inStream.close();\n    }\n}"}
{"api_description": "void save(String fileName): class FDFDocument\tThis will save this document to the filesystem.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\n\npublic class DocumentHandler {\n    public static void main(String[] args) throws IOException {\n        FDFDocument document = new FDFDocument();\n        String fileName = \"example.pdf\";\n        document.save(fileName);\n        document.close();\n    }\n}"}
{"api_description": "static FDFDocument Loader.loadFDF(String filename): class Loader\tThis will load a document from a file.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\nimport org.apache.pdfbox.Loader;\n\npublic class DocumentLoader {\n    public static void main(String[] args) throws IOException {\n        String filename = \"example.fdf\";\n        FDFDocument document = Loader.loadFDF(filename);\n        document.close();\n    }\n}"}
{"api_description": "ExternalSigningSupport saveIncrementalForExternalSigning(OutputStream output): class PDDocument\tSave PDF incrementally without closing for external signature creation scenario.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.interactive.digitalsignature.ExternalSigningSupport;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class ExternalSigningExample {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        \n        // Add content to the document\n        \n        try {\n            OutputStream outputStream = new FileOutputStream(\"output.pdf\");\n            ExternalSigningSupport externalSigningSupport = document.saveIncrementalForExternalSigning(outputStream);\n            // Perform external signature creation using externalSigningSupport if needed\n            outputStream.close();\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "COSDocument getDocument(): class FDFDocument\tThis will get the low level document.", "api_example": "import org.apache.pdfbox.cos.COSDocument;\nimport org.apache.pdfbox.pdmodel.fdf.FDFDocument;\n\npublic class FDFDocumentExample {\n    public static void main(String[] args) {\n    \ttry {\n\t        FDFDocument fdfDocument = new FDFDocument();\n\t        COSDocument cosDocument = fdfDocument.getDocument();\n\t\t\tfdfDocument.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void drawImage(PDImageXObject image, Matrix matrix): class PDFormContentStream\tDraw an image at the origin with the given transformation matrix.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDFormContentStream;\nimport org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class ImageDrawer {\n    public static void main(String[] args) throws IOException {\n    \tPDDocument document = new PDDocument();\n        PDImageXObject image = new PDImageXObject(document); // initialize with a PDImageXObject from somewhere\n        Matrix matrix = new Matrix(0, 0, 0, 0, 0, 0); // initialize with a Matrix from somewhere\n        PDFormContentStream contentStream = new PDFormContentStream(new PDFormXObject(document)); // initialize with a PDFormContentStream from somewhere\n\n        contentStream.drawImage(image, matrix);\n        contentStream.close();\n    }\n}"}
{"api_description": "static PDImageXObject createFromFile(PDDocument document, File file): class CCITTFactory\tCreates a new CCITT Fax compressed image XObject from the first image of a TIFF file.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.CCITTFactory;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport java.io.File;\n\npublic class ImageExample {\n    public static void main(String[] args) {\n        try {\n            PDDocument document = new PDDocument();\n            File file = new File(\"path_to_tiff_file.tif\");\n            PDImageXObject image = CCITTFactory.createFromFile(document, file);\n            // Further operations with the image object\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "static PDImageXObject JPEGFactory.createFromImage(PDDocument document, BufferedImage image, float quality): class JPEGFactory\tCreates a new JPEG PDImageXObject from a BufferedImage and a given quality.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\npublic class ImageExample {\n    public static void main(String[] args) throws IOException {\n        PDDocument document = new PDDocument();\n        BufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_ARGB);\n        float quality = 0.8f;\n\n        PDImageXObject jpegImage = JPEGFactory.createFromImage(document, image, quality);\n        // Further processing or saving the resulting image\n    }\n}"}
{"api_description": "boolean canExtractForAccessibility(): class AccessPermission\tThis will tell if the user can extract text and images from the PDF document for accessibility purposes.", "api_example": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;\n\npublic class PdfAccessibilityExtractor {\n    public static void main(String[] args) {\n        AccessPermission permission = new AccessPermission();\n        boolean canExtract = permission.canExtractForAccessibility();\n        System.out.println(\"User can extract for accessibility: \" + canExtract);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(byte[] ownerPassword, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class PDFHandler {\n    public static void main(String[] args) throws IOException {\n        byte[] ownerPassword = \"owner123\".getBytes();\n        byte[] user = \"user123\".getBytes();\n        byte[] owner = \"owner\".getBytes();\n        byte[] id = \"1234567890\".getBytes();\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(ownerPassword, user, owner, 7, id, encRevision, keyLengthInBytes, encryptMetadata);\n        System.out.println(\"Is owner password valid? \" + isOwner);\n    }\n}"}
{"api_description": "PDFileSpecification getFile(): class PDActionLaunch\tThis will get the application to be launched or the document to be opened or printed.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.common.filespecification.PDFileSpecification;\nimport org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch;\n\npublic class PDFileSpecificationExample {\n    public static void main(String[] args) throws IOException {\n        PDActionLaunch actionLaunch = new PDActionLaunch();\n        PDFileSpecification file = actionLaunch.getFile();\n\n        if (file != null) {\n            // File is not null, perform operations\n        } else {\n            // File is null, handle accordingly\n        }\n    }\n}"}
{"api_description": "static PDDocument Loader.loadPDF(org.apache.pdfbox.io.RandomAccessRead randomAccessRead): class Loader\tParses a PDF.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.io.RandomAccessRead;\nimport org.apache.pdfbox.io.RandomAccessReadBufferedFile;\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PDFLoader {\n    public static void main(String[] args) throws IOException {\n        // Assuming randomAccessRead is already initialized with the PDF file\n    \tFile file = new File(\"your-file-path\");\n        RandomAccessRead randomAccessRead = new RandomAccessReadBufferedFile(file);\n        // Load the PDF using the Loader class\n        PDDocument document = Loader.loadPDF(randomAccessRead);\n        document.close();\n        \n    }\n}"}
{"api_description": "PDMetadata getDestinationMetadata(): class PDFMergerUtility\tSet the destination metadata that is to be set in mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction).", "api_example": "import org.apache.pdfbox.multipdf.PDFMergerUtility;\nimport org.apache.pdfbox.pdmodel.common.PDMetadata;\n\npublic class PDFMerger {\n    public static void main(String[] args) {\n        PDFMergerUtility merger = new PDFMergerUtility();\n        PDMetadata destinationMetadata = merger.getDestinationMetadata();\n        // Set the destination metadata\n        // Example: \n        // merger.setDestinationMetadata(metadata);\n    }\n}"}
{"api_description": "void mergeDocuments(org.apache.pdfbox.io.RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction): class PDFMergerUtility\tMerge the list of source documents, saving the result in the destination file.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.io.RandomAccessStreamCache;\nimport org.apache.pdfbox.multipdf.PDFMergerUtility;\n\npublic class PDFMergerExample {\n    public static void main(String[] args) throws IOException {\n        PDFMergerUtility pdfMerger = new PDFMergerUtility();\n        RandomAccessStreamCache.StreamCacheCreateFunction streamCacheCreateFunction = null; // initialize with appropriate value\n        pdfMerger.mergeDocuments(streamCacheCreateFunction);\n    }\n}"}
{"api_description": "AccessPermission getCurrentAccessPermission(): class PDDocument\tReturns the access permissions granted when the document was decrypted.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.encryption.AccessPermission;\n\npublic class PDFParser {\n    public static void main(String[] args) throws IOException {\n        File pdfFile = new File(\"myPdf.pdf\");\n        \n        PDDocument doc = Loader.loadPDF(pdfFile);\n        \n        if (doc != null) {\n            AccessPermission accessPerm = doc.getCurrentAccessPermission();\n            boolean canExtract = accessPerm.canExtractForAccessibility();\n            System.out.println(\"Can extract for accessibility: \" + canExtract);\n        } else {\n            System.out.println(\"Failed to parse the PDF.\");\n        }\n    }\n}"}
{"api_description": "PDFPrintable(PDDocument document, Scaling scaling, boolean showPageBorder, float dpi, boolean center, PDFRenderer renderer): class PDFPrintable\tCreates a new PDFPrintable with the given page scaling and with optional page borders shown.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.printing.PDFPrintable;\nimport org.apache.pdfbox.printing.Scaling;\nimport org.apache.pdfbox.rendering.PDFRenderer;\n\npublic class PDFPrinterExample {\n\t// API usage example\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument(); \n        Scaling scaling = Scaling.SCALE_TO_FIT;\n        boolean showPageBorder = true;\n        float dpi = 300;\n        boolean center = true;\n        PDFRenderer renderer = new PDFRenderer(document); \n        PDFPrintable pdfPrintable = new PDFPrintable(document, scaling, showPageBorder, dpi, center, renderer);\n    }\n}"}
{"api_description": "StandardProtectionPolicy(String ownerPassword, String userPassword, AccessPermission permissions): class StandardProtectionPolicy\tCreates an new instance of the standard protection policy in order to protect a PDF document with passwords.", "api_example": "import org.apache.pdfbox.pdmodel.encryption.AccessPermission;\nimport org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;\n\npublic class PdfProtectionExample {\n    public static void main(String[] args) {\n        String ownerPassword = \"owner123\";\n        String userPassword = \"user123\";\n        AccessPermission permissions = new AccessPermission();\n        \n        StandardProtectionPolicy protectionPolicy = new StandardProtectionPolicy(ownerPassword, userPassword, permissions);\n    }\n}"}
{"api_description": "public class PDFTextStripper extends PDFStreamEngine This class will take a pdf document and strip out all of the text and ignore the formatting and such. Please note; it  is up to clients of this class to verify that a specific user has the correct permissions to extract text from the  PDF document. The basic flow of this process is that we get a document and use a series of processXXX(): class PDFTextStripper\tfunctions that work on  smaller and smaller chunks of the page. Eventually, we fully process each page and then print it.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.Loader;\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.text.PDFTextStripper;\n\npublic class PDFTextExtractor {\n    public static void main(String[] args) {\n        String pathToPDF = \"path/to/pdf/document.pdf\";\n        \n        try {\n            PDDocument document = Loader.loadPDF(new File(pathToPDF));\n            PDFTextStripper pdfTextStripper = new PDFTextStripper();\n            String text = pdfTextStripper.getText(document);\n            \n            System.out.println(text);\n            \n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void saveIncremental(OutputStream output): class PDDocument\tSave the PDF as an incremental update.", "api_example": "import java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\n\npublic class PdfUtil {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        // Add content to the document\n\n        try {\n            OutputStream output = null;// initialize the output stream\n            document.saveIncremental(output);\n            document.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } \n    }\n}"}
{"api_description": "void writePDF(OutputStream output): class COSInteger\tThis will output this string as a PDF object.", "api_example": "import java.io.IOException;\nimport java.io.OutputStream;\nimport org.apache.pdfbox.cos.COSInteger;\n\npublic class PDFWriter {\n\n    public static void main(String[] args) throws IOException {\n        OutputStream output = null; // initialize with actual output stream\n\n        COSInteger cosInteger = COSInteger.ONE;\n        cosInteger.writePDF(output);\n    }\n}"}
{"api_description": "void setTransition(PDTransition transition, float duration): class PDPage\tConvenient method to set a transition and the display duration", "api_example": "import org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition;\n\npublic class PDPageExample {\n    public static void main(String[] args) {\n        PDPage page = new PDPage();\n        PDTransition transition = new PDTransition();\n        float duration = 1.5f;\n        \n        page.setTransition(transition, duration);\n    }\n}"}
{"api_description": "void setTransition(PDTransition transition): class PDPage", "api_example": "import org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition;\n\npublic class PDPageUsageExample {\n    public static void main(String[] args) {\n        PDPage page = new PDPage();\n        PDTransition transition = new PDTransition();\n\n        // Set the transition for the page\n        page.setTransition(transition);\n    }\n}"}
{"api_description": "int getPageNumber(): class PDTargetDirectory\tIf the value in the /P entry is an integer, this will get the page number (zero-based) in the current document containing the file attachment annotation.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDTargetDirectory;\n\npublic class PDTargetDirectoryExample {\n    public static void main(String[] args) {\n        PDTargetDirectory targetDirectory = new PDTargetDirectory();\n        int pageNumber = targetDirectory.getPageNumber();\n        System.out.println(\"Page number containing the file attachment: \" + pageNumber);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(String password, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class SecurityExample {\n    public static void main(String[] args) throws IOException {\n        String password = \"examplePassword\";\n        byte[] user = { 0x00, 0x01, 0x02 };\n        byte[] owner = { 0x03, 0x04, 0x05 };\n        int permissions = 7;\n        byte[] id = { 0x06, 0x07, 0x08 };\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(password, user, owner, permissions, id, encRevision, keyLengthInBytes, encryptMetadata);\n        \n        System.out.println(\"Is owner password: \" + isOwner);\n    }\n}"}
{"api_description": "boolean isOwnerPassword(byte[] ownerPassword, byte[] user, byte[] owner, int permissions, byte[] id, int encRevision, int keyLengthInBytes, boolean encryptMetadata): class StandardSecurityHandler\tCheck for owner password.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler;\n\npublic class PDFHandler {\n    public static void main(String[] args) throws IOException {\n        byte[] ownerPassword = \"owner123\".getBytes();\n        byte[] user = \"user123\".getBytes();\n        byte[] owner = \"owner\".getBytes();\n        byte[] id = \"1234567890\".getBytes();\n        int encRevision = 2;\n        int keyLengthInBytes = 128;\n        boolean encryptMetadata = true;\n\n        StandardSecurityHandler securityHandler = new StandardSecurityHandler();\n        boolean isOwner = securityHandler.isOwnerPassword(ownerPassword, user, owner, 7, id, encRevision, keyLengthInBytes, encryptMetadata);\n        System.out.println(\"Is owner password valid? \" + isOwner);\n    }\n}"}
{"api_description": "TextPosition(int pageRotation, float pageWidth, float pageHeight, Matrix textMatrix, float endX, float endY, float maxHeight, float individualWidth, float spaceWidth, String unicode, int[] charCodes, PDFont font, float fontSize, int fontSizeInPt): class TextPosition\tConstructor.", "api_example": "import org.apache.pdfbox.pdmodel.font.PDFont;\nimport org.apache.pdfbox.text.TextPosition;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class TextPositionExample {\n    public static void main(String[] args) {\n        int pageRotation = 0;\n        float pageWidth = 600;\n        float pageHeight = 800;\n        Matrix textMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n        float endX = 200;\n        float endY = 400;\n        float maxHeight = 20;\n        float individualWidth = 8;\n        float spaceWidth = 4;\n        String unicode = \"example\";\n        int[] charCodes = {101, 120, 97, 109, 112, 108, 101}; // ASCII codes for \"example\"\n        PDFont font = null; // initialize with appropriate font\n        float fontSize = 12;\n        int fontSizeInPt = 12;\n\n        TextPosition textPosition = new TextPosition(pageRotation, pageWidth, pageHeight, textMatrix, endX, endY, maxHeight, individualWidth, spaceWidth, unicode, charCodes, font, fontSize, fontSizeInPt);\n    }\n}"}
{"api_description": "TextPosition(int pageRotation, float pageWidth, float pageHeight, Matrix textMatrix, float endX, float endY, float maxHeight, float individualWidth, float spaceWidth, String unicode, int[] charCodes, PDFont font, float fontSize, int fontSizeInPt): class TextPosition\tConstructor.", "api_example": "import org.apache.pdfbox.pdmodel.font.PDFont;\nimport org.apache.pdfbox.text.TextPosition;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class TextPositionExample {\n    public static void main(String[] args) {\n        int pageRotation = 0;\n        float pageWidth = 600;\n        float pageHeight = 800;\n        Matrix textMatrix = new Matrix(1, 0, 0, 1, 0, 0);\n        float endX = 200;\n        float endY = 400;\n        float maxHeight = 20;\n        float individualWidth = 8;\n        float spaceWidth = 4;\n        String unicode = \"example\";\n        int[] charCodes = {101, 120, 97, 109, 112, 108, 101}; // ASCII codes for \"example\"\n        PDFont font = null; // initialize with appropriate font\n        float fontSize = 12;\n        int fontSizeInPt = 12;\n\n        TextPosition textPosition = new TextPosition(pageRotation, pageWidth, pageHeight, textMatrix, endX, endY, maxHeight, individualWidth, spaceWidth, unicode, charCodes, font, fontSize, fontSizeInPt);\n    }\n}"}
{"api_description": "void drawImage(PDImageXObject image, Matrix matrix): class PDPatternContentStream\tDraw an image at the origin with the given transformation matrix.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.PDPatternContentStream;\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\nimport org.apache.pdfbox.pdmodel.graphics.pattern.PDTilingPattern;\nimport org.apache.pdfbox.util.Matrix;\n\npublic class ImageAPIExample {\n\tpublic static void main(String[] args) {\n\t\tPDDocument document = new PDDocument();\n        PDPatternContentStream patternContentStream;\n\t\ttry {\n\t\t\tPDImageXObject image = new PDImageXObject(document);\n\t        Matrix matrix = new Matrix(0, 0, 0, 0, 0, 0);\n\t\t\tpatternContentStream = new PDPatternContentStream(new PDTilingPattern());\n\t\t\tpatternContentStream.drawImage(image, matrix);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void processPage(PDPage page): class PDFTextStripper\tThis will process the contents of a page.", "api_example": "import java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.PDPage;\nimport org.apache.pdfbox.text.PDFTextStripper;\n\npublic class ImageAPIExample {\n    public void processPage(PDPage page) {\n        PDFTextStripper textStripper = new PDFTextStripper();\n        try {\n\t\t\ttextStripper.processPage(page);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "========== Imaging Begin ==========", "api_example": ""}
{"api_description": "static void applyFloydSteinbergDithering(BufferedImage image, Palette palette): class Dithering\tChanges the given image to only use colors from the given palette, applying Floyd-Steinberg dithering in the process.", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.palette.Dithering;\nimport org.apache.commons.imaging.palette.Palette;\nimport org.apache.commons.imaging.palette.SimplePalette;\n\npublic class DitheringExample {\n    public static void main(String[] args) throws ImageWriteException {\n        BufferedImage originalImage = new BufferedImage(1, 1, BufferedImage.TYPE_3BYTE_BGR);\n        Palette palette = new SimplePalette(null); \n\n        Dithering.applyFloydSteinbergDithering(originalImage, palette);\n    }\n}"}
{"api_description": "ColorModel deriveColorModel(BufferedImage bi, ColorSpace cs): class ColorTools", "api_example": "import java.awt.color.ColorSpace;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_LINEAR_RGB);\n        ColorTools tools = new ColorTools(); \n        ColorModel derivedModel = tools.deriveColorModel(image, colorSpace);\n    }\n}"}
{"api_description": "BufferedImage convertBetweenICCProfiles(BufferedImage bi, ICC_Profile from, ICC_Profile to): class ColorTools\t", "api_example": "import java.awt.image.BufferedImage;\nimport java.awt.color.ICC_Profile;\n\npublic class ColorTools {\n    public BufferedImage convertBetweenICCProfiles(BufferedImage bi, ICC_Profile from, ICC_Profile to) {\n        // API usage example\n        BufferedImage inputImage = bi;\n        ICC_Profile sourceProfile = from;\n        ICC_Profile targetProfile = to;\n\n        // Call the method to convert the image between the ICC profiles\n        BufferedImage outputImage = convertBetweenICCProfiles(inputImage, sourceProfile, targetProfile);\n\n        // Return the resulting image\n        return outputImage;\n    }\n}"}
{"api_description": "abstract BufferedImage toRawImage(WritableRaster raster): class PDColorSpace\tReturns the image in this colorspace or null.",",api_example": "import java.awt.image.BufferedImage;\nimport java.awt.image.WritableRaster;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace;\nimport org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace;\n\npublic class ExampleUsage {\n    public static void main(String[] args) throws IOException {\n        WritableRaster raster = null; // initialize with appropriate raster\n        PDColorSpace colorSpace = new PDJPXColorSpace(null); // create an instance of PDColorSpace\n        BufferedImage image = colorSpace.toRawImage(raster); // call the toRawImage method\n\n        // use the resulting image as needed\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(byte[] src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.ByteArrayOutputStream;\nimport java.io.OutputStream;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class ExifMetadataUpdater {\n\n    public static void main(String[] args) {\n        try {\n            FileInputStream fis = new FileInputStream(\"input.jpg\");\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n\n            byte[] buffer = new byte[1024]; \n            int bytesRead = 0;\n            while ((bytesRead = fis.read(buffer)) != -1) {\n                bos.write(buffer, 0, bytesRead); \n            byte[] src = bos.toByteArray(); \n            fis.close();\n            \n            TiffOutputSet outputSet = new TiffOutputSet();\n            OutputStream os = new ByteArrayOutputStream();\n            new ExifRewriter().updateExifMetadataLossy(src, os, outputSet);\n\n            }\n        }catch (IOException | ImageReadException | ImageWriteException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossless(File src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        File sourceFile = new File(\"input.jpg\");\n        File outputFile = new File(\"output.jpg\");\n        \n        try {\n            TiffOutputSet outputSet = new TiffOutputSet();\n            OutputStream os = new FileOutputStream(outputFile);\n            \n            ExifRewriter rewriter = new ExifRewriter();\n            rewriter.updateExifMetadataLossless(sourceFile, os, outputSet);\n\n            os.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(byte[] src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport java.io.*;\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        byte[] sourceImageBytes = null;\n        OutputStream outputStream = null;\n        TiffOutputSet tiffOutputSet = null;\n\n        ExifRewriter exifRewriter = new ExifRewriter();\n        try {\n\t\t\texifRewriter.updateExifMetadataLossy(sourceImageBytes, outputStream, tiffOutputSet);\n\t\t} catch (ImageReadException | ImageWriteException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(File src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\n\npublic class ExifRewriterExample {\n    public static void main(String[] args) {\n        File inputFile = new File(\"input.jpg\");\n        File outputFile = new File(\"output.jpg\");\n\n        try {\n            TiffOutputSet outputSet = new TiffOutputSet();\n            // Modify the outputSet as needed\n            OutputStream os = new FileOutputStream(outputFile);\n            ExifRewriter exifRewriter = new ExifRewriter();\n            try {\n\t\t\t\texifRewriter.updateExifMetadataLossy(inputFile, os, outputSet);\n\t\t\t} catch (ImageReadException | ImageWriteException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n            os.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "void updateExifMetadataLossy(InputStream src, OutputStream os, TiffOutputSet outputSet): class ExifRewriter\tReads a Jpeg image, replaces the EXIF metadata and writes the result to a stream.", "api_example": "import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;\nimport org.apache.commons.imaging.formats.tiff.TiffImageMetadata;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\npublic class ExifRewriterUsageExample {\n\n    public static void main(String[] args) throws FileNotFoundException {\n        InputStream inputStream = new FileInputStream(\"\");// initialize input stream with the jpeg image\n        OutputStream outputStream = new FileOutputStream(\"\");// initialize output stream to write the result\n        \n        try {\n\n\t\t\tTiffImageMetadata metadata = new TiffImageMetadata(null);\n            TiffOutputSet outputSet = metadata.getOutputSet();\n            \n            // Modify the metadata\n            if (outputSet != null) {\n                // for example: outputSet.getOrCreateExifIFD0Directory().setDate(ExifIFD0Directory.TAG_DATETIME, new Date());\n                // modify other metadata values as needed\n            }\n            \n            ExifRewriter rewriter = new ExifRewriter();\n            rewriter.updateExifMetadataLossy(inputStream, outputStream, outputSet);\n            \n            inputStream.close();\n            outputStream.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "static ImageFormat Imaging.guessFormat (File file): class Imaging\tAttempts to determine the image format of a file based on its \"magic numbers,\" the first bytes of the data.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageFormat;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageChecker {\n    public static void main(String[] args) {\n        File imgFile = new File(\"image.jpg\");\n        ImageFormat format;\n\t\ttry {\n\t\t\tformat = Imaging.guessFormat(imgFile);\n\t        System.out.println(\"The image format is: \" + format);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "ImageDataReader getDataReader(TiffDirectory directory, PhotometricInterpreter photometricInterpreter, int bitsPerPixel, int[] bitsPerSample, int predictor, int samplesPerPixel, int width, int height, int compression, TiffPlanarConfiguration planarConfiguration, ByteOrder byteorder): class TiffImageData.Strips", "api_example": "import java.io.IOException;\nimport java.nio.ByteOrder;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.tiff.TiffDirectory;\nimport org.apache.commons.imaging.formats.tiff.TiffField;\nimport org.apache.commons.imaging.formats.tiff.TiffImageData;\nimport org.apache.commons.imaging.formats.tiff.constants.TiffPlanarConfiguration;\nimport org.apache.commons.imaging.formats.tiff.datareaders.ImageDataReader;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreter;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterBiLevel;\n\npublic class ImageDataExample {\n    public void usageExample() throws ImageReadException, IOException {\n        long offset = 0;\n\t\tint type = 0;\n\t\tlong nextDirectoryOffset = 0;\n\t\tByteOrder byteOrder = null;\n\t\tList<TiffField> entries = null;\n\t\tTiffDirectory directory = new TiffDirectory(type, entries, offset, nextDirectoryOffset, byteOrder); // instantiate TiffDirectory or pass as parameter\n        PhotometricInterpreter photometricInterpreter = new PhotometricInterpreterBiLevel(0, null, 0, 0, 0, false);\n        int bitsPerPixel = 8; \n        int[] bitsPerSample = {8, 8}; \n        int predictor = 1; \n        int samplesPerPixel = 3; \n        int width = 100; \n        int height = 100; \n        int compression = 1; \n        // TiffPlanarConfiguration 枚举类型\n        TiffPlanarConfiguration planarConfiguration = TiffPlanarConfiguration.CHUNKY;\n        ByteOrder byteorder = ByteOrder.BIG_ENDIAN; \n        TiffImageData.Strips ts = new TiffImageData.Strips(null, compression);\n        \n        ImageDataReader imageDataReader = ts.getDataReader(directory, photometricInterpreter, bitsPerPixel, bitsPerSample, predictor, samplesPerPixel, width, height, compression, planarConfiguration, byteorder);\n    }\n}\n"}
{"api_description": "FormatCompliance getFormatCompliance(File file): class ImageParser\tDetermines the format compliance of the specified file based on rules provided by a specific implementation.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.FormatCompliance;\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\n\npublic class ImageParserExample {\n\t\n    public static void main(String[] args) {\n        File imageFile = new File(\"example.jpg\");\n        \n        ImageParser<?> parser = new JpegImageParser();\n        FormatCompliance compliance;\n\t\ttry {\n\t\t\tcompliance = parser.getFormatCompliance(imageFile);\n\t        System.out.println(\"Format Compliance: \" + compliance);\n\t\t} catch (ImageReadException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (byte[] bytes): class Imaging\tGets all images specified by the byte array (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageProcessor {\n    public static void main(String[] args) {\n        byte[] imageBytes = { /* actual image bytes */ };\n        \n        List<BufferedImage> images;\n\t\ttry {\n\t\t\timages = Imaging.getAllBufferedImages(imageBytes);\n\t        for (BufferedImage image : images) {\n\t            // Process each image as needed\n\t        }\n\t\t} catch (ImageReadException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "Dimension getImageSize(ByteSource byteSource, IcnsImagingParameters params): class IcnsImageParser\tGet the size of the image described by the specified ByteSource.", "api_example": "import java.awt.Dimension;\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.bytesource.ByteSource;\nimport org.apache.commons.imaging.common.bytesource.ByteSourceFile;\nimport org.apache.commons.imaging.formats.icns.IcnsImageParser;\nimport org.apache.commons.imaging.formats.icns.IcnsImagingParameters;\n\npublic class ImageProcessor {\n    public static void main(String[] args) throws ImageReadException, IOException {\n    \tFile file = new File(\"file-path\");\n        ByteSource byteSource = new ByteSourceFile(file);\n        IcnsImagingParameters params = new IcnsImagingParameters();\n        IcnsImageParser parser = new IcnsImageParser();\n\n        Dimension imageSize = parser.getImageSize(byteSource, params);\n        System.out.println(\"Image size: \" + imageSize);\n    }\n}"}
{"api_description": "BufferedImage getImage(): class PDImage\tReturns the content of this image as an AWT buffered image with an (A)RGB color space.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\n\nimport org.apache.pdfbox.pdmodel.graphics.image.PDImage;\n\npublic class ImageProcessor {\n    private PDImage pdImage;\n\n    public ImageProcessor(PDImage pdImage) {\n        this.pdImage = pdImage;\n    }\n    \n    public BufferedImage convertToBufferedImage() throws IOException {\n        return pdImage.getImage();\n    }\n}"}
{"api_description": "Dimension getImageSize(ByteSource byteSource, JpegImagingParameters params): class JpegImageParser\tGet the size of the image described by the specified ByteSource.", "api_example": "import java.awt.Dimension;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\n\npublic class ImageSizeGetter {\n    public Dimension getImageSize(byte[] byteSource, JpegImagingParameters params) {\n        ImageParser<JpegImagingParameters> imageParser = new JpegImageParser();\n        try {\n\t\t\treturn imageParser.getImageSize(byteSource, params);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn null;\n    }\n}"}
{"api_description": "List<byte[]> collectRawImageData(ByteSource byteSource, TiffImagingParameters params): class TiffImageParser", "api_example": "import java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.bytesource.ByteSource;\nimport org.apache.commons.imaging.common.bytesource.ByteSourceFile;\nimport org.apache.commons.imaging.formats.tiff.TiffImageParser;\nimport org.apache.commons.imaging.formats.tiff.TiffImagingParameters;\n\npublic class TiffImageParserExample {\n\n    public static void main(String[] args) throws ImageReadException, IOException {\n        ByteSource byteSource = new ByteSourceFile(new File(\"path\")); // initialize with actual byte source\n        TiffImagingParameters params = new TiffImagingParameters(); // initialize with actual TiffImagingParameters\n        TiffImageParser parser = new TiffImageParser();\n        \n        List<byte[]> rawImages = parser.collectRawImageData(byteSource, params);        \n        // Use rawImages for further processing\n    }\n}"}
{"api_description": "TiffOutputDirectory getRootDirectory(): class TiffOutputSet", "api_example": "import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;\nimport org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;\n\npublic class TiffOutputExample {\n    public static void main(String[] args) {\n        TiffOutputSet tiffOutputSet = new TiffOutputSet();\n        \n        TiffOutputDirectory rootDirectory = tiffOutputSet.getRootDirectory();\n        \n        // API usage example\n        System.out.println(\"Root directory: \" + rootDirectory.toString());\n    }\n}"}
{"api_description": "static int convertYCbCrtoRGB(int Y, int Cb, int Cr): class PhotometricInterpreterYCbCr\tThis method converts a YUV (aka YCbCr) colorspace to a RGB colorspace.", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;\n\npublic class YCbCrExample {\n    public static void main(String[] args) {\n        int Y = 150;\n        int Cb = 50;\n        int Cr = 100;\n\n        int rgbValue = PhotometricInterpreterYCbCr.convertYCbCrtoRGB(Y, Cb, Cr);\n        System.out.println(\"RGB value: \" + rgbValue);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (InputStream is, String fileName): class Imaging\tGets all images specified by the InputStream (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class APIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        InputStream inputStream = new FileInputStream(new File(\"file-path\")); // initialize input stream\n        String fileName = \"example.jpg\";\n        List<BufferedImage> allImages = Imaging.getAllBufferedImages(inputStream, fileName);\n        // rest of the code\n    }\n}"}
{"api_description": "static String Imaging.dumpImageFile (File file): class Imaging\tWrite the ImageInfo and format-specific information for the image content of the specified file to a string.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File imageFile = new File(\"example.jpg\");\n        String imageInfo = Imaging.dumpImageFile(imageFile);\n        System.out.println(imageInfo);\n    }\n}"}
{"api_description": "byte[] getICCProfileBytes(File file): class ImageParser\tGet an array of bytes describing the International Color Consortium (ICC) specification for the color space of the image contained in the input file.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File inputFile = new File(\"image.jpg\");\n        ImageParser<JpegImagingParameters> imageParser = new JpegImageParser();\n        byte[] iccProfileBytes = imageParser.getICCProfileBytes(inputFile);\n        // Further processing of iccProfileBytes\n    }\n}"}
{"api_description": "Palette process(BufferedImage image, int maxColors, MedianCut medianCut): class MedianCutQuantizer", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.palette.LongestAxisMedianCut;\nimport org.apache.commons.imaging.palette.MedianCut;\nimport org.apache.commons.imaging.palette.MedianCutQuantizer;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageWriteException {\n        BufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB); // initialize with actual image\n        int maxColors = 256;\n        MedianCut medianCut = new LongestAxisMedianCut();\n\n        MedianCutQuantizer palette = new MedianCutQuantizer(false);\n        palette.process(image, maxColors, medianCut);\n    }\n}"}
{"api_description": "BufferedImage convertTosRGB(BufferedImage bi): class ColorTools", "api_example": "import java.awt.image.BufferedImage;\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n    \tBufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB);\n\n        ColorTools colorTools = new ColorTools();\n        BufferedImage sRGBImage = colorTools.convertTosRGB(image);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (File file): class Imaging\tGets all images specified by the file (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        File file = new File(\"path_to_file\");\n        List<BufferedImage> images = Imaging.getAllBufferedImages(file);\n    }\n}"}
{"api_description": "void interpretPixel(ImageBuilder imageBuilder, int[] samples, int x, int y): class PhotometricInterpreterYCbCr", "api_example": "import org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.common.ImageBuilder;\nimport org.apache.commons.imaging.formats.tiff.photometricinterpreters.PhotometricInterpreterYCbCr;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) throws ImageReadException, IOException {\n        ImageBuilder imageBuilder = new ImageBuilder(0, 0, false);\n        int[] samples = {255, 128, 64};\n        int x = 10;\n        int y = 5;\n        \n        PhotometricInterpreterYCbCr interpreter = new PhotometricInterpreterYCbCr(y, samples, y, y, y);\n        interpreter.interpretPixel(imageBuilder, samples, x, y);\n    }\n}"}
{"api_description": "BufferedImage convertTosRGB(BufferedImage bi): class ColorTools", "api_example": "import java.awt.image.BufferedImage;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n\tpublic static void main(String[] args) {\n        BufferedImage inputImage = new BufferedImage(0, 0, BufferedImage.TYPE_3BYTE_BGR);\n        ColorTools colorTools = new ColorTools();\n        BufferedImage sRGBImage = colorTools.convertTosRGB(inputImage);\n    }\n}"}
{"api_description": "ColorModel deriveColorModel(BufferedImage bi, ColorSpace cs): class ColorTools", "api_example": "import java.awt.color.ColorSpace;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ColorModel;\n\nimport org.apache.commons.imaging.ColorTools;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);\n        ColorTools tools = new ColorTools();\n        ColorModel colorModel = tools.deriveColorModel(image, colorSpace);\n    }\n}"}
{"api_description": "static BufferedImage Imaging.getBufferedImage (InputStream is, String fileName): class Imaging\tReads the first image from an InputStream.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        InputStream inputStream;\n\t\ttry {\n\t\t\tinputStream = new FileInputStream(new File(\"file-path\"));\n\t        String fileName = \"example.jpg\";\n\t        BufferedImage image = Imaging.getBufferedImage(inputStream, fileName);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "float getMeanFound(): class PhotometricInterpreterFloat\tGet the mean of the values found while processing", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        PhotometricInterpreterFloat interpreter = new PhotometricInterpreterFloat(0, 0);\n        float mean = interpreter.getMeanFound();\n        System.out.println(\"Mean found: \" + mean);\n    }\n}"}
{"api_description": "float getMinFound(): class PhotometricInterpreterFloat\tGets the minimum value found while rendering the image", "api_example": "import org.apache.commons.imaging.formats.tiff.photometricinterpreters.floatingpoint.PhotometricInterpreterFloat;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        PhotometricInterpreterFloat interpreter = new PhotometricInterpreterFloat(0, 0);\n        float min = interpreter.getMinFound();\n        System.out.println(\"Min found: \" + min);\n    }\n}"}
{"api_description": "List<BufferedImage> getAllBufferedImages(byte[] bytes): class ImageParser\tGets all images specified by the byte array (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageParser;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.formats.jpeg.JpegImageParser;\nimport org.apache.commons.imaging.formats.jpeg.JpegImagingParameters;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        ImageParser<JpegImagingParameters> parser = new JpegImageParser();\n        byte[] imageBytes = { /* byte array data */ };\n        try {\n\t\t\tList<BufferedImage> images = parser.getAllBufferedImages(imageBytes);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "int getDelay(): class GifImageMetadataItem", "api_example": "import org.apache.commons.imaging.formats.gif.GifImageMetadataItem;\n\npublic class ImageAPIExample {\n    public void processGifMetadata(GifImageMetadataItem metadataItem) {\n        int delay = metadataItem.getDelay();\n        System.out.println(\"Delay: \" + delay);\n    }\n}"}
{"api_description": "static List<BufferedImage> Imaging.getAllBufferedImages (File file): class Imaging\tGets all images specified by the file (some formats may include multiple images within a single data source).", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        File file = new File(\"path_to_file\");\n        try {\n\t\t\tList<BufferedImage> images = Imaging.getAllBufferedImages(file);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static FormatCompliance Imaging.getFormatCompliance (File file): class Imaging\tAttempts to determine the image format of the specified data and evaluates its format compliance.", "api_example": "import java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.imaging.FormatCompliance;\nimport org.apache.commons.imaging.ImageReadException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n    public static void main(String[] args) {\n        File imageFile = new File(\"example.jpg\");\n        FormatCompliance compliance;\n\t\ttry {\n\t\t\tcompliance = Imaging.getFormatCompliance(imageFile);\n\t        System.out.println(\"Image format compliance: \" + compliance);\n\t\t} catch (ImageReadException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "static void Imaging.writeImage (BufferedImage src, OutputStream os, ImageFormats format): class Imaging\tWrites the content of a BufferedImage to an OutputStream using the specified image format.", "api_example": "import java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.apache.commons.imaging.ImageFormats;\nimport org.apache.commons.imaging.ImageWriteException;\nimport org.apache.commons.imaging.Imaging;\n\npublic class ImageAPIExample {\n\n    public static void main(String[] args) {\n        try {\n        \tBufferedImage image = new BufferedImage(0, 0, BufferedImage.TYPE_INT_RGB);\n            OutputStream outputStream = new FileOutputStream(new File(\"path\"));\n            ImageFormats format = ImageFormats.PNG;\n\t\t\tImaging.writeImage(image, outputStream, format);\n\t\t} catch (ImageWriteException | IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "void dump(BufferedImage src): class ImageDump", "api_example": "import java.awt.image.BufferedImage;\n\npublic class ImageDump {\n    public static void main(String[] args) {\n        BufferedImage image = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);\n        ImageDump imageDump = new ImageDump();\n        imageDump.dump(image);\n    }\n\n    public void dump(BufferedImage src) {\n        // implementation\n    }\n}"}
{"api_description": "========== OpenNLP Begin ==========", "api_example": ""}
{"api_description": "TokenizerModel model = TokenizerModel(modelIn): class TokenizerME\t;", "api_example": "import opennlp.tools.tokenize.TokenizerME;\nimport opennlp.tools.tokenize.TokenizerModel;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\n\npublic class TokenizerExample {\n\n    public static void main(String[] args) {\n        try {\n            InputStream modelIn = new FileInputStream(\"en-token.bin\");\n            TokenizerModel model = new TokenizerModel(modelIn);\n            TokenizerME tokenizer = new TokenizerME(model);\n            \n            // Use the tokenizer here\n            String[] tokens = tokenizer.tokenize(\"Example sentence to tokenize.\");\n            \n            // Print the tokens\n            for (String token : tokens) {\n                System.out.println(token);\n            }\n            \n            modelIn.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "Tokenizer tokenizer = new TokenizerME(model): class TokenizerME\t;", "api_example": "import opennlp.tools.tokenize.TokenizerME;\nimport opennlp.tools.tokenize.TokenizerModel;\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        TokenizerModel model;\n        TokenizerME tokenizer;\n\n        try {\n            model = new TokenizerModel(new FileInputStream(\"en-token.bin\"));\n            tokenizer = new TokenizerME(model);\n\n            String[] tokens = tokenizer.tokenize(\"This is a sample sentence.\");\n            for (String token : tokens) {\n                System.out.println(token);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "public class englishStemmer extends Object This class implements the stemming algorithm defined by a snowball script. Generated by Snowball (build from 867c4ec70debd4daa7fb4d5a9f7759b47887d0b9): class englishStemmer\t- https://github.com/snowballstem/snowball", "api_example": "import org.tartarus.snowball.ext.EnglishStemmer;\n\npublic class Example {\n    public static void main(String[] args) {\n        EnglishStemmer stemmer = new EnglishStemmer();\n        stemmer.setCurrent(\"running\");\n        stemmer.stem();\n        String stemmedWord = stemmer.getCurrent();\n        System.out.println(stemmedWord);\n    }\n}"}
{"api_description": "Map<String,Double> scoreMap(String[] text): class DocumentCategorizer\tRetrieves a Map in which the key is the category name and the value is the score.", "api_example": "import java.util.Map;\n\npublic class DocumentCategorizer {\n    public Map<String, Double> scoreMap(String[] text) {\n        // API usage example\n        String[] sampleText = {\"sample\", \"text\"};\n        DocumentCategorizer categorizer = new DocumentCategorizer();\n        Map<String, Double> result = categorizer.scoreMap(sampleText);\n        \n        return result;\n    }\n}"}
{"api_description": "Collection<String> extractFeatures(String[] text, Map<String,Object> extraInfo): class NGramFeatureGenerator\tExtracts features from given text fragments.", "api_example": "import java.util.Collection;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] text = {\"This is a test\", \"Another test\"};\n        Map<String, Object> extraInfo = null;\n\n        Collection<String> features = extractFeatures(text, extraInfo);\n    }\n\n    public static Collection<String> extractFeatures(String[] text, Map<String, Object> extraInfo) {\n        // Implement feature extraction logic here\n        return null;\n    }\n}"}
{"api_description": "static List<Event> generateEvents(String[] sentence, String[] outcomes, NameContextGenerator cg): class NameFinderEventStream\tGenerates events for each token in a sentence with the specified outcomes using the specified NameContextGenerator.", "api_example": "import java.util.List;\n\nimport opennlp.tools.ml.model.Event;\nimport opennlp.tools.namefind.DefaultNameContextGenerator;\nimport opennlp.tools.namefind.NameContextGenerator;\nimport opennlp.tools.namefind.NameFinderEventStream;\n\npublic class EventGenerator {\n    public static void main(String[] args) {\n        String[] sentence = {\"John\", \"Smith\", \"is\", \"a\", \"software\", \"engineer\"};\n        String[] outcomes = {\"PER\", \"PER\", \"O\", \"O\", \"O\", \"O\"};\n        NameContextGenerator cg = new DefaultNameContextGenerator();\n\n        List<Event> events = NameFinderEventStream.generateEvents(sentence, outcomes, cg);\n    }\n}"}
{"api_description": "double[] categorize(String[] text, Map<String,Object> extraInformation): class DocumentCategorizer\tCategorizes the given text provided as tokens along with the provided extraInformation.", "api_example": "import java.util.Map;\n\nimport opennlp.tools.doccat.DocumentCategorizerME;\n\npublic class Example {\n    public static void main(String[] args) {\n        String[] text = {\"This\", \"is\", \"a\", \"test\"};\n        Map<String, Object> extraInformation = null;\n\n        DocumentCategorizerME categorizer = new DocumentCategorizerME(null);\n        double[] result = categorizer.categorize(text, extraInformation);\n    }\n}"}
{"api_description": "Collection<String> extractFeatures(String[] text, Map<String,Object> extraInformation): class FeatureGenerator\tExtracts features from given text fragments.", "api_example": "import java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport opennlp.tools.doccat.BagOfWordsFeatureGenerator;\nimport opennlp.tools.doccat.FeatureGenerator;\n\npublic class ExampleClass {\n    public static void main(String[] args) {\n        String[] text = {\"This is a sample text\", \"Another sample text\"};\n        Map<String, Object> extraInformation = new HashMap<>();\n        extraInformation.put(\"key1\", \"value1\");\n        extraInformation.put(\"key2\", 123);\n        \n        // FeatureGenerator, All Known Implementing Classes: BagOfWordsFeatureGenerator, NGramFeatureGenerator\n        FeatureGenerator generator = new BagOfWordsFeatureGenerator();\n        Collection<String> extractedFeatures = generator.extractFeatures(text, extraInformation);\n        \n        for (String feature : extractedFeatures) {\n            System.out.println(feature);\n        }\n    }\n}"}
{"api_description": "double[] categorize(String[] text): class DocumentCategorizer\tCategorizes the given text, provided in separate tokens.", "api_example": "import opennlp.tools.doccat.DoccatModel;\nimport opennlp.tools.doccat.DocumentCategorizer;\nimport opennlp.tools.doccat.DocumentCategorizerME;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] text = {\"example\", \"text\", \"for\", \"categorization\"};\n        DoccatModel model = null;\n        DocumentCategorizer categorizer = new DocumentCategorizerME(model);\n        double[] result = categorizer.categorize(text);\n        // Do something with the categorization result\n    }\n}"}
{"api_description": "static ParserModel train(String languageCode, ObjectStream<Parse> parseSamples, HeadRules rules, TrainingParameters mlParams): class Parser\tStarts a training of a ParserModel.", "api_example": "import java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\nimport opennlp.tools.parser.HeadRules;\nimport opennlp.tools.parser.Parse;\nimport opennlp.tools.parser.ParserModel;\nimport opennlp.tools.parser.treeinsert.Parser;\nimport opennlp.tools.util.ObjectStream;\nimport opennlp.tools.util.TrainingParameters;\n\npublic class ParserExample {\n    public static void main(String[] args) throws FileNotFoundException, IOException {\n        String languageCode = \"en\";\n        ObjectStream<Parse> parseSamples = null; // initialize with actual parse samples\n        HeadRules rules = new opennlp.tools.parser.lang.en.HeadRules(new FileReader(\"\")); // initialize with actual head rules\n        TrainingParameters mlParams = new TrainingParameters(); // initialize with actual machine learning parameters\n\n        try {\n\t\t\tParserModel model = Parser.train(languageCode, parseSamples, rules, mlParams);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n    }\n}"}
{"api_description": "ParserModel(String languageCode, MaxentModel buildModel, MaxentModel checkModel, POSModel parserTagger, ChunkerModel chunkerTagger, HeadRules headRules, ParserType type, Map<String,String> manifestInfoEntries): class ParserModel\tInitializes a ParserModel instance via given parameters.", "api_example": "import java.io.File;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport opennlp.tools.chunker.ChunkerModel;\nimport opennlp.tools.ml.maxent.GISModel;\nimport opennlp.tools.ml.model.MaxentModel;\nimport opennlp.tools.parser.ParserModel;\nimport opennlp.tools.parser.ParserType;\nimport opennlp.tools.parser.lang.en.HeadRules;\nimport opennlp.tools.postag.POSModel;\n\npublic class ParserModelExample {\n\n    public static void main(String[] args) throws IOException {\n        String languageCode = \"en\";\n        MaxentModel buildModel = new GISModel(null, args, args);\n        MaxentModel checkModel = new GISModel(null, args, args);\n        POSModel parserTagger = new POSModel(new File(\"your-file-path\"));\n        ChunkerModel chunkerTagger = new ChunkerModel(new File(\"your-file-path\"));\n        HeadRules headRules = new HeadRules(null);\n        ParserType type = ParserType.CHUNKING;\n        Map<String, String> manifestInfoEntries = new HashMap<>();\n\n        ParserModel parserModel = new ParserModel(languageCode, buildModel, checkModel, parserTagger, chunkerTagger, headRules, type, manifestInfoEntries);\n    }\n}"}
{"api_description": "static SentenceModel train(String languageCode, ObjectStream<SentenceSample> samples, SentenceDetectorFactory sdFactory, TrainingParameters mlParams): class SentenceDetectorME\tStarts a training of a SentenceModel with the given parameters.", "api_example": "import opennlp.tools.sentdetect.SentenceDetectorME;\nimport opennlp.tools.sentdetect.SentenceModel;\nimport opennlp.tools.sentdetect.SentenceSample;\nimport opennlp.tools.util.ObjectStream;\nimport opennlp.tools.util.TrainingParameters;\n\npublic class SentenceDetectorExample {\n\n    public static void main(String[] args) {\n\n        // Define language code\n        String languageCode = \"en\";\n\n        // Define training data\n        ObjectStream<SentenceSample> trainingData = null; // Initialize with actual training data\n\n        // Create SentenceDetectorFactory\n        SentenceDetectorFactory sdFactory = null; // Initialize with actual SentenceDetectorFactory object\n\n        // Define machine learning parameters\n        TrainingParameters mlParams = new TrainingParameters();\n        mlParams.put(TrainingParameters.ITERATIONS_PARAM, 100);\n        mlParams.put(TrainingParameters.CUTOFF_PARAM, 5);\n\n        // Train SentenceModel\n        try {\n            SentenceModel model = SentenceDetectorME.train(languageCode, trainingData, sdFactory, mlParams);\n            // Use the trained model for sentence detection\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "", "api_example": ""}
{"api_description": "========== DOM Begin ==========", "api_example": ""}
{"api_description": "void save(String fileName): class PDDocument\tSave the document to a file using default compression.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.IOException;\n\npublic class PdfDocumentHandler {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        try {\n            // Add content to the document\n\n            // Save the document to a file using default compression\n            document.save(\"output.pdf\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                document.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"}
{"api_description": "static PDImageXObject JPEGFactory.createFromImage(PDDocument document, BufferedImage image, float quality, int dpi): class JPEGFactory\tCreates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        BufferedImage image = null; // initialize with actual image data\n        float quality = 0.8f;\n        int dpi = 300;\n\n        try {\n            JPEGFactory.createFromImage(document, image, quality, dpi);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "String getF(): class PDActionLaunch\tThis will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch;\n\npublic class PDActionLaunchExample {\n    public static void main(String[] args) {\n        PDActionLaunch action = new PDActionLaunch();\n        String fileName = action.getF();\n        System.out.println(\"File name to be launched: \" + fileName);\n    }\n}"}
{"api_description": "[Method Summary] void initializeEventListeners(SVGDocument doc): class EventListenerInitializer\tThis method is called by the SVG viewer when the scripts are loaded to register the listener needed.", "api_example": "import org.w3c.dom.svg.SVGDocument;\n\npublic class MySVGViewer {\n\n    private SVGDocument svgDoc;\n\n    public MySVGViewer(SVGDocument svgDoc) {\n        this.svgDoc = svgDoc;\n    }\n\n    public void initializeEventListeners(SVGDocument doc) {\n        EventListenerInitializer eventListenerInitializer = new EventListenerInitializer();\n        eventListenerInitializer.initializeEventListeners(doc);\n    }\n\n    private class EventListenerInitializer {\n        public void initializeEventListeners(SVGDocument doc) {\n            // logic to register event listeners\n        }\n    }\n}"}
{"api_description": "Node renameNode(Node n, String namespaceURI, String qualifiedName): class Document\tRename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.", "api_example": "import org.w3c.dom.Node;\nimport org.w3c.dom.Document;\n\npublic class APIExample {\n\n    public static void main(String[] args) {\n\n        // Create an instance of Document\n        Document document = createDocument();\n\n        // Find the node to be renamed\n        Node node = findNodeToRename(document);\n\n        // Rename the node with the specified namespaceURI and qualifiedName\n        Node renamedNode = document.renameNode(node, \"http://www.example.com\", \"newName\");\n\n        // Print the updated node information\n        System.out.println(\"Renamed Node: \" + renamedNode);\n    }\n\n    private static Document createDocument() {\n        // Implement logic to create and return a Document instance\n        return null;\n    }\n\n    private static Node findNodeToRename(Document document) {\n        // Implement logic to find and return a node to be renamed from the Document\n        return null;\n    }\n}"}
{"api_description": "Text createTextNode(String data): class Document\tCreates a Text node given the specified string.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Text;\n\npublic class APITest {\n    public static void main(String[] args) {\n        String data = \"Hello, World!\";\n        \n        Document document = createDocument();\n        Text textNode = document.createTextNode(data);\n        \n        System.out.println(textNode.getTextContent());\n    }\n    \n    private static Document createDocument() {\n        // Create and return a Document\n        return null;\n    }\n}"}
{"api_description": "void setPrefix(String prefix): class Node\tThe namespace prefix of this node, or null if it is unspecified.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = null;\n        String prefix = \"xml\";\n        \n        node.setPrefix(prefix);\n    }\n}"}
{"api_description": "boolean hasAttributes(): class Node\tReturns whether this node (if it is an element) has any attributes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = null; // Placeholder for the Node object\n        \n        boolean hasAttributes = node.hasAttributes();\n        System.out.println(\"Has attributes: \" + hasAttributes);\n    }\n}"}
{"api_description": "void startElement(String namespaceURI, String localName, String qName, Attributes atts): class CategoryDatasetHandler\tThe start of an element.", "api_example": "import org.xml.sax.Attributes;\n\npublic class CategoryDatasetHandler {\n    \n    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) {\n        // Code implementation\n        \n        // Example usage:\n        System.out.println(\"Element start: namespaceURI=\" + namespaceURI + \", localName=\" + localName + \", qName=\" + qName);\n        System.out.println(\"Attributes: \" + atts.getLength() + \" attributes\");\n        for (int i = 0; i < atts.getLength(); i++) {\n            String attributeName = atts.getQName(i);\n            String attributeValue = atts.getValue(i);\n            System.out.println(\"Attribute: \" + attributeName + \" = \" + attributeValue);\n        }\n    }\n}"}
{"api_description": "Attr createAttributeNS(String namespaceURI, String qualifiedName): class Document\tCreates an attribute of the given qualified name and namespace URI.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Attr;\n\npublic class Example {\n    public static void main(String[] args) {\n        Document document = null;\n        String namespaceURI = \"http://www.example.com/namespace\";\n        String qualifiedName = \"example:attribute\";\n        \n        Attr attribute = document.createAttributeNS(namespaceURI, qualifiedName);\n    }\n}"}
{"api_description": "static Set<String> getAvailableIDs(): class DateTimeZone\tGets all the available IDs supported.", "api_example": "import org.joda.time.DateTimeZone;\nimport java.util.Set;\n\npublic class Example {\n    public static void main(String[] args) {\n        Set<String> availableIDs = DateTimeZone.getAvailableIDs();\n        System.out.println(availableIDs);\n    }\n}"}
{"api_description": "String getDocumentURI(): class Document\tThe location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument.", "api_example": "import org.w3c.dom.Document;\n\npublic class DocumentExample {\n    public static void main(String[] args) {\n        Document document = getDocument();\n        String documentURI = document.getDocumentURI();\n        System.out.println(\"Document URI: \" + documentURI);\n    }\n\n    private static Document getDocument() {\n        // Code to obtain or create a Document object\n        return null;\n    }\n}"}
{"api_description": "Element getDocumentElement(): class Document\tThis is a convenience attribute that allows direct access to the child node that is the document element of the document.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class Example {\n    public static void main(String[] args) {\n        Document document = null;  // Initialize with your own Document object\n        \n        // Get the document element\n        Element documentElement = document.getDocumentElement();\n        \n        // Do something with the document element\n        // ...\n    }\n}"}
{"api_description": "NodeList getElementsByTagName(String tagname): class Document\tReturns a NodeList of all the Elements in document order with a given tag name and are contained in the document.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize a Document object\n        Document document = null; \n        \n        // Get a NodeList of all the Elements with tag name \"div\" in document order\n        NodeList elements = document.getElementsByTagName(\"div\");\n    }\n}"}
{"api_description": "PeriodFormatterBuilder appendLiteral(String text): class PeriodFormatterBuilder\tInstructs the printer to emit specific text, and the parser to expect it.", "api_example": "import org.joda.time.format.PeriodFormatterBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        PeriodFormatterBuilder builder = new PeriodFormatterBuilder();\n        builder.appendLiteral(\"Hello, World!\");\n\n        // Rest of the code...\n    }\n}"}
{"api_description": "String getXmlEncoding(): class Entity\tAn attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity.", "api_example": "import org.w3c.dom.Entity;\n\npublic class Example {\n    public String getXmlEncoding() {\n        // Implement your code here\n        return null;\n    }\n}"}
{"api_description": "static DateTimeFormatter timeElementParser(): class ISODateTimeFormat\tReturns a generic ISO time parser.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Example {\n  \n  public static void main(String[] args) {\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.timeElementParser();\n    // usage code here\n  }\n  \n}"}
{"api_description": "Node cloneNode(boolean deep): class Node\tReturns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Node\n        Node originalNode = createNode();\n        \n        // Clone the originalNode\n        Node clonedNode = originalNode.cloneNode(true);\n        \n        // Print the clonedNode\n        System.out.println(\"Cloned Node: \" + clonedNode);\n    }\n    \n    private static Node createNode() {\n        // Code to create and return a new Node\n        return null;\n    }\n}"}
{"api_description": "Node importNode(Node importedNode, boolean deep): class Document\tImports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\npublic class Example {\n\n    public static void main(String[] args) {\n        // Instantiate two Document objects\n        Document sourceDocument = createSourceDocument();\n        Document targetDocument = createTargetDocument();\n\n        // Import a node from sourceDocument to targetDocument\n        Node importedNode = targetDocument.importNode(sourceDocument.getDocumentElement(), true);\n        \n        // Print the imported node\n        System.out.println(importedNode);\n    }\n    \n    private static Document createSourceDocument() {\n        // Create and return a source Document object\n        Document sourceDocument = null;\n        // Implement the logic to create the source Document\n        \n        return sourceDocument;\n    }\n    \n    private static Document createTargetDocument() {\n        // Create and return a target Document object\n        Document targetDocument = null;\n        // Implement the logic to create the target Document\n        \n        return targetDocument;\n    }\n}"}
{"api_description": "[Method Summary] Object clone(): class PublicCloneable\tReturns a clone of the object.", "api_example": "import java.lang.Cloneable;\n\npublic class PublicCloneable implements Cloneable {\n    \n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n        }\n    }\n}"}
{"api_description": "Element getOwnerElement(): class Attr\tThe Element node this attribute is attached to or null if this attribute is not in use.", "api_example": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Element element = null;\n        \n        Attr attr = element.getAttributeNode(\"attributeName\");\n        Element ownerElement = attr.getOwnerElement();\n        \n        System.out.println(\"Owner Element: \" + ownerElement);\n    }\n}"}
{"api_description": "void normalize(): class Node\tPuts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize the Node\n        Node node = null;\n\n        // Normalize the Node\n        node.normalize();\n    }\n}"}
{"api_description": "Attr getAttributeNode(String name): class Element\tRetrieves an attribute node by name.", "api_example": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\n\npublic class Example {\n    public static void main(String[] args) {\n        Element element = getRootElement();\n        Attr attributeNode = element.getAttributeNode(\"attributeName\");\n        System.out.println(attributeNode);\n    }\n\n    private static Element getRootElement() {\n        // TODO: Implement code to retrieve the root element\n        return null;\n    }\n}"}
{"api_description": "NodeList getElementsByTagNameNS(String namespaceURI, String localName): class Element\tReturns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.xml.sax.InputSource;\nimport java.io.StringReader;\n\npublic class XmlNamespaceExample {\n    public static void main(String[] args) {\n        try {\n            String xmlContent = \"<root xmlns:example=\\\"http://www.example.com\\\">\"\n                              + \"<example:child>Content 1</example:child>\"\n                              + \"<example:child>Content 2</example:child>\"\n                              + \"<child>Content 3</child>\"\n                              + \"</root>\";\n                              \n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document document = builder.parse(new InputSource(new StringReader(xmlContent)));\n            \n            String namespaceURI = \"http://www.example.com\";\n            String localName = \"child\";\n            NodeList nodeList = document.getElementsByTagNameNS(namespaceURI, localName);\n            \n            for (int i = 0; i < nodeList.getLength(); i++) {\n                Element element = (Element) nodeList.item(i);\n                System.out.println(\"Found element: \" + element.getTextContent());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "NamedNodeMap getAttributes(): class Node\tA NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic class XmlAttributeExample {\n    public static void main(String[] args) {\n        try {\n            // Initialize a DocumentBuilderFactory\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n\n            // Parse an XML file (replace \"example.xml\" with a valid XML file path)\n            Document document = builder.parse(\"example.xml\");\n\n            // Get the root element\n            Element rootElement = document.getDocumentElement();\n\n            // Get attributes from the root element\n            NamedNodeMap attributes = rootElement.getAttributes();\n\n            // Iterate over the attributes and print them\n            for (int i = 0; i < attributes.getLength(); i++) {\n                Node attribute = attributes.item(i);\n                System.out.println(attribute.getNodeName() + \": \" + attribute.getNodeValue());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "Node removeNamedItem(String name): class NamedNodeMap\tRemoves a node specified by name.", "api_example": "import org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize a NamedNodeMap object\n        NamedNodeMap nodeMap = null;\n        \n        // Call the removeNamedItem method to remove a node by name\n        Node removedNode = nodeMap.removeNamedItem(\"name\");\n    }\n}"}
{"api_description": "String getValue(): class Attr\tOn retrieval, the value of the attribute is returned as a string.", "api_example": "import org.w3c.dom.Attr;\n\npublic class UsageExample {\n\n    public static void main(String[] args) {\n        \n        Attr attribute = null; // Initialize the attribute\n        \n        String value = attribute.getValue(); // Retrieve the value of the attribute\n        \n        System.out.println(value); // Print the value of the attribute\n    }\n}"}
{"api_description": "boolean hasAttributeNS(String namespaceURI, String localName): class Element\tReturns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic class APIUsageExample {\n\n    public static void main(String[] args) {\n        try {\n            // Initialize DocumentBuilder\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            \n            // Create a new XML Document\n            Document document = builder.newDocument();\n            \n            // Create an element with attributes\n            Element element = document.createElement(\"exampleElement\");\n            element.setAttributeNS(\"http://www.example.com/ns\", \"example:attr\", \"value\");\n            \n            // Define namespace URI and local name\n            String namespaceURI = \"http://www.example.com/ns\";\n            String localName = \"attr\";\n            \n            // Check if the element has the specified attribute\n            boolean hasAttribute = element.hasAttributeNS(namespaceURI, localName);\n            System.out.println(\"Has attribute: \" + hasAttribute); // Output: Has attribute: true\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "String getAttributeNS(String namespaceURI, String localName): class Element\tRetrieves an attribute value by local name and namespace URI.", "api_example": "import org.w3c.dom.Element;\n\npublic class APIExample {\n  \n  public static void main(String[] args) {\n    // Create an instance of Element\n    Element element = getElement(); \n    \n    // Retrieve an attribute value by local name and namespace URI\n    String namespaceURI = \"http://www.example.com\";\n    String localName = \"attributeName\";\n    \n    String attributeValue = element.getAttributeNS(namespaceURI, localName);\n    \n    // Print the attribute value\n    System.out.println(\"Attribute Value: \" + attributeValue);\n  }\n  \n  private static Element getElement() {\n    // Implementation to get the Element object\n    // This can be your custom implementation or obtained from another API\n    Element element = null;\n    // Code to retrieve the element\n    \n    return element;\n  }\n}"}
{"api_description": "String getPrefix(): class Node\tThe namespace prefix of this node, or null if it is unspecified.", "api_example": "import org.w3c.dom.Node;\n\npublic class NodeExample {\n    \n    public static void main(String[] args) {\n        Node node = null; // assume node is initialized somewhere in the code\n        \n        String prefix = node.getPrefix();\n        System.out.println(\"Node prefix: \" + prefix);\n    }\n}"}
{"api_description": "String lookupPrefix(String namespaceURI): class Node\tLook up the prefix associated to the given namespace URI, starting from this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Node node = null; // Initialize the node\n        \n        String namespaceURI = \"http://www.example.com\"; // Initialize the namespace URI\n        \n        String prefix = node.lookupPrefix(namespaceURI); // Look up the prefix associated with the given namespace URI\n        \n        System.out.println(\"Prefix: \" + prefix); // Print the prefix\n    }\n}"}
{"api_description": "NodeList getElementsByTagNameNS(String namespaceURI, String localName): class Document\tReturns a NodeList of all the Elements with a given local name and namespace URI in document order.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\n\npublic class APIUsageExample {\n    public static void main(String[] args) {\n        Document document = null; // Replace with actual Document object\n\n        String namespaceURI = \"http://www.example.com/namespace\";\n        String localName = \"elementName\";\n\n        NodeList elements = document.getElementsByTagNameNS(namespaceURI, localName);\n        \n        // Use the NodeList elements as per your requirements\n        // ...\n    }\n}"}
{"api_description": "Element createElement(String tagName): class Document\tCreates an element of the type specified.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Document document = null; // initialize with an instance of Document\n\n        String tagName = \"div\"; // the tag name you want to create\n\n        Element element = document.createElement(tagName);\n    }\n}"}
{"api_description": "String getTextContent(): class Node\tThis attribute returns the text content of this node and its descendants.", "api_example": "import org.w3c.dom.Node;\n\npublic class NodeExample {\n    private Node node;\n\n    public NodeExample(Node node) {\n        this.node = node;\n    }\n\n    public String getTextContent() {\n        return node.getTextContent();\n    }\n}"}
{"api_description": "Node getLastChild(): class Node\tThe last child of this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class XMLParser {\n\n  private Node rootNode;\n\n  public XMLParser(Node rootNode) {\n    this.rootNode = rootNode;\n  }\n\n  public Node getLastChild() {\n    return rootNode.getLastChild();\n  }\n}"}
{"api_description": "String getLocalName(): class Node\tReturns the local part of the qualified name of this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n\n    public void getNodeLocalName(Node node) {\n        String localName = node.getLocalName();\n        System.out.println(\"Local Name: \" + localName);\n    }\n\n    public static void main(String[] args) {\n        Node node = null; // initialize the node variable with appropriate node object.\n        \n        Example example = new Example();\n        example.getNodeLocalName(node);\n    }\n}"}
{"api_description": "boolean hasChildNodes(): class Node\tReturns whether this node has any children.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = getSomeNode(); // Get a node from somewhere\n\n        boolean hasChildren = node.hasChildNodes();\n        System.out.println(\"Node has children: \" + hasChildren);\n    }\n\n    private static Node getSomeNode() {\n        // TODO: Add implementation to obtain a Node object\n        return null;\n    }\n}"}
{"api_description": "", "api_example": ""}