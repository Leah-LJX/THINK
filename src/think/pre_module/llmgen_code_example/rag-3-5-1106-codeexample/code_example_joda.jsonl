{"api_description": "DateTimeZone getZone(String id): class ZoneInfoProvider\tIf an error is thrown while loading zone data, the exception is logged to system error and null is returned for this and all future requests.", "api_example": "import org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeZone dtz = DateTimeZone.getDefault();\n        System.out.println(\"Default time zone: \" + dtz.getID());\n\n        DateTimeZone customZone = DateTimeZone.forID(\"Europe/Paris\");\n        System.out.println(\"Custom time zone: \" + customZone.getID());\n    }\n}"}
{"api_description": "TimeOfDay(Object instant): class TimeOfDay\tDeprecated. Constructs a TimeOfDay from an Object that represents a time.", "api_example": "import org.joda.time.TimeOfDay;\nimport org.joda.time.DateTime;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTime dateTime = new DateTime(2022, 3, 14, 13, 30);\n        TimeOfDay timeOfDay = new TimeOfDay(dateTime.toDate());\n    }\n}"}
{"api_description": "abstract int[] set(ReadablePartial instant, int fieldIndex, int[] values, String text, Locale locale): class DateTimeField\tSets a value in the milliseconds supplied from a human-readable, text value.", "api_example": "import org.joda.time.DateTimeField;\nimport org.joda.time.ReadablePartial;\nimport java.util.Locale;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeField dateTimeField = null; // initialize with appropriate DateTimeField instance\n        ReadablePartial instant = null; // initialize with appropriate ReadablePartial instance\n        int fieldIndex = 0; // set field index\n        int[] values = null; // initialize with appropriate values\n        String text = \"example\"; // set human-readable text\n        Locale locale = Locale.US; // set appropriate Locale\n\n        int[] result = dateTimeField.set(instant, fieldIndex, values, text, locale);\n        // Use the result as needed\n    }\n}"}
{"api_description": "abstract int[] get(ReadablePeriod period, long duration): class Chronology\tGets the values of a period from an interval.", "api_example": "import org.joda.time.Chronology;\nimport org.joda.time.ReadablePeriod;\n\npublic class ChronologyUsage {\n    public static void main(String[] args) {\n        Chronology chronology = null; // Initialize with the desired Chronology\n        ReadablePeriod period = null; // Initialize with the desired ReadablePeriod\n        long duration = 1000; // Initialize with the desired duration\n        \n        int[] values = chronology.get(period, duration);\n        // Make use of the 'values' array obtained from the get method\n    }\n}"}
{"api_description": "DateTime(long instant,\tDateTimeZone zone): class DateTime\tConstructs an instance set to the milliseconds from 1970-01-01T00:00:00Z\t using ISOChronology in the specified time zone.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        long instant = System.currentTimeMillis();\n        DateTimeZone zone = DateTimeZone.getDefault();\n        \n        DateTime dateTime = new DateTime(instant, zone);\n    }\n}"}
{"api_description": "static LocalDateTime now(): class LocalDateTime\tObtains a LocalDateTime set to the current system millisecond time using ISOChronology in the default time zone.", "api_example": "import java.time.LocalDateTime;\n\npublic class Main {\n    public static void main(String[] args) {\n        LocalDateTime currentDateTime = LocalDateTime.now();\n        System.out.println(\"Current date and time: \" + currentDateTime);\n    }\n}"}
{"api_description": "String toString(): class AbstractDuration\tGets the value as a String in the ISO8601 duration format including only seconds and milliseconds.", "api_example": "import java.time.Duration;\n\npublic class Main {\n    public static void main(String[] args) {\n        Duration duration = Duration.ofSeconds(65, 500000000);\n        String durationString = duration.toString();\n        System.out.println(\"Duration in ISO8601 format: \" + durationString);\n    }\n}"}
{"api_description": "String toString(): class ReadableInstant\tGet the value as a String in a recognisable ISO8601 format.", "api_example": "import org.joda.time.ReadableInstant;\n\npublic class Example {\n    public static void main(String[] args) {\n        ReadableInstant instant = null; // Initialize with an actual ReadableInstant object\n        String isoString = instant.toString();\n        System.out.println(\"ISO8601 format: \" + isoString);\n    }\n}"}
{"api_description": "String toString(): class AbstractDateTime\tOutput the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZZ).", "api_example": "import org.joda.time.DateTime;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTime dateTime = new DateTime(2022, 12, 31, 23, 59, 59, 999);\n        String iso8601String = dateTime.toString();\n        System.out.println(\"ISO8601 Format: \" + iso8601String);\n    }\n}"}
{"api_description": "String toString(): class DateRange\tReturns a string representing the date range (useful for debugging).", "api_example": "import java.util.Date;\n\npublic class DateRange {\n    private Date startDate;\n    private Date endDate;\n\n    // Constructor\n    public DateRange(Date startDate, Date endDate) {\n        this.startDate = startDate;\n        this.endDate = endDate;\n    }\n\n    public String toString() {\n        return \"Date Range: \" + startDate.toString() + \" - \" + endDate.toString();\n    }\n\n    public static void main(String[] args) {\n        Date start = new Date();\n        Date end = new Date();\n        DateRange dateRange = new DateRange(start, end);\n        System.out.println(dateRange.toString());\n    }\n}"}
{"api_description": "protected Chronology checkChronology(Chronology chronology): class BaseDateTime\tChecks the specified chronology before storing it, potentially altering it.", "api_example": "import java.time.chrono.Chronology;\n\npublic class BaseDateTime {\n    protected Chronology chronology;\n\n    public BaseDateTime(Chronology chronology){\n        this.chronology = checkChronology(chronology);\n    }\n\n    protected Chronology checkChronology(Chronology chronology){\n        // implementation to check and potentially alter the specified chronology\n        return chronology;\n    }\n}"}
{"api_description": "static Chronology getInstantChronology(ReadableInstant instant): class DateTimeUtils\tGets the chronology from the specified instant object handling null.", "api_example": "import org.joda.time.Chronology;\nimport org.joda.time.DateTimeUtils;\nimport org.joda.time.ReadableInstant;\n\npublic class Main {\n    public static void main(String[] args) {\n        ReadableInstant instant = null; // Initialize with a valid ReadableInstant object\n        Chronology chronology = DateTimeUtils.getInstantChronology(instant);\n        System.out.println(\"Chronology: \" + chronology);\n    }\n}"}
{"api_description": "boolean isPrinter(): class PeriodFormatter\tIs this formatter capable of printing.", "api_example": "import org.joda.time.format.PeriodFormatter;\n\npublic class Example {\n    public static void main(String[] args) {\n        PeriodFormatter periodFormatter = null; // Initialize with a specific PeriodFormatter\n        boolean canPrint = periodFormatter.isPrinter();\n        System.out.println(\"Can print: \" + canPrint);\n    }\n}"}
{"api_description": "DurationField getDurationField(): class UnsupportedDateTimeField\tEven though this DateTimeField is unsupported, the duration field might be supported.", "api_example": "import org.joda.time.DateTimeField;\nimport org.joda.time.DurationField;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeField unsupportedField = null; // Initialize with actual value\n        DurationField durationField = unsupportedField.getDurationField();\n        System.out.println(\"Duration Field: \" + durationField);\n    }\n}"}
{"api_description": "abstract DurationField getLeapDurationField(): class DateTimeField\tIf this field were to leap, then it would be in units described by the returned duration.", "api_example": "import org.joda.time.DateTimeField;\nimport org.joda.time.DurationField;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeField dateTimeField = null; // initialize with actual value\n        DurationField leapDurationField = dateTimeField.getLeapDurationField();\n    }\n}"}
{"api_description": "static DateTimeFormatter basicDateTime(): class ISODateTimeFormat\tReturns a basic formatter that combines a basic date and time, separated by a 'T' (yyyyMMdd'T'HHmmss.SSSZ).", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.basicDateTime();\n        System.out.println(\"Basic Date Time Formatter: \" + formatter.print(System.currentTimeMillis()));\n    }\n}"}
{"api_description": "static LocalDate now(): class LocalDate\tObtains a LocalDate set to the current system millisecond time using ISOChronology in the default time zone.", "api_example": "import java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        LocalDate currentDate = LocalDate.now();\n        System.out.println(\"Current date: \" + currentDate);\n    }\n}"}
{"api_description": "static DateTimeFormatter date(): class ISODateTimeFormat\tReturns a formatter for a full date as four digit year, two digit month of year, and two digit day of month (yyyy-MM-dd).", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class DateExample {\n\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.date();\n        String formattedDate = formatter.print(new org.joda.time.LocalDate());\n        System.out.println(\"Formatted date: \" + formattedDate);\n    }\n}"}
{"api_description": "static DateTimeFormatter dateTimeNoMillis(): class ISODateTimeFormat\tReturns a formatter that combines a full date and time without millis, separated by a 'T' (yyyy-MM-dd'T'HH:mm:ssZZ).", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.dateTimeNoMillis();\n        System.out.println(formatter.print(System.currentTimeMillis()));\n    }\n}"}
{"api_description": "static DateTimeFormatter dateHourMinuteSecond(): class ISODateTimeFormat\tReturns a formatter that combines a full date, two digit hour of day, two digit minute of hour, and two digit second of minute.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.dateHourMinuteSecond();\n        System.out.println(formatter.print(System.currentTimeMillis()));\n    }\n}"}
{"api_description": "int getSeconds(): class Seconds\tGets the number of seconds that this period represents.", "api_example": "import java.util.concurrent.TimeUnit;\n\npublic class Example {\n    public static void main(String[] args) {\n        Seconds seconds = new Seconds(60);\n        int numSeconds = seconds.getSeconds();\n        System.out.println(\"Number of seconds: \" + numSeconds);\n    }\n}\n\nclass Seconds {\n    private int seconds;\n\n    public Seconds(int seconds) {\n        this.seconds = seconds;\n    }\n\n    public int getSeconds() {\n        return seconds;\n    }\n}"}
{"api_description": "DateTime withZoneRetainFields(DateTimeZone newZone): class DateTime\tReturns a copy of this datetime with a different time zone, preserving the field values.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class Main {\n    public static void main(String[] args) {\n        DateTime originalDateTime = new DateTime(2022, 10, 31, 15, 0, 0, 0, DateTimeZone.UTC);\n        DateTime newDateTime = originalDateTime.withZoneRetainFields(DateTimeZone.forID(\"America/New_York\"));\n\n        System.out.println(\"Original DateTime: \" + originalDateTime);\n        System.out.println(\"New DateTime with different time zone: \" + newDateTime);\n    }\n}"}
{"api_description": "MutableDateTime toMutableDateTime(DateTimeZone zone): class AbstractInstant\tGet this object as a MutableDateTime using the same chronology but a different zone.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.MutableDateTime;\n\npublic class Main {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.forID(\"Asia/Tokyo\");\n        DateTime dateTime = new DateTime();\n        MutableDateTime mutableDateTime = dateTime.toMutableDateTime(zone);\n    }\n}"}
{"api_description": "DateTime toDateTime(DateTimeZone zone): class AbstractInstant\tGet this object as a DateTime using the same chronology but a different zone.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTime originalDateTime = new DateTime(2022, 10, 15, 10, 30, DateTimeZone.UTC);\n        DateTimeZone newZone = DateTimeZone.forID(\"America/New_York\");\n\n        DateTime newDateTime = originalDateTime.toDateTime(newZone);\n        System.out.println(\"Original DateTime: \" + originalDateTime);\n        System.out.println(\"New DateTime in different zone: \" + newDateTime);\n    }\n}"}
{"api_description": "static MutableDateTime now(DateTimeZone zone): class MutableDateTime\tObtains a MutableDateTime set to the current system millisecond time using ISOChronology in the specified time zone.", "api_example": "import org.joda.time.DateTimeZone;\nimport org.joda.time.MutableDateTime;\n\npublic class MutableDateTimeExample {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        MutableDateTime currentDateTime = MutableDateTime.now(zone);\n        \n        System.out.println(\"Current date and time in \" + zone.getID() + \": \" + currentDateTime);\n    }\n}"}
{"api_description": "DateTime toDateTime(DateTimeZone zone): class DateTime\tGet this object as a DateTime, returning this if possible.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        DateTime dateTime = new DateTime(2022, 4, 15, 13, 30, 0, zone);\n        \n        DateTime convertedDateTime = dateTime.toDateTime(DateTimeZone.UTC);\n    }\n}"}
{"api_description": "DateTime toDateTimeISO(): class DateTime\tGet this object as a DateTime using ISOChronology in the default zone, returning this if possible.", "api_example": "import org.joda.time.DateTime;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        // Create DateTime object\n        DateTime dateTime = new DateTime();\n\n        // Get DateTime using ISOChronology in the default zone\n        DateTime isoDateTime = dateTime.toDateTimeISO();\n\n        // Print the ISO DateTime\n        System.out.println(\"ISO DateTime: \" + isoDateTime);\n    }\n}"}
{"api_description": "static DateTimeFormatter dateHourMinute(): class ISODateTimeFormat\tReturns a formatter that combines a full date, two digit hour of day, and two digit minute of hour.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.dateHourMinute();\n        \n        // Rest of the code using the formatter\n    }\n}"}
{"api_description": "Period minusDays(int days): class Period\tReturns a new period minus the specified number of days taken away.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int daysToSubtract = 5;\n        \n        Period initialPeriod = Period.of(1, 2, 10); // P1Y2M10D\n        Period newPeriod = initialPeriod.minusDays(daysToSubtract); // P1Y2M5D\n        \n        System.out.println(\"Initial Period: \" + initialPeriod); // Initial Period: P1Y2M10D\n        System.out.println(\"New Period after subtracting \" + daysToSubtract + \" days: \" + newPeriod); // New Period after subtracting 5 days: P1Y2M5D\n    }\n}"}
{"api_description": "Period withWeeks(int weeks): class Period\tReturns a new period with the specified number of weeks.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int weeks = 2;\n        Period period = Period.ofWeeks(weeks);\n        System.out.println(\"New period with \" + weeks + \" weeks: \" + period);\n    }\n}"}
{"api_description": "Period withYears(int years): class Period\tReturns a new period with the specified number of years.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize variables\n        int years = 5;\n\n        // API usage\n        Period period = Period.ofYears(years);\n        System.out.println(\"Period with \" + years + \" years: \" + period);\n    }\n}"}
{"api_description": "static Period days(int days): class Period\tCreate a period with a specified number of days.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int numberOfDays = 7;\n        Period period = Period.ofDays(numberOfDays);\n    }\n}"}
{"api_description": "static Chronology getIntervalChronology(ReadableInstant start, ReadableInstant end): class DateTimeUtils\tGets the chronology from the specified instant based interval handling null.", "api_example": "import org.joda.time.Chronology;\nimport org.joda.time.DateTimeUtils;\nimport org.joda.time.ReadableInstant;\n\npublic class ChronologyExample {\n    public static void main(String[] args) {\n        ReadableInstant start = null; // Initialize with actual value\n        ReadableInstant end = null; // Initialize with actual value\n        \n        Chronology intervalChronology = DateTimeUtils.getIntervalChronology(start, end);\n    }\n}"}
{"api_description": "static DateTimeZone getDefault(): class DateTimeZone\tGets the default time zone.", "api_example": "import org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeZone defaultTimeZone = DateTimeZone.getDefault();\n        System.out.println(\"Default time zone is: \" + defaultTimeZone.getID());\n    }\n}"}
{"api_description": "static Days daysBetween(ReadableInstant start, ReadableInstant end): class Days\tCreates a Days representing the number of whole days between the two specified datetimes.", "api_example": "import org.joda.time.Days;\nimport org.joda.time.DateTime;\n\npublic class Main {\n    public static void main(String[] args) {\n        DateTime start = new DateTime(2022, 1, 1, 0, 0);\n        DateTime end = new DateTime(2022, 1, 10, 0, 0);\n        \n        Days days = Days.daysBetween(start, end);\n        int numDays = days.getDays();\n        \n        System.out.println(\"Number of days between start and end: \" + numDays);\n    }\n}"}
{"api_description": "Seconds toStandardSeconds(): class Period\tConverts this period to a period in seconds assuming a 7 day week, 24 hour day, 60 minute hour and 60 second minute.", "api_example": "import org.joda.time.Period;\n\npublic class PeriodConverter {\n    public static void main(String[] args) {\n        Period period = new Period(1, 2, 3, 4); // years, months, weeks, days\n        int standardSeconds = period.toStandardSeconds().getSeconds();\n        System.out.println(\"Standard Seconds: \" + standardSeconds);\n    }\n}"}
{"api_description": "Minutes toStandardMinutes(): class Hours\tConverts this period in hours to a period in minutes assuming a 60 minute hour.", "api_example": "import org.joda.time.Hours;\n\npublic class Example {\n    public static void main(String[] args) {\n        int hours = 2;\n        \n        Hours periodInHours = Hours.hours(hours);\n        int periodInMinutes = periodInHours.toStandardMinutes().getMinutes();\n        \n        System.out.println(\"Period in minutes: \" + periodInMinutes);\n    }\n}"}
{"api_description": "static Seconds seconds(int seconds): class Seconds\tObtains an instance of Seconds that may be cached.", "api_example": "import java.time.Duration;\n\npublic class Example {\n    public static void main(String[] args) {\n        int numSeconds = 60;\n        Duration duration = Duration.ofSeconds(numSeconds);\n    }\n}"}
{"api_description": "String toString(): class DateTimeZone\tGets the datetime zone as a string, which is simply its ID.", "api_example": "import org.joda.time.DateTimeZone;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTimeZone dateTimeZone = DateTimeZone.getDefault();\n        String zoneAsString = dateTimeZone.toString();\n        System.out.println(\"DateTimeZone as string: \" + zoneAsString);\n    }\n}"}
{"api_description": "TimeZone toTimeZone(): class DateTimeZone\tGet the datetime zone as a TimeZone.", "api_example": "import org.joda.time.DateTimeZone;\nimport java.util.TimeZone;\n\npublic class TimeZoneExample {\n    public static void main(String[] args) {\n        DateTimeZone dateTimeZone = DateTimeZone.forID(\"Europe/London\");\n        TimeZone timeZone = dateTimeZone.toTimeZone();\n    }\n}"}
{"api_description": "Month(Date time): class Month\tConstructs a new Month instance, based on a date/time.", "api_example": "import java.util.Date;\n\npublic class Month {\n    private Date time;\n\n    public Month(Date time) {\n        this.time = time;\n    }\n\n    // Other methods can be included as needed\n}"}
{"api_description": "static Weeks weeksIn(ReadableInterval interval): class Weeks\tCreates a Weeks representing the number of whole weeks in the specified interval.", "api_example": "import org.joda.time.ReadableInterval;\nimport org.joda.time.Weeks;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a ReadableInterval object representing a specific time interval\n        ReadableInterval interval = null; // Initialize with actual interval\n\n        // Use the Weeks class to get the number of whole weeks in the interval\n        Weeks weeks = Weeks.weeksIn(interval);\n\n        // Print the number of whole weeks in the interval\n        System.out.println(\"Number of weeks in the interval: \" + weeks.getWeeks());\n    }\n}"}
{"api_description": "static Minutes minutesIn(ReadableInterval interval): class Minutes\tCreates a Minutes representing the number of whole minutes in the specified interval.", "api_example": "import org.joda.time.Minutes;\nimport org.joda.time.Interval;\nimport org.joda.time.ReadableInterval;\n\npublic class Main {\n    public static void main(String[] args) {\n        // create a readable interval\n        Interval interval = new Interval(1000, 5000);\n\n        // get the Minutes representing the number of whole minutes in the specified interval\n        Minutes minutes = Minutes.minutesIn(interval);\n\n        // print the result\n        System.out.println(\"Minutes in the interval: \" + minutes.getMinutes());\n    }\n}"}
{"api_description": "static DateTimeFormatter basicDate(): class ISODateTimeFormat\tReturns a basic formatter for a full date as four digit year, two digit month of year, and two digit day of month (yyyyMMdd).", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.basicDate();\n        String date = \"20221025\";\n        System.out.println(formatter.parseDateTime(date));\n    }\n}"}
{"api_description": "static MonthDay parse(String str, DateTimeFormatter formatter): class MonthDay\tParses a MonthDay from the specified string using a formatter.", "api_example": "import java.time.MonthDay;\nimport java.time.format.DateTimeFormatter;\n\npublic class Main {\n    public static void main(String[] args) {\n        String dateString = \"12/25\";\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"MM/dd\");\n        \n        MonthDay monthDay = MonthDay.parse(dateString, formatter);\n        \n        System.out.println(monthDay);\n    }\n}"}
{"api_description": "static DateTime now(DateTimeZone zone): class DateTime\tObtains a DateTime set to the current system millisecond time using ISOChronology in the specified time zone.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        DateTime currentDateTime = DateTime.now(zone);\n        System.out.println(\"Current date and time in New York: \" + currentDateTime);\n    }\n}"}
{"api_description": "static MonthDay now(DateTimeZone zone): class MonthDay\tObtains a MonthDay set to the current system millisecond time using ISOChronology in the specified time zone.", "api_example": "import org.joda.time.DateTimeZone;\nimport org.joda.time.MonthDay;\n\npublic class MonthDayExample {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.UTC;\n        MonthDay currentMonthDay = MonthDay.now(zone);\n        System.out.println(\"Current MonthDay: \" + currentMonthDay);\n    }\n}"}
{"api_description": "static MonthDay parse(String str): class MonthDay\tParses a MonthDay from the specified string.", "api_example": "import java.time.MonthDay;\n\npublic class Example {\n    public static void main(String[] args) {\n        String dateStr = \"12-25\";\n        MonthDay monthDay = MonthDay.parse(dateStr);\n        System.out.println(\"Parsed MonthDay: \" + monthDay);\n    }\n}"}
{"api_description": "static DateTimeFormatter dateParser(): class ISODateTimeFormat\tReturns a generic ISO date parser for parsing dates with a possible zone.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Main {\n    public static void main(String[] args) {\n        DateTimeFormatter parser = ISODateTimeFormat.dateParser();\n        System.out.println(parser.parseDateTime(\"2023-12-25\"));\n    }\n}"}
{"api_description": "static LocalDateTime now(DateTimeZone zone): class LocalDateTime\tObtains a LocalDateTime set to the current system millisecond time using ISOChronology in the specified time zone.", "api_example": "import org.joda.time.LocalDateTime;\nimport org.joda.time.DateTimeZone;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        LocalDateTime currentDateTime = LocalDateTime.now(zone);\n        System.out.println(\"Current date and time in \" + zone + \": \" + currentDateTime);\n    }\n}"}
{"api_description": "int getMinEndIndex(): class TimePeriodValues\tReturns the index of the time period with the minimum end milliseconds.", "api_example": "import java.util.List;\n\npublic class TimePeriodValues {\n    private List<Long> endTimes;\n\n    public TimePeriodValues(List<Long> endTimes) {\n        this.endTimes = endTimes;\n    }\n\n    public int getMinEndIndex() {\n        // Implementation of finding the index of the time period with the minimum end milliseconds\n        int minIndex = 0;\n        long minEndTime = endTimes.get(0);\n        for (int i = 1; i < endTimes.size(); i++) {\n            if (endTimes.get(i) < minEndTime) {\n                minEndTime = endTimes.get(i);\n                minIndex = i;\n            }\n        }\n        return minIndex;\n    }\n}"}
{"api_description": "static Period years(int years): class Period\tCreate a period with a specified number of years.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int numberOfYears = 5;\n        Period period = Period.ofYears(numberOfYears);\n        System.out.println(\"Period of \" + numberOfYears + \" years: \" + period);\n    }\n}"}
{"api_description": "Period withMonths(int months): class Period\tReturns a new period with the specified number of months.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int months = 6;\n        Period period = Period.ofMonths(months);\n        \n        Period newPeriod = period.withMonths(3);\n        \n        System.out.println(newPeriod); // Output: P0Y3M0D\n    }\n}"}
{"api_description": "MutableInterval(ReadableInstant start,\tReadableInstant end): class MutableInterval\tConstructs an interval from a start and end instant.", "api_example": "import org.joda.time.MutableInterval;\nimport org.joda.time.DateTime;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTime start = new DateTime(2022, 1, 1, 0, 0); // Sample start date\n        DateTime end = new DateTime(2022, 12, 31, 23, 59); // Sample end date\n        \n        MutableInterval interval = new MutableInterval(start, end); // Creating an interval\n        \n        System.out.println(\"Interval start: \" + interval.getStart());\n        System.out.println(\"Interval end: \" + interval.getEnd());\n    }\n}"}
{"api_description": "int compare(Object lhsObj, Object rhsObj): class DateTimeComparator\tCompare two objects against only the range of date time fields as specified in the constructor.", "api_example": "import java.time.LocalDateTime;\nimport org.joda.time.DateTimeComparator;\n\npublic class DateTimeComparatorExample {\n    public static void main(String[] args) {\n        LocalDateTime date1 = LocalDateTime.of(2022, 4, 15, 10, 30);\n        LocalDateTime date2 = LocalDateTime.of(2022, 4, 15, 12, 30);\n        \n        DateTimeComparator comparator = DateTimeComparator.getDateOnlyInstance();\n        int result = comparator.compare(date1, date2);\n        \n        System.out.println(\"Comparison result: \" + result);\n    }\n}"}
{"api_description": "boolean isBefore(ReadableInterval interval): class AbstractInterval\tIs this time interval entirely before the specified instant.", "api_example": "import org.joda.time.ReadableInterval;\n\npublic class Example {\n    private ReadableInterval interval;\n    \n    public boolean checkIfBefore(ReadableInterval otherInterval) {\n        return interval.isBefore(otherInterval);\n    }\n}"}
{"api_description": "static DateTimeFormatter localDateOptionalTimeParser(): class ISODateTimeFormat\tReturns a generic ISO datetime parser where the date is mandatory and the time is optional.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.localDateOptionalTimeParser();\n        // Usage of the formatter\n    }\n}"}
{"api_description": "Duration toDuration(): class AbstractInterval\tGets the duration of this time interval.", "api_example": "import java.time.Duration;\n\npublic class TimeInterval {\n    private long startTime;\n    private long endTime;\n\n    public TimeInterval(long startTime, long endTime) {\n        this.startTime = startTime;\n        this.endTime = endTime;\n    }\n\n    public Duration getDuration() {\n        return Duration.ofMillis(endTime - startTime);\n    }\n\n    public static void main(String[] args) {\n        TimeInterval interval = new TimeInterval(1000, 3000);\n        Duration duration = interval.getDuration();\n        System.out.println(\"Duration: \" + duration);\n    }\n}"}
{"api_description": "boolean contains(ReadableInterval interval): class ReadableInterval\tDoes this time interval contain the specified time interval.", "api_example": "import org.joda.time.DateTime;\nimport org.joda.time.Interval;\nimport org.joda.time.ReadableInterval;\n\npublic class TimeIntervalChecker {\n    public static void main(String[] args) {\n        DateTime start1 = new DateTime(2022, 1, 1, 0, 0);\n        DateTime end1 = new DateTime(2022, 1, 15, 0, 0);\n        Interval interval1 = new Interval(start1, end1);\n        \n        DateTime start2 = new DateTime(2022, 1, 5, 0, 0);\n        DateTime end2 = new DateTime(2022, 1, 10, 0, 0);\n        Interval interval2 = new Interval(start2, end2);\n        \n        boolean result = interval1.contains(interval2);\n        System.out.println(\"Interval 2 is contained within interval 1: \" + result);\n    }\n}"}
{"api_description": "boolean contains(ReadableInterval interval): class AbstractInterval\tDoes this time interval contain the specified time interval.", "api_example": "import org.joda.time.Interval;\nimport org.joda.time.ReadableInterval;\n\npublic class IntervalExample {\n\n    public static void main(String[] args) {\n        Interval interval1 = new Interval(1000, 2000);\n        Interval interval2 = new Interval(1500, 1800);\n\n        boolean contains = interval1.contains(interval2);\n        System.out.println(\"Does interval1 contain interval2? \" + contains);\n    }\n}"}
{"api_description": "Weeks toStandardWeeks(): class Seconds\tConverts this period in seconds to a period in weeks assuming a 7 day week, 24 hour day, 60 minute hour and 60 second minute.", "api_example": "import org.joda.time.Seconds;\nimport org.joda.time.Weeks;\n\npublic class Example {\n    public static void main(String[] args) {\n        int seconds = 86400; // 24 hours in seconds\n        Seconds period = Seconds.seconds(seconds);\n        Weeks weeks = period.toStandardWeeks();\n        System.out.println(\"Weeks: \" + weeks.getWeeks());\n    }\n}"}
{"api_description": "Seconds toStandardSeconds(): class Weeks\tConverts this period in weeks to a period in seconds assuming a 7 day week, 24 hour day, 60 minute hour and 60 second minute.", "api_example": "import org.joda.time.Weeks;\n\npublic class WeeksConverter {\n    public static void main(String[] args) {\n        Weeks weeks = Weeks.weeks(2);\n        int standardSeconds = weeks.toStandardSeconds().getSeconds();\n        System.out.println(\"Standard seconds: \" + standardSeconds);\n    }\n}"}
{"api_description": "Weeks toStandardWeeks(): class Period\tConverts this period to a period in weeks assuming a 7 day week, 24 hour day, 60 minute hour and 60 second minute.", "api_example": "import org.joda.time.Period;\nimport org.joda.time.Weeks;\n\npublic class PeriodConverter {\n    public static void main(String[] args) {\n        Period period = new Period(2, 0, 0, 0); // 2 years\n        Weeks weeks = period.toStandardWeeks();\n        int weeksValue = weeks.getWeeks();\n        System.out.println(\"Weeks: \" + weeksValue);\n    }\n}"}
{"api_description": "static Period weeks(int weeks): class Period\tCreate a period with a specified number of weeks.", "api_example": "import java.time.Period;\n\npublic class Main {\n    public static void main(String[] args) {\n        int numOfWeeks = 2;\n        Period period = Period.ofWeeks(numOfWeeks);\n        System.out.println(\"Period with \" + numOfWeeks + \" weeks: \" + period);\n    }\n}"}
{"api_description": "static DateTime now(): class DateTime\tObtains a DateTime set to the current system millisecond time using ISOChronology in the default time zone.", "api_example": "import org.joda.time.DateTime;\n\npublic class DateTimeExample {\n    public static void main(String[] args) {\n        DateTime currentDateTime = DateTime.now();\n        System.out.println(\"Current date and time: \" + currentDateTime);\n    }\n}"}
