{"api_description": "void save(String fileName): class PDDocument\tSave the document to a file using default compression.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport java.io.IOException;\n\npublic class PdfDocumentHandler {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        try {\n            // Add content to the document\n\n            // Save the document to a file using default compression\n            document.save(\"output.pdf\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                document.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}"}
{"api_description": "static PDImageXObject JPEGFactory.createFromImage(PDDocument document, BufferedImage image, float quality, int dpi): class JPEGFactory\tCreates a new JPEG Image XObject from a BufferedImage, a given quality and dpi metadata.", "api_example": "import org.apache.pdfbox.pdmodel.PDDocument;\nimport org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;\n\nimport java.awt.image.BufferedImage;\nimport java.io.IOException;\n\npublic class Main {\n    public static void main(String[] args) {\n        PDDocument document = new PDDocument();\n        BufferedImage image = null; // initialize with actual image data\n        float quality = 0.8f;\n        int dpi = 300;\n\n        try {\n            JPEGFactory.createFromImage(document, image, quality, dpi);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "String getF(): class PDActionLaunch\tThis will get the file name to be launched or the document to be opened or printed, in standard Windows pathname format.", "api_example": "import org.apache.pdfbox.pdmodel.interactive.action.PDActionLaunch;\n\npublic class PDActionLaunchExample {\n    public static void main(String[] args) {\n        PDActionLaunch action = new PDActionLaunch();\n        String fileName = action.getF();\n        System.out.println(\"File name to be launched: \" + fileName);\n    }\n}"}
{"api_description": "[Method Summary] void initializeEventListeners(SVGDocument doc): class EventListenerInitializer\tThis method is called by the SVG viewer when the scripts are loaded to register the listener needed.", "api_example": "import org.w3c.dom.svg.SVGDocument;\n\npublic class MySVGViewer {\n\n    private SVGDocument svgDoc;\n\n    public MySVGViewer(SVGDocument svgDoc) {\n        this.svgDoc = svgDoc;\n    }\n\n    public void initializeEventListeners(SVGDocument doc) {\n        EventListenerInitializer eventListenerInitializer = new EventListenerInitializer();\n        eventListenerInitializer.initializeEventListeners(doc);\n    }\n\n    private class EventListenerInitializer {\n        public void initializeEventListeners(SVGDocument doc) {\n            // logic to register event listeners\n        }\n    }\n}"}
{"api_description": "Node renameNode(Node n, String namespaceURI, String qualifiedName): class Document\tRename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE.", "api_example": "import org.w3c.dom.Node;\nimport org.w3c.dom.Document;\n\npublic class APIExample {\n\n    public static void main(String[] args) {\n\n        // Create an instance of Document\n        Document document = createDocument();\n\n        // Find the node to be renamed\n        Node node = findNodeToRename(document);\n\n        // Rename the node with the specified namespaceURI and qualifiedName\n        Node renamedNode = document.renameNode(node, \"http://www.example.com\", \"newName\");\n\n        // Print the updated node information\n        System.out.println(\"Renamed Node: \" + renamedNode);\n    }\n\n    private static Document createDocument() {\n        // Implement logic to create and return a Document instance\n        return null;\n    }\n\n    private static Node findNodeToRename(Document document) {\n        // Implement logic to find and return a node to be renamed from the Document\n        return null;\n    }\n}"}
{"api_description": "Text createTextNode(String data): class Document\tCreates a Text node given the specified string.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Text;\n\npublic class APITest {\n    public static void main(String[] args) {\n        String data = \"Hello, World!\";\n        \n        Document document = createDocument();\n        Text textNode = document.createTextNode(data);\n        \n        System.out.println(textNode.getTextContent());\n    }\n    \n    private static Document createDocument() {\n        // Create and return a Document\n        return null;\n    }\n}"}
{"api_description": "void setPrefix(String prefix): class Node\tThe namespace prefix of this node, or null if it is unspecified.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = null;\n        String prefix = \"xml\";\n        \n        node.setPrefix(prefix);\n    }\n}"}
{"api_description": "boolean hasAttributes(): class Node\tReturns whether this node (if it is an element) has any attributes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = null; // Placeholder for the Node object\n        \n        boolean hasAttributes = node.hasAttributes();\n        System.out.println(\"Has attributes: \" + hasAttributes);\n    }\n}"}
{"api_description": "void startElement(String namespaceURI, String localName, String qName, Attributes atts): class CategoryDatasetHandler\tThe start of an element.", "api_example": "import org.xml.sax.Attributes;\n\npublic class CategoryDatasetHandler {\n    \n    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) {\n        // Code implementation\n        \n        // Example usage:\n        System.out.println(\"Element start: namespaceURI=\" + namespaceURI + \", localName=\" + localName + \", qName=\" + qName);\n        System.out.println(\"Attributes: \" + atts.getLength() + \" attributes\");\n        for (int i = 0; i < atts.getLength(); i++) {\n            String attributeName = atts.getQName(i);\n            String attributeValue = atts.getValue(i);\n            System.out.println(\"Attribute: \" + attributeName + \" = \" + attributeValue);\n        }\n    }\n}"}
{"api_description": "Attr createAttributeNS(String namespaceURI, String qualifiedName): class Document\tCreates an attribute of the given qualified name and namespace URI.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Attr;\n\npublic class Example {\n    public static void main(String[] args) {\n        Document document = null;\n        String namespaceURI = \"http://www.example.com/namespace\";\n        String qualifiedName = \"example:attribute\";\n        \n        Attr attribute = document.createAttributeNS(namespaceURI, qualifiedName);\n    }\n}"}
{"api_description": "static Set<String> getAvailableIDs(): class DateTimeZone\tGets all the available IDs supported.", "api_example": "import org.joda.time.DateTimeZone;\nimport java.util.Set;\n\npublic class Example {\n    public static void main(String[] args) {\n        Set<String> availableIDs = DateTimeZone.getAvailableIDs();\n        System.out.println(availableIDs);\n    }\n}"}
{"api_description": "String getDocumentURI(): class Document\tThe location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument.", "api_example": "import org.w3c.dom.Document;\n\npublic class DocumentExample {\n    public static void main(String[] args) {\n        Document document = getDocument();\n        String documentURI = document.getDocumentURI();\n        System.out.println(\"Document URI: \" + documentURI);\n    }\n\n    private static Document getDocument() {\n        // Code to obtain or create a Document object\n        return null;\n    }\n}"}
{"api_description": "Element getDocumentElement(): class Document\tThis is a convenience attribute that allows direct access to the child node that is the document element of the document.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class Example {\n    public static void main(String[] args) {\n        Document document = null;  // Initialize with your own Document object\n        \n        // Get the document element\n        Element documentElement = document.getDocumentElement();\n        \n        // Do something with the document element\n        // ...\n    }\n}"}
{"api_description": "NodeList getElementsByTagName(String tagname): class Document\tReturns a NodeList of all the Elements in document order with a given tag name and are contained in the document.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize a Document object\n        Document document = null; \n        \n        // Get a NodeList of all the Elements with tag name \"div\" in document order\n        NodeList elements = document.getElementsByTagName(\"div\");\n    }\n}"}
{"api_description": "PeriodFormatterBuilder appendLiteral(String text): class PeriodFormatterBuilder\tInstructs the printer to emit specific text, and the parser to expect it.", "api_example": "import org.joda.time.format.PeriodFormatterBuilder;\n\npublic class Main {\n    public static void main(String[] args) {\n        PeriodFormatterBuilder builder = new PeriodFormatterBuilder();\n        builder.appendLiteral(\"Hello, World!\");\n\n        // Rest of the code...\n    }\n}"}
{"api_description": "String getXmlEncoding(): class Entity\tAn attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity.", "api_example": "import org.w3c.dom.Entity;\n\npublic class Example {\n    public String getXmlEncoding() {\n        // Implement your code here\n        return null;\n    }\n}"}
{"api_description": "static DateTimeFormatter timeElementParser(): class ISODateTimeFormat\tReturns a generic ISO time parser.", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Example {\n  \n  public static void main(String[] args) {\n    DateTimeFormatter dateTimeFormatter = ISODateTimeFormat.timeElementParser();\n    // usage code here\n  }\n  \n}"}
{"api_description": "Node cloneNode(boolean deep): class Node\tReturns a duplicate of this node, i.e., serves as a generic copy constructor for nodes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new Node\n        Node originalNode = createNode();\n        \n        // Clone the originalNode\n        Node clonedNode = originalNode.cloneNode(true);\n        \n        // Print the clonedNode\n        System.out.println(\"Cloned Node: \" + clonedNode);\n    }\n    \n    private static Node createNode() {\n        // Code to create and return a new Node\n        return null;\n    }\n}"}
{"api_description": "Node importNode(Node importedNode, boolean deep): class Document\tImports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\npublic class Example {\n\n    public static void main(String[] args) {\n        // Instantiate two Document objects\n        Document sourceDocument = createSourceDocument();\n        Document targetDocument = createTargetDocument();\n\n        // Import a node from sourceDocument to targetDocument\n        Node importedNode = targetDocument.importNode(sourceDocument.getDocumentElement(), true);\n        \n        // Print the imported node\n        System.out.println(importedNode);\n    }\n    \n    private static Document createSourceDocument() {\n        // Create and return a source Document object\n        Document sourceDocument = null;\n        // Implement the logic to create the source Document\n        \n        return sourceDocument;\n    }\n    \n    private static Document createTargetDocument() {\n        // Create and return a target Document object\n        Document targetDocument = null;\n        // Implement the logic to create the target Document\n        \n        return targetDocument;\n    }\n}"}
{"api_description": "[Method Summary] Object clone(): class PublicCloneable\tReturns a clone of the object.", "api_example": "import java.lang.Cloneable;\n\npublic class PublicCloneable implements Cloneable {\n    \n    public Object clone() {\n        try {\n            return super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new AssertionError();\n        }\n    }\n}"}
{"api_description": "Element getOwnerElement(): class Attr\tThe Element node this attribute is attached to or null if this attribute is not in use.", "api_example": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Element element = null;\n        \n        Attr attr = element.getAttributeNode(\"attributeName\");\n        Element ownerElement = attr.getOwnerElement();\n        \n        System.out.println(\"Owner Element: \" + ownerElement);\n    }\n}"}
{"api_description": "void normalize(): class Node\tPuts all Text nodes in the full depth of the sub-tree underneath this Node, including attribute nodes, into a \"normal\" form where only structure (e.g., elements, comments, processing instructions, CDATA sections, and entity references) separates Text nodes, i.e., there are neither adjacent Text nodes nor empty Text nodes.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize the Node\n        Node node = null;\n\n        // Normalize the Node\n        node.normalize();\n    }\n}"}
{"api_description": "Attr getAttributeNode(String name): class Element\tRetrieves an attribute node by name.", "api_example": "import org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\n\npublic class Example {\n    public static void main(String[] args) {\n        Element element = getRootElement();\n        Attr attributeNode = element.getAttributeNode(\"attributeName\");\n        System.out.println(attributeNode);\n    }\n\n    private static Element getRootElement() {\n        // TODO: Implement code to retrieve the root element\n        return null;\n    }\n}"}
{"api_description": "NodeList getElementsByTagNameNS(String namespaceURI, String localName): class Element\tReturns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport org.xml.sax.InputSource;\nimport java.io.StringReader;\n\npublic class XmlNamespaceExample {\n    public static void main(String[] args) {\n        try {\n            String xmlContent = \"<root xmlns:example=\\\"http://www.example.com\\\">\"\n                              + \"<example:child>Content 1</example:child>\"\n                              + \"<example:child>Content 2</example:child>\"\n                              + \"<child>Content 3</child>\"\n                              + \"</root>\";\n                              \n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            Document document = builder.parse(new InputSource(new StringReader(xmlContent)));\n            \n            String namespaceURI = \"http://www.example.com\";\n            String localName = \"child\";\n            NodeList nodeList = document.getElementsByTagNameNS(namespaceURI, localName);\n            \n            for (int i = 0; i < nodeList.getLength(); i++) {\n                Element element = (Element) nodeList.item(i);\n                System.out.println(\"Found element: \" + element.getTextContent());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "NamedNodeMap getAttributes(): class Node\tA NamedNodeMap containing the attributes of this node (if it is an Element) or null otherwise.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic class XmlAttributeExample {\n    public static void main(String[] args) {\n        try {\n            // Initialize a DocumentBuilderFactory\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n\n            // Parse an XML file (replace \"example.xml\" with a valid XML file path)\n            Document document = builder.parse(\"example.xml\");\n\n            // Get the root element\n            Element rootElement = document.getDocumentElement();\n\n            // Get attributes from the root element\n            NamedNodeMap attributes = rootElement.getAttributes();\n\n            // Iterate over the attributes and print them\n            for (int i = 0; i < attributes.getLength(); i++) {\n                Node attribute = attributes.item(i);\n                System.out.println(attribute.getNodeName() + \": \" + attribute.getNodeValue());\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "Node removeNamedItem(String name): class NamedNodeMap\tRemoves a node specified by name.", "api_example": "import org.w3c.dom.NamedNodeMap;\nimport org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        // Initialize a NamedNodeMap object\n        NamedNodeMap nodeMap = null;\n        \n        // Call the removeNamedItem method to remove a node by name\n        Node removedNode = nodeMap.removeNamedItem(\"name\");\n    }\n}"}
{"api_description": "String getValue(): class Attr\tOn retrieval, the value of the attribute is returned as a string.", "api_example": "import org.w3c.dom.Attr;\n\npublic class UsageExample {\n\n    public static void main(String[] args) {\n        \n        Attr attribute = null; // Initialize the attribute\n        \n        String value = attribute.getValue(); // Retrieve the value of the attribute\n        \n        System.out.println(value); // Print the value of the attribute\n    }\n}"}
{"api_description": "boolean hasAttributeNS(String namespaceURI, String localName): class Element\tReturns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\npublic class APIUsageExample {\n\n    public static void main(String[] args) {\n        try {\n            // Initialize DocumentBuilder\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            \n            // Create a new XML Document\n            Document document = builder.newDocument();\n            \n            // Create an element with attributes\n            Element element = document.createElement(\"exampleElement\");\n            element.setAttributeNS(\"http://www.example.com/ns\", \"example:attr\", \"value\");\n            \n            // Define namespace URI and local name\n            String namespaceURI = \"http://www.example.com/ns\";\n            String localName = \"attr\";\n            \n            // Check if the element has the specified attribute\n            boolean hasAttribute = element.hasAttributeNS(namespaceURI, localName);\n            System.out.println(\"Has attribute: \" + hasAttribute); // Output: Has attribute: true\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}"}
{"api_description": "String getAttributeNS(String namespaceURI, String localName): class Element\tRetrieves an attribute value by local name and namespace URI.", "api_example": "import org.w3c.dom.Element;\n\npublic class APIExample {\n  \n  public static void main(String[] args) {\n    // Create an instance of Element\n    Element element = getElement(); \n    \n    // Retrieve an attribute value by local name and namespace URI\n    String namespaceURI = \"http://www.example.com\";\n    String localName = \"attributeName\";\n    \n    String attributeValue = element.getAttributeNS(namespaceURI, localName);\n    \n    // Print the attribute value\n    System.out.println(\"Attribute Value: \" + attributeValue);\n  }\n  \n  private static Element getElement() {\n    // Implementation to get the Element object\n    // This can be your custom implementation or obtained from another API\n    Element element = null;\n    // Code to retrieve the element\n    \n    return element;\n  }\n}"}
{"api_description": "String getPrefix(): class Node\tThe namespace prefix of this node, or null if it is unspecified.", "api_example": "import org.w3c.dom.Node;\n\npublic class NodeExample {\n    \n    public static void main(String[] args) {\n        Node node = null; // assume node is initialized somewhere in the code\n        \n        String prefix = node.getPrefix();\n        System.out.println(\"Node prefix: \" + prefix);\n    }\n}"}
{"api_description": "String lookupPrefix(String namespaceURI): class Node\tLook up the prefix associated to the given namespace URI, starting from this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Node node = null; // Initialize the node\n        \n        String namespaceURI = \"http://www.example.com\"; // Initialize the namespace URI\n        \n        String prefix = node.lookupPrefix(namespaceURI); // Look up the prefix associated with the given namespace URI\n        \n        System.out.println(\"Prefix: \" + prefix); // Print the prefix\n    }\n}"}
{"api_description": "NodeList getElementsByTagNameNS(String namespaceURI, String localName): class Document\tReturns a NodeList of all the Elements with a given local name and namespace URI in document order.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.NodeList;\n\npublic class APIUsageExample {\n    public static void main(String[] args) {\n        Document document = null; // Replace with actual Document object\n\n        String namespaceURI = \"http://www.example.com/namespace\";\n        String localName = \"elementName\";\n\n        NodeList elements = document.getElementsByTagNameNS(namespaceURI, localName);\n        \n        // Use the NodeList elements as per your requirements\n        // ...\n    }\n}"}
{"api_description": "Element createElement(String tagName): class Document\tCreates an element of the type specified.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.Element;\n\npublic class APIExample {\n    public static void main(String[] args) {\n        Document document = null; // initialize with an instance of Document\n\n        String tagName = \"div\"; // the tag name you want to create\n\n        Element element = document.createElement(tagName);\n    }\n}"}
{"api_description": "String getTextContent(): class Node\tThis attribute returns the text content of this node and its descendants.", "api_example": "import org.w3c.dom.Node;\n\npublic class NodeExample {\n    private Node node;\n\n    public NodeExample(Node node) {\n        this.node = node;\n    }\n\n    public String getTextContent() {\n        return node.getTextContent();\n    }\n}"}
{"api_description": "Node getLastChild(): class Node\tThe last child of this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class XMLParser {\n\n  private Node rootNode;\n\n  public XMLParser(Node rootNode) {\n    this.rootNode = rootNode;\n  }\n\n  public Node getLastChild() {\n    return rootNode.getLastChild();\n  }\n}"}
{"api_description": "String getLocalName(): class Node\tReturns the local part of the qualified name of this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n\n    public void getNodeLocalName(Node node) {\n        String localName = node.getLocalName();\n        System.out.println(\"Local Name: \" + localName);\n    }\n\n    public static void main(String[] args) {\n        Node node = null; // initialize the node variable with appropriate node object.\n        \n        Example example = new Example();\n        example.getNodeLocalName(node);\n    }\n}"}
{"api_description": "boolean hasChildNodes(): class Node\tReturns whether this node has any children.", "api_example": "import org.w3c.dom.Node;\n\npublic class Example {\n    public static void main(String[] args) {\n        Node node = getSomeNode(); // Get a node from somewhere\n\n        boolean hasChildren = node.hasChildNodes();\n        System.out.println(\"Node has children: \" + hasChildren);\n    }\n\n    private static Node getSomeNode() {\n        // TODO: Add implementation to obtain a Node object\n        return null;\n    }\n}"}
{"api_description": "Node getRelatedNode(): class DOMLocator\tThe node this locator is pointing to, or null if no node is available.", "api_example": "import org.w3c.dom.Node;\n\npublic class DOMLocator {\n    private Node relatedNode;\n\n    public Node getRelatedNode() {\n        return relatedNode;\n    }\n\n    public void setRelatedNode(Node relatedNode) {\n        this.relatedNode = relatedNode;\n    }\n\n    public static void main(String[] args) {\n        DOMLocator locator = new DOMLocator();\n        Node relatedNode = locator.getRelatedNode();\n        if (relatedNode != null) {\n            // handle related node\n        } else {\n            // no related node available\n        }\n    }\n}"}
{"api_description": "ProcessingInstruction createProcessingInstruction(String target, String data): class Document\tCreates a ProcessingInstruction node given the specified name and data strings.", "api_example": "import org.w3c.dom.Document;\nimport org.w3c.dom.ProcessingInstruction;\n\npublic class Main {\n    public static void main(String[] args) {\n        Document doc = null; // initialize with the actual document object\n        String target = \"target\";\n        String data = \"data\";\n        \n        ProcessingInstruction pi = doc.createProcessingInstruction(target, data);\n        System.out.println(\"ProcessingInstruction created: \" + pi);\n    }\n}"}
{"api_description": "String getWholeText(): class Text\tReturns all text of Text nodes logically-adjacent text nodes to this node, concatenated in document order.", "api_example": "import org.w3c.dom.Text;\n\npublic class Main {\n    public static void main(String[] args) {\n        Text textNode = getTextFromSomeWhere();\n        String wholeText = textNode.getWholeText();\n        System.out.println(wholeText);\n    }\n\n    private static Text getTextFromSomeWhere() {\n        // Your implementation to get the Text node from somewhere\n        return null;\n    }\n}"}
{"api_description": "static DateTimeFormatter tTime(): class ISODateTimeFormat\tReturns a formatter for a two digit hour of day, two digit minute of hour, two digit second of minute, three digit fraction of second, and time zone offset prefixed by 'T' ('T'HH:mm:ss.SSSZZ).", "api_example": "import org.joda.time.format.DateTimeFormatter;\nimport org.joda.time.format.ISODateTimeFormat;\n\npublic class Example {\n    public static void main(String[] args) {\n        DateTimeFormatter formatter = ISODateTimeFormat.tTime();\n        System.out.println(formatter.print(System.currentTimeMillis()));\n    }\n}"}
{"api_description": "Element createElementNS(String namespaceURI, String qualifiedName): class Document\tCreates an element of the given qualified name and namespace URI.", "api_example": "import org.w3c.dom.Document;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Document document = createNewDocument();\n\n        String namespaceURI = \"http://www.example.com/xmlns\";\n        String qualifiedName = \"example:element\";\n\n        org.w3c.dom.Element element = document.createElementNS(namespaceURI, qualifiedName);\n    }\n\n    private static Document createNewDocument() {\n        // implementation to create a new document\n        return null;\n    }\n}"}
{"api_description": "TypeInfo getSchemaTypeInfo(): class Attr\tThe type information associated with this attribute.", "api_example": "import org.w3c.dom.Attr;\nimport org.w3c.dom.TypeInfo;\n\npublic class Example {\n    public static void main(String[] args) {\n        Attr attr = null; // initialize with actual value\n        TypeInfo typeInfo = attr.getSchemaTypeInfo();\n        // further usage of typeInfo\n    }\n}"}
{"api_description": "true [optional] Canonicalize the document according to the rules specified in [Canonical XML], such as removing the DocumentType node (if any): class DOMConfiguration\tfrom the tree, or removing superfluous namespace declarations from each element. Note that this is limited to what can be represented in the DOM; in particular, there is no way to specify the order of the attributes in the DOM. In addition,  Setting this parameter to true will also set the state of the parameters listed below. Later changes to the state of one of those parameters will revert \"canonical-form\" back to false. Parameters set to false: \"entities\", \" normalize-characters\", \"cdata-sections\". Parameters set to true: \"namespaces\", \"namespace-declarations\", \"well-formed\", \"element-content-whitespace\". Other parameters are not changed unless explicitly specified in the description of the parameters.", "api_example": "import org.w3c.dom.DOMConfiguration;\n\npublic class CanonicalizationExample {\n    public static void main(String[] args) {\n        DOMConfiguration domConfig = null; // Initialize with appropriate DOMConfiguration object\n        boolean canonicalize = true;\n        \n        // Set the canonicalize parameter to true\n        domConfig.setParameter(\"canonical-form\", canonicalize);\n        \n        // Verify if the parameter is set to true\n        System.out.println(\"Canonicalization is set to: \" + domConfig.getParameter(\"canonical-form\"));\n    }\n}"}
{"api_description": "Node getPreviousSibling(): class Node\tThe node immediately preceding this node.", "api_example": "import org.w3c.dom.Node;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize a node object\n        Node node = someMethodToGetNode();\n\n        // Get the previous sibling of the node\n        Node previousSibling = node.getPreviousSibling();\n        \n        // Perform operations using the previous sibling node\n        if (previousSibling != null) {\n            // Some operations\n        } else {\n            // Handle case when there is no previous sibling\n        }\n    }\n\n    private static Node someMethodToGetNode() {\n        // Implement method to get the node\n        return null;\n    }\n}"}
{"api_description": "NodeList getElementsByTagName(String name): class Element\tReturns a NodeList of all descendant Elements with a given tag name, in document order.", "api_example": "import org.w3c.dom.Element;\nimport org.w3c.dom.NodeList;\n\npublic class Main {\n    public static void main(String[] args) {\n        Element element = null; // initialize with actual element\n        String tagName = \"div\";\n        \n        NodeList nodeList = element.getElementsByTagName(tagName);\n        \n        // rest of the code to work with nodeList\n    }\n}"}
{"api_description": "int getNumberOfChars(): class SVGTextContentElement", "api_example": "import org.w3c.dom.svg.SVGTextContentElement;\n\npublic class SVGTextExample {\n    public static void main(String[] args) {\n        SVGTextContentElement textElement = null;\n        int numberOfChars = textElement.getNumberOfChars();\n        System.out.println(\"Number of Characters: \" + numberOfChars);\n    }\n}"}
{"api_description": "float getRotationOfChar(int charnum): class SVGTextContentElement", "api_example": "import org.w3c.dom.svg.SVGTextContentElement;\n\npublic class Main {\n    public static void main(String[] args) {\n        SVGTextContentElement element = getElement(); // Assume this method returns an SVGTextContentElement\n        int charNum = 3;\n        \n        float rotation = element.getRotationOfChar(charNum);\n        System.out.println(\"Rotation of character \" + charNum + \" is: \" + rotation);\n    }\n    \n    // Assuming this method retrieves the SVGTextContentElement\n    private static SVGTextContentElement getElement() {\n        // Implementation to retrieve the SVGTextContentElement\n        return null;\n    }\n}"}
{"api_description": "int getCharNumAtPosition(SVGPoint point): class SVGTextContentElement", "api_example": "import org.w3c.dom.svg.SVGPoint;\nimport org.w3c.dom.svg.SVGTextContentElement;\n\npublic class SVGExample {\n    public static void main(String[] args) {\n        SVGTextContentElement element = getElement(); // assume this function returns an SVGTextContentElement\n        SVGPoint point = getPoint(); // assume this function returns an SVGPoint\n        int charNum = element.getCharNumAtPosition(point);\n        System.out.println(\"Character number at position: \" + charNum);\n    }\n\n    private static SVGTextContentElement getElement() {\n        // Implementation to get the SVGTextContentElement\n        return null;\n    }\n\n    private static SVGPoint getPoint() {\n        // Implementation to get the SVGPoint\n        return null;\n    }\n}"}
{"api_description": "boolean isElementContentWhitespace(): class Text\tReturns whether this text node contains element content whitespace, often abusively called \"ignorable whitespace\".", "api_example": "import org.w3c.dom.Text;\n\npublic class TextExample {\n    public static void main(String[] args) {\n        Text textNode = null; // initialize with actual text node object\n        boolean isWhitespace = textNode.isElementContentWhitespace();\n        System.out.println(\"Contains element content whitespace: \" + isWhitespace);\n    }\n}"}
{"api_description": "Attr getAttributeNodeNS(String namespaceURI, String localName): class Element\tRetrieves an Attr node by local name and namespace URI.", "api_example": "import org.w3c.dom.Element;\nimport org.w3c.dom.Attr;\n\npublic class Main {\n    public static void main(String[] args) {\n        Element element = null; // Initialize with actual Element object\n        String namespaceURI = \"http://www.example.com/namespace\";\n        String localName = \"attributeName\";\n\n        Attr attrNode = element.getAttributeNodeNS(namespaceURI, localName);\n    }\n}"}
{"api_description": "boolean isSameNode(Node other): class Node\tReturns whether this node is the same node as the given one.", "api_example": "import org.w3c.dom.Node;\n\npublic class Main {\n    public static void main(String[] args) {\n        Node node1 = null; // Initialize with actual Node object\n        Node node2 = null; // Initialize with actual Node object\n        \n        boolean result = node1.isSameNode(node2);\n        System.out.println(\"Are the nodes the same? \" + result);\n    }\n}"}
{"api_description": "Object getUserData(String key): class Node\tRetrieves the object associated to a key on a this node.", "api_example": "import java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Create a new HashMap\n        HashMap<String, Object> userData = new HashMap<>();\n\n        // Add some data to the HashMap\n        userData.put(\"age\", 25);\n        userData.put(\"name\", \"John Doe\");\n\n        // Get the user data associated with the key \"name\"\n        Object name = getUserData(\"name\");\n        System.out.println(\"Name: \" + name);\n    }\n\n    private static Object getUserData(String key) {\n        // This method will retrieve the object associated with the given key\n        // In this example, we simply return the value from the HashMap\n        HashMap<String, Object> userData = new HashMap<>();\n        userData.put(\"age\", 25);\n        userData.put(\"name\", \"John Doe\");\n        return userData.get(key);\n    }\n}"}
{"api_description": "Node getNamedItemNS(String namespaceURI, String localName): class NamedNodeMap\tRetrieves a node specified by local name and namespace URI.", "api_example": "import org.w3c.dom.Node;\nimport org.w3c.dom.NamedNodeMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        // Initialize NamedNodeMap\n        NamedNodeMap namedNodeMap = null;\n        \n        // Retrieve node specified by local name and namespace URI\n        Node node = namedNodeMap.getNamedItemNS(\"http://www.example.com\", \"exampleLocalName\");\n    }\n}"}
{"api_description": "void titleChanged(TitleChangeEvent event): class JFreeChart\tReceives notification that a chart title has changed, and passes this on to registered listeners.", "api_example": "import org.jfree.chart.event.TitleChangeEvent;\nimport org.jfree.chart.event.TitleChangeListener;\n\npublic class ChartTitleListener implements TitleChangeListener {\n    @Override\n    public void titleChanged(TitleChangeEvent event) {\n        // add code to handle chart title change event\n    }\n}"}
