[API Name] org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm
[Type] Class
[Info]
All Implemented Interfaces: COSObjectable
public final class PDAcroForm extends Object implements COSObjectable An interactive form, also known as an AcroForm.
Author: Ben Litchfield
[Constructor Summary]
PDAcroForm(PDDocument doc)	Constructor.
PDAcroForm(PDDocument doc, COSDictionary form)	Constructor.
[Method Summary]
FDFDocument exportFDF()	This will export all FDF form data.
void flatten()	This will flatten all form fields.
void flatten(List<PDField> fields, boolean refreshAppearances)	This will flatten the specified form fields.
List<PDField> getCalcOrder()	Return the calculation order in which field values should be recalculated when the value of any field changes.
COSDictionary getCOSObject()	Convert this standard java object to a COS object.
String getDefaultAppearance()	Get the default appearance.
PDResources getDefaultResources()	This will get the default resources for the AcroForm.
PDField getField(String fullyQualifiedName)	This will get a field by name, possibly using the cache if setCache is true.
Iterator<PDField> getFieldIterator()	Returns an iterator which walks all fields in the field tree, in order.
List<PDField> getFields()	This will return all of the documents root fields.
PDFieldTree getFieldTree()	Return the field tree representing all form fields
boolean getNeedAppearances()	True if the viewing application should construct the appearances of all field widgets.
int getQ()	This will get the document-wide default value for the quadding/justification of variable text fields.
ScriptingHandler getScriptingHandler()	Set a handler to support JavaScript actions in the form.
PDXFAResource getXFA()	Get the XFA resource, the XFA resource is only used for PDF 1.5+ forms.
boolean hasXFA()	This will tell if the AcroForm has XFA content.
void importFDF(FDFDocument fdf)	This method will import an entire FDF document into the PDF document that this acroform is part of.
boolean isAppendOnly()	Determines if AppendOnly is set.
boolean isCachingFields()	This will tell if this acro form is caching the fields.
boolean isSignaturesExist()	Determines if SignaturesExist is set.
void refreshAppearances()	Refreshes the appearance streams and appearance dictionaries for the widget annotations of all fields.
void refreshAppearances(List<PDField> fields)	Refreshes the appearance streams and appearance dictionaries for the widget annotations of the specified fields.
void setAppendOnly(boolean appendOnly)	Set the AppendOnly bit.
void setCacheFields(boolean cache)	This will tell this form to cache the fields into a Map structure for fast access via the getField method.
void setCalcOrder(List<PDField> fields)	Set the calculation order in which field values should be recalculated when the value of any field changes.
void setDefaultAppearance(String daValue)	Set the default appearance.
void setDefaultResources(PDResources dr)	This will set the default resources for the acroform.
void setFields(List<PDField> fields)	Set the documents root fields.
void setNeedAppearances(Boolean value)	Set the NeedAppearances value.
void setQ(int q)	This will set the document-wide default value for the quadding/justification of variable text fields.
void setScriptingHandler(ScriptingHandler scriptingHandler)	Set a handler to support JavaScript actions in the form.
void setSignaturesExist(boolean signaturesExist)	Set the SignaturesExist bit.
void setXFA(PDXFAResource xfa)	Set the XFA resource, this is only used for PDF 1.5+ forms.
boolean xfaIsDynamic()	This will tell if the AcroForm is a dynamic XFA form.
[Methods inherited from class java.lang.Object]
clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait